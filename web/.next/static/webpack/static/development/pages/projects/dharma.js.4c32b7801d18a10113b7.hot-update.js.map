{"version":3,"file":"static/webpack/static/development/pages/projects/dharma.js.4c32b7801d18a10113b7.hot-update.js","sources":["webpack:///./sketches/p5/dharma.tsx"],"sourcesContent":["/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n\nimport p5, { Font } from \"p5\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_DharmaCanvas = {\n  W: number;\n  H: number;\n  ID: number;\n  BG: string;\n};\n\nexport type LXLT_DharmaCanvasDisplay = (\n  W: number,\n  H: number,\n  ID: number,\n  BG: string\n) => (p: p5) => void;\n\ntype LXLT_DharmaCanvasChar = {\n  letter: string;\n  count: number;\n  idx: number;\n  copies: boolean;\n};\n\nconst DharmaCanvasDisplay: LXLT_DharmaCanvasDisplay = (W, H, ID, BG) => (\n  p: p5\n) => {\n  // _________________________________________________\n  // Config\n  let dharmaFont: Font;\n\n  let text = \"LAXALT\";\n  let splitCharacterArray = text.split(\"\");\n  let characters: LXLT_DharmaCanvasChar[] = splitCharacterArray.map(\n    (character: string, idx: number) => {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n        copies: Math.random() <= 0.5,\n      };\n    }\n  );\n\n  // let viewBoxHeight: number = H;\n  let viewBoxWidth: number = W;\n\n  let characterCount: number = splitCharacterArray.length;\n  let characterWidth: number = viewBoxWidth / characterCount;\n\n  // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n  // let characterVerticalTranslation: number = 0.993; // Multiplied by the viewBoxHeight\n  // let characterHorizontalScale: number = 0.75; // Multiplied by the characterWidth\n  // let characterVerticalScale: number = 1.38; // Multiplied by the characterWidth\n\n  // _________________________________________________\n  // Preload\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  };\n\n  // _________________________________________________\n  // Setup\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H, p.WEBGL);\n    p.noStroke();\n  };\n\n  // _________________________________________________\n  // Draw\n  p.draw = () => {\n    // rect gives us some geometry on the screen\n\n    p.background(BG);\n    p.textFont(dharmaFont);\n    p.textLeading(0);\n    p.textSize(H * 1.25);\n\n    characters.map((char: LXLT_DharmaCanvasChar, idx: number) => {\n      let countArray: number[] = Array.from(Array(char.count).keys());\n\n      return countArray.map((duplicate: number, idxx: number) => {\n        p.text(char.letter, (W / -2) + (characterWidth * idx), -40);\n        p.fill(\"black\");\n      });\n    });\n\n    p.textAlign(p.CENTER, p.CENTER);\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;\n"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;;;AASA;AACA;AAuBA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAGA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAtEA;AACA;AAuEA;;;;A","sourceRoot":""}