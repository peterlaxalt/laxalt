{"version":3,"file":"static/webpack/static/development/pages/projects/p6.js.9a71cf677db44fc04b1f.hot-update.js","sources":["webpack:///./sketches/p5/dharma.tsx"],"sourcesContent":["/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n\nimport p5, { Font } from \"p5\";\nimport { Theme } from \"../../constants/Theme\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_DharmaCanvas = {\n  W: number;\n  H: number;\n  ID: number;\n  BG: string;\n};\n\nexport type LXLT_DharmaCanvasDisplay = (\n  W: number,\n  H: number,\n  ID: number,\n  BG: string\n) => (p: p5) => void;\n\ntype LXLT_DharmaCanvasChar = {\n  letter: string;\n  count: number;\n  idx: number;\n  copies: number;\n};\n\nconst DharmaCanvasDisplay: LXLT_DharmaCanvasDisplay = (W, H, ID, BG) => (\n  p: p5\n) => {\n  // _________________________________________________\n  // Config\n\n  // ____________________________\n  // Fonts\n  let dharmaFont: Font;\n\n  // ____________________________\n  // Typography\n  let text = \"LAXALT\";\n\n  let splitCharacterArray = text.split(\"\");\n  let characters: LXLT_DharmaCanvasChar[] = splitCharacterArray.map(\n    (character: string, idx: number) => {\n      return {\n        letter: character,\n        count: 3,\n        idx: idx,\n        copies: 1,\n      };\n    }\n  );\n\n  let characterCount: number = splitCharacterArray.length;\n  let characterWidth: number = W / characterCount;\n  let characterSize: number = H * 1.25;\n\n  console.log(characterSize, \"characterSize\");\n\n  // ____________________________\n  // Counts\n  let renderCount: number = 0;\n\n  // ____________________________\n  // Strokes\n  let strokeWidth: number = 4;\n  let strokeOffset: number = strokeWidth * 3;\n\n  // ____________________________\n  // Incrementing\n  // let maxCopies = 30;\n  // let minCopies = 1;\n\n  let isIncrementing: boolean = true;\n  isIncrementing;\n\n  // ____________________________\n  // Translation\n  // let previousVerticalTranslation: number = H / 2.25;\n\n  let verticalTranslationWhitespaceCompensation: number = 2.25;\n  const previousHorizontalTranslation = (idx: number) =>\n    characterWidth * idx + characterWidth / 2 + strokeOffset;\n\n  // const previousHorizontalTranslation = (idx: number) =>\n  //   characterWidth * idx + characterWidth / 2 + strokeOffset * renderCount;\n\n  // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n  // let characterVerticalTranslation: number = 0.993; // Multiplied by the viewBoxHeight\n  // let characterHorizontalScale: number = 0.75; // Multiplied by the characterWidth\n  // let characterVerticalScale: number = 1.38; // Multiplied by the characterWidth\n\n  // _________________________________________________\n  // Preload\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  };\n\n  // _________________________________________________\n  // Setup\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H);\n  };\n\n  // _________________________________________________\n  // Draw\n  p.draw = () => {\n    // p.background(BG);\n\n    p.textFont(dharmaFont);\n\n    p.textSize(characterSize);\n\n    p.textAlign(p.CENTER, p.CENTER);\n\n    p.fill(`${Theme.Color.Galaxy}`);\n    p.strokeWeight(strokeWidth);\n    p.stroke(BG);\n\n    p.mouseIsPressed\n      ? (renderCount = renderCount + 1)\n      : (renderCount = renderCount);\n\n    if (H && W) {\n      characters.map((char: LXLT_DharmaCanvasChar, idx: number) => {\n        p.scale(1, 1);\n\n        let countArray: number[] = Array.from(Array(char.count).keys());\n\n        countArray = countArray.map((countNumber: number) => {\n          return countNumber + 1;\n        });\n\n        // let verticalDivisble: number = 10;\n        // let verticalPosition: number = H / verticalDivisble;\n\n        // p.scale(1, 0.5);\n\n        // console.log(\"countArray\", countArray);\n\n        countArray.map((countNumber: number, idxx: number) => {\n          // let adjustedDuplicate = char.count > 1 ? char.count : duplicate + 1;\n\n          // let verticalScale = char.count > 0 ? H / char.count / H : 1;\n          // let verticalScale = 1 / char.count;\n          let verticalScale = 1 / char.count;\n          // let magnifiedCharSize = characterSize * (verticalScale * 100);\n          // let duplicateVerticalPosition = (characterSize * verticalScale * idxx) * char.count;\n          // let duplicateVerticalPosition =\n          //   (H / 2.25) + (characterSize * adjustedDuplicate);\n\n          // console.log(\"duplicateVerticalPosition\", duplicateVerticalPosition);\n          // console.log(\"H\", H);\n          // console.log(\"characterSize\", characterSize);\n\n          let verticalSkewDivisible: number = 2.75 / (char.count / (char.count * .8));\n          let characterSkewDivisible: number = 1.3;\n\n          let duplicateVerticalPosition: number =\n            char.count == 1\n              ? H / verticalTranslationWhitespaceCompensation\n              : characterSize / verticalSkewDivisible +\n                (characterSize / characterSkewDivisible) * idxx;\n\n          p.push();\n          p.scale(1, verticalScale);\n          p.text(\n            char.letter,\n            previousHorizontalTranslation(idx),\n            duplicateVerticalPosition\n          );\n          p.pop();\n        });\n      });\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;;;AAQA;AAGA;AACA;AAsBA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAGA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1JA;AACA;AA2JA;;;;A","sourceRoot":""}