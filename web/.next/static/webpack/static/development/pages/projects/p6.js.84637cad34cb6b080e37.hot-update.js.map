{"version":3,"file":"static/webpack/static/development/pages/projects/p6.js.84637cad34cb6b080e37.hot-update.js","sources":["webpack:///./sketches/p5 sync ^\\.\\/.*$","webpack:///./sketches/p5/glsl.ts"],"sourcesContent":["var map = {\n\t\"./d1\": \"./sketches/p5/d1.tsx\",\n\t\"./d1.tsx\": \"./sketches/p5/d1.tsx\",\n\t\"./d2\": \"./sketches/p5/d2.tsx\",\n\t\"./d2.tsx\": \"./sketches/p5/d2.tsx\",\n\t\"./d8\": \"./sketches/p5/d8.js\",\n\t\"./d8.js\": \"./sketches/p5/d8.js\",\n\t\"./glsl\": \"./sketches/p5/glsl.tsx\",\n\t\"./glsl.ts\": \"./sketches/p5/glsl.ts\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./sketches/p5 sync recursive ^\\\\.\\\\/.*$\";","/**\n *\n * Sin Wave Cone\n * @author Peter Laxalt\n * @description Simple Sin Wave Cone in p5.js\n *\n */\n\nimport p5, { Shader } from \"p5\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport default (W: number, H: number, BG: string) => (p: p5) => {\n  // _________________________________________________\n  // Config\n  let theShader: Shader;\n\n  // _________________________________________________\n  // Preload\n  p.preload = () => {\n    theShader = p.loadShader(\"shader.vert\", \"shader.frag\");\n  };\n\n  // _________________________________________________\n  // Setup\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H, p.WEBGL);\n    p.noStroke();\n  };\n\n  // _________________________________________________\n  // Draw\n  p.draw = () => {\n    // shader() sets the active shader with our shader\n    p.shader(theShader);\n\n    theShader.setUniform(\"u_resolution\", [W, H]);\n    theShader.setUniform(\"u_time\", p.millis() / 1000.0);\n    theShader.setUniform(\"u_mouse\", [p.mouseX, p.map(p.mouseY, 0, H, H, 0)]);\n\n    // rect gives us some geometry on the screen\n    p.rect(0, 0, W, H);\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC7BA;AAAA;;;;;;;AAUA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;;;;;;;;;;A","sourceRoot":""}