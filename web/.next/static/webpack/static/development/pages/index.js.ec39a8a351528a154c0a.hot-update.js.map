{"version":3,"file":"static/webpack/static/development/pages/index.js.ec39a8a351528a154c0a.hot-update.js","sources":["webpack:///./components/_interactive/DharmaCounter/DharmaCounter.tsx","webpack:///./components/_interactive/InteractiveFrameHeader/styles.scss.tsx","webpack:///./components/_svg/DharmaType/styles.scss.tsx"],"sourcesContent":["// Core\nimport React from \"react\";\nimport { Theme } from \"../../../constants/Theme\";\nimport {\n  DharmaTypeClassName,\n  DharmaTypeStyle,\n} from \"../../_svg/DharmaType/styles.scss\";\n\n// Begin Types\n// __________________________________________________________________________________________\n\ntype LXLT_DharmaCounter = {\n  text: string;\n};\n\ntype LXLT_DharmaCounterState = {\n  text: string;\n  characters: LXLT_DharmaChar[];\n\n  viewBoxHeight: number;\n  viewBoxWidth: number;\n\n  characterVerticalTranslation: number;\n  characterHorizontalScale: number;\n  characterVerticalScale: number;\n\n  characterWidth: number;\n\n  isInitialized: boolean;\n\n  offsetCount: number;\n};\n\ntype LXLT_DharmaChar = {\n  letter: string;\n  count: number;\n  idx: number;\n  copies: boolean;\n};\n\ntype LXLT_DharmaCounterDisplay = LXLT_DharmaCounterState & {\n  updateLetterCount: (id: number) => void;\n\n  outlined?: boolean;\n  offset?: number;\n  addClass?: string;\n};\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name DharmaCounter\n * @author Peter Laxalt\n *\n */\nexport class DharmaCounter extends React.PureComponent<\n  LXLT_DharmaCounter,\n  LXLT_DharmaCounterState\n> {\n  constructor(props: LXLT_DharmaCounter) {\n    super(props);\n\n    this.state = {\n      text: \"\",\n      characters: [],\n\n      viewBoxHeight: 0,\n      viewBoxWidth: 0,\n      characterWidth: 0,\n\n      offsetCount: 3,\n\n      characterVerticalTranslation: 0,\n      characterHorizontalScale: 0,\n      characterVerticalScale: 0,\n\n      isInitialized: false,\n    };\n\n    this.incrementLetterCount = this.incrementLetterCount.bind(this);\n    this.decrementLetterCount = this.decrementLetterCount.bind(this);\n    this.resetLetterCount = this.resetLetterCount.bind(this);\n    this.updateLetterCount = this.updateLetterCount.bind(this);\n\n    this.letterCountTimer = this.letterCountTimer.bind(this);\n\n    this.offsetCountTimer = this.offsetCountTimer.bind(this);\n    this.incrementOffsetCount = this.incrementOffsetCount.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.text) {\n      // ____________________________________________\n      // Get text / create array\n      let { text } = this.props;\n\n      let splitCharacterArray = text.split(\"\");\n      let characterArray: LXLT_DharmaChar[] = splitCharacterArray.map(\n        (character: string, idx: number) => {\n          return {\n            letter: character,\n            count: 1,\n            idx: idx,\n            copies: Math.random() <= 0.5,\n          };\n        }\n      );\n\n      // ____________________________________________\n      // USE THESE TO TWEAK YOUR CHARACTERS TO FIT\n      let viewBoxHeight = 100;\n      let viewBoxWidth = 100;\n\n      let characterCount = splitCharacterArray.length;\n      let characterWidth = viewBoxWidth / characterCount;\n\n      // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n      let characterVerticalTranslation = 0.993; // Multiplied by the viewBoxHeight\n      let characterHorizontalScale = 0.75; // Multiplied by the characterWidth\n      let characterVerticalScale = 1.38; // Multiplied by the characterWidth\n\n      this.setState({\n        text: text,\n        characters: characterArray,\n\n        viewBoxHeight: viewBoxHeight,\n        viewBoxWidth: viewBoxWidth,\n\n        characterWidth: characterWidth,\n\n        characterHorizontalScale: characterHorizontalScale,\n        characterVerticalScale: characterVerticalScale,\n        characterVerticalTranslation: characterVerticalTranslation,\n\n        isInitialized: true,\n      });\n\n      this.letterCountTimer();\n      this.offsetCountTimer();\n    }\n  }\n\n  incrementLetterCount(id: number) {\n    this.setState({\n      characters: this.state.characters.map(\n        (character: LXLT_DharmaChar, idx: number) => {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? character.count + 1 : character.count,\n            idx: idx,\n            copies: Math.random() <= 0.5,\n          };\n        }\n      ),\n    });\n\n    return;\n  }\n\n  decrementLetterCount(id: number) {\n    this.setState({\n      characters: this.state.characters.map(\n        (character: LXLT_DharmaChar, idx: number) => {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? character.count - 1 : character.count,\n            idx: idx,\n            copies: Math.random() <= 0.5,\n          };\n        }\n      ),\n    });\n\n    return;\n  }\n\n  resetLetterCount(id: number) {\n    this.setState({\n      characters: this.state.characters.map(\n        (character: LXLT_DharmaChar, idx: number) => {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? 1 : character.count,\n            idx: idx,\n            copies: Math.random() <= 0.5,\n          };\n        }\n      ),\n    });\n\n    return;\n  }\n\n  updateLetterCount(id: number) {\n    if (this.state.characters && this.state.characters.length > 0) {\n      let matchedCharacter: LXLT_DharmaChar = this.state.characters.filter(\n        (character: LXLT_DharmaChar) => character.idx == id\n      )[0];\n\n      let maxCount = 4;\n\n      if (matchedCharacter) {\n        if (matchedCharacter.count === maxCount) {\n          this.resetLetterCount(id);\n        } else {\n          this.incrementLetterCount(id);\n        }\n      } else {\n        return;\n      }\n    } else {\n      return;\n    }\n\n    return;\n  }\n\n  letterCountTimer() {\n    function generateRandomInteger(min, max) {\n      return Math.floor(min + Math.random() * (max + 1 - min));\n    }\n\n    window.setInterval(\n      () =>\n        this.updateLetterCount(\n          generateRandomInteger(0, this.state.characters.length)\n        ),\n      3000\n    );\n  }\n\n  incrementOffsetCount() {\n    this.setState({\n      offsetCount: this.state.offsetCount < 15 ? this.state.offsetCount + 1 : 2,\n    });\n\n    return;\n  }\n\n  offsetCountTimer() {\n    window.setInterval(() => this.incrementOffsetCount(), 5000);\n  }\n\n  render() {\n    let offsetCount = this.state.offsetCount;\n    var offsetArr = Array.from(Array(offsetCount).keys());\n\n    return (\n      <>\n        <DharmaCounterDisplay\n          updateLetterCount={this.updateLetterCount}\n          {...this.state}\n        />\n\n        {offsetArr.map((n: number, idx: number) => {\n          return (\n            <DharmaCounterDisplay\n              outlined={true}\n              offset={n}\n              key={idx}\n              updateLetterCount={this.updateLetterCount}\n              {...this.state}\n            />\n          );\n        })}\n      </>\n    );\n  }\n}\n\nconst DharmaCounterDisplay: React.FunctionComponent<LXLT_DharmaCounterDisplay> = (\n  props\n) => {\n  let {\n    viewBoxHeight,\n    viewBoxWidth,\n    characters,\n    characterWidth,\n\n    characterHorizontalScale,\n    characterVerticalScale,\n    characterVerticalTranslation,\n\n    updateLetterCount,\n\n    offset,\n    outlined,\n\n    addClass,\n  } = props;\n\n  return (\n    <DharmaTypeStyle\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox={`0 0 ${viewBoxWidth} ${viewBoxHeight}`}\n      preserveAspectRatio=\"none\"\n      className={`${DharmaTypeClassName} ${DharmaTypeClassName}--counter ${\n        offset ? `${DharmaTypeClassName}--offset` : \"\"\n      } ${addClass}`}\n      style={{\n        [`--${DharmaTypeClassName}-font-size` as any]: `${viewBoxHeight}px`,\n        [`--${DharmaTypeClassName}-offset` as any]: `${offset ? offset : 0}`,\n      }}\n    >\n      <g>\n        {characters.map((char: LXLT_DharmaChar, idx: number) => {\n          let countArray = Array.from(Array(char.count).keys());\n\n          return countArray.map((duplicate: number, idxx: number) => {\n            let adjustedDuplicate = char.count > 1 ? char.count : duplicate + 1;\n\n            let canCopy = Math.random() <= 0.5;\n\n            let adjustedVerticalTranslation =\n              (viewBoxHeight / adjustedDuplicate) *\n              (idxx + 1) *\n              characterVerticalTranslation;\n\n            let adjustedVerticalScale =\n              characterVerticalScale / adjustedDuplicate;\n\n            return (\n              <g\n                className={`${DharmaTypeClassName}__character-wrapper`}\n                data-char-id={idx}\n                data-char-count={duplicate}\n                key={idxx}\n                onClick={() => updateLetterCount(idx)}\n                style={{\n                  display: outlined && char.copies && canCopy ? \"none\" : \"inherit\",\n                }}\n              >\n                <filter\n                  id={`displacementFilter__${idx}__${idxx}${\n                    outlined ? \"__outlined\" : \"\"\n                  }`}\n                >\n                  {!outlined && (\n                    <>\n                      <feTurbulence\n                        type=\"turbulence\"\n                        // baseFrequency={0.6 * (idxx * 0.05)}\n                        // numOctaves={1 * (idxx + 20)}\n                        baseFrequency={0}\n                        numOctaves={0}\n                        result=\"turbulence\"\n                      />\n                      <feDisplacementMap\n                        in2=\"turbulence\"\n                        in=\"SourceGraphic\"\n                        // scale={3 - idxx * 0.5}\n                        scale={0}\n                        xChannelSelector=\"R\"\n                        yChannelSelector=\"G\"\n                      />\n                    </>\n                  )}\n\n                  {/* Outline  */}\n                  {outlined && (\n                    <>\n                      <feFlood\n                        flood-color={Theme.Color.varBackground}\n                        flood-opacity=\"1\"\n                        result=\"PINK\"\n                      />\n                      <feMorphology\n                        in=\"SourceAlpha\"\n                        result=\"DILATED\"\n                        operator=\"dilate\"\n                        radius=\".1\"\n                      />\n                      <feComposite\n                        in=\"PINK\"\n                        in2=\"DILATED\"\n                        operator=\"in\"\n                        result=\"OUTLINE\"\n                      />\n\n                      <feMerge>\n                        <feMergeNode in=\"OUTLINE\" />\n                        <feMergeNode in=\"SourceGraphic\" />\n                      </feMerge>\n                    </>\n                  )}\n                </filter>\n\n                <text\n                  className={`${DharmaTypeClassName}__character`}\n                  transform={`translate(${\n                    characterWidth * idx\n                  } ${adjustedVerticalTranslation}) scale(${characterHorizontalScale}, ${adjustedVerticalScale})`}\n                  style={{\n                    [`--${DharmaTypeClassName}-key` as any]: idx,\n                    filter: `url(#displacementFilter__${idx}__${idxx}${\n                      outlined ? \"__outlined\" : \"\"\n                    })`,\n                  }}\n                >\n                  <tspan className={`${DharmaTypeClassName}__letter`}>\n                    {char.letter}\n                  </tspan>\n                </text>\n              </g>\n            );\n          });\n        })}\n      </g>\n    </DharmaTypeStyle>\n  );\n};\n","// Imports\n// _________________________________________________________________________\n\n// Core\nimport styled from \"styled-components\";\n\n// Constants\nimport { Theme } from \"../../../constants/Theme\";\nimport { Root } from \"../../../constants/Root\";\nimport { DharmaTypeClassName } from \"../../_svg/DharmaType/styles.scss\";\nimport {} from \"../../../constants/styles/CssUtils\";\n\n// Begin Styles\n// _________________________________________________________________________\n\n/**\n *\n * @name InteractiveFrameHeaderClassName\n * @description The root class name for styling. BEM naming conventions.\n *\n */\nexport const InteractiveFrameHeaderClassName = \"interactive-frame-header\";\n\n/**\n *\n * @name InteractiveFrameHeaderStyle\n * @author Peter Laxalt\n *\n */\nexport const InteractiveFrameHeaderStyle = styled.div`\n  &.${InteractiveFrameHeaderClassName} {\n    // __________________________\n    // Settings\n    --${InteractiveFrameHeaderClassName}__frame-edge-size: ${Root.FrameSize};\n    --${InteractiveFrameHeaderClassName}__marquee-speed: 60s;\n\n    @media(max-width: ${Theme.Base.Media.Width.Md}) {\n      --${InteractiveFrameHeaderClassName}__frame-edge-size: ${Root.FrameSize};\n    }\n\n    overflow: hidden;\n\n    // __________________________\n    // Inner Grid\n    .${InteractiveFrameHeaderClassName}__inner {\n      width: 100vw;\n      height: 100vh;\n\n      position: relative;\n\n    }\n\n    .${DharmaTypeClassName}, .${InteractiveFrameHeaderClassName}__frame {\n      position: absolute;\n\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n\n      width: 100%;\n      height: 100%;\n    }\n\n    .${InteractiveFrameHeaderClassName}__type {\n      position: absolute;\n\n      top: 50%;\n      left: 50%;\n\n      transform: translate(-50%, -50%);\n\n      width: calc(100% - (var(--${InteractiveFrameHeaderClassName}__frame-edge-size) * 2));\n      height: calc(100% - (var(--${InteractiveFrameHeaderClassName}__frame-edge-size) * 2.25));\n\n      @media(max-width: ${Theme.Base.Media.Width.Sm}) {\n        transform: translate(-50%, -50%) rotate(90deg);\n\n        width: calc(100vh - (var(--${InteractiveFrameHeaderClassName}__frame-edge-size) * 2.25));\n        height: calc(100vw - (var(--${InteractiveFrameHeaderClassName}__frame-edge-size) * 2.25));\n      }\n\n      .${DharmaTypeClassName} {\n        --${DharmaTypeClassName}-offset-size: 10px;\n\n        @media(max-width: ${Theme.Base.Media.Width.Sm}) {\n          --${DharmaTypeClassName}-offset-size: 5px;\n        }\n\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n\n        width: 100%;\n        height: 100%;\n\n        &--offset {\n          top: calc(var(--${DharmaTypeClassName}-offset-size) * (var(--${DharmaTypeClassName}-offset) * -1));\n          left: calc(var(--${DharmaTypeClassName}-offset-size) * (var(--${DharmaTypeClassName}-offset) * 1));\n          right: calc(var(--${DharmaTypeClassName}-offset-size) * (var(--${DharmaTypeClassName}-offset) * -1));\n          bottom: calc(var(--${DharmaTypeClassName}-offset-size) * (var(--${DharmaTypeClassName}-offset) * 1));\n        }\n      }\n\n      .${DharmaTypeClassName}__character {\n        fill: ${Theme.Color.varForeground};\n\n        transition: stroke-width .5s ease;\n      }\n    }\n\n    .${InteractiveFrameHeaderClassName}__frame {\n      z-index: 500;\n\n      &__y-axis,\n      &__x-axis {\n        position: absolute;\n\n        overflow: hidden;\n\n        left: 50%;\n        top: 50%;\n\n        pointer-events: none;\n\n      }\n\n      &__y-axis {\n        width: 100vw;\n        height: 100vh;\n\n        transform: translate(-50%, -50%);\n      }\n\n      &__x-axis {\n        width: 100vh;\n        height: 100vw;\n\n        transform: translate(-50%, -50%) rotate(90deg);\n      }\n\n      &__edge {\n        font-size: calc(var(--${InteractiveFrameHeaderClassName}__frame-edge-size) * 0.75);\n        text-transform: uppercase;\n        line-height: 0;\n\n        z-index: 800;\n\n        background: ${Theme.Color.varBackground};\n\n        .${InteractiveFrameHeaderClassName}__frame-items {\n          list-style-type: none;\n\n          color: ${Theme.Color.varForeground};\n\n          height: var(--${InteractiveFrameHeaderClassName}__frame-edge-size);\n\n          display: block;\n          align-items: center;\n          justify-content: flex-start;\n\n          li {\n            margin-right: calc(var(--${InteractiveFrameHeaderClassName}__frame-edge-size) / 2);\n          }\n        }\n\n        .${InteractiveFrameHeaderClassName}__marquee-container {\n          flex-shrink: 0;\n\n          display: flex;\n          justify-content: flex-start;\n\n          flex-wrap: nowrap;\n          position: relative;\n\n          overflow: hidden;\n\n          .${InteractiveFrameHeaderClassName}__frame-items {\n            display: flex;\n            flex-wrap: nowrap;\n            white-space: nowrap;\n\n            flex-shrink: 0;\n\n            li {\n              width: auto;\n              flex-shrink: 0;\n              white-space: nowrap;\n\n              vertical-align: middle;\n              display: table-cell;\n            }\n          }\n        }\n\n        &--top,\n        &--bottom,\n        &--left,\n        &--right {\n          position: absolute;\n\n          overflow: hidden;\n\n          pointer-events: all;\n        }\n\n        &--top,\n        &--right {\n          border-bottom: 1px solid ${Theme.Color.varForeground};\n\n          .${InteractiveFrameHeaderClassName}__frame-items {\n            padding-top: calc(var(--${InteractiveFrameHeaderClassName}__frame-edge-size) / 6);\n            padding-bottom: calc(var(--${InteractiveFrameHeaderClassName}__frame-edge-size) / 6);\n\n            position: relative;\n\n            animation: marqueeTopRightQuadrants var(--${InteractiveFrameHeaderClassName}__marquee-speed) linear infinite;\n          }\n        }\n\n        &--bottom,\n        &--left {\n          border-top: 1px solid ${Theme.Color.varForeground};\n\n          .${InteractiveFrameHeaderClassName}__frame-items {\n            padding-top: calc(var(--${InteractiveFrameHeaderClassName}__frame-edge-size) / 6);\n            padding-bottom: calc(var(--${InteractiveFrameHeaderClassName}__frame-edge-size) / 6);\n\n            animation: marqueeBottomLeftQuadrants var(--${InteractiveFrameHeaderClassName}__marquee-speed) linear infinite;\n          }\n        }\n\n        &--top,\n        &--bottom {\n          width: calc(100vw - var(--${InteractiveFrameHeaderClassName}__frame-edge-size));\n        }\n\n        &--left,\n        &--right {\n          width: calc(100vh - var(--${InteractiveFrameHeaderClassName}__frame-edge-size));\n        }\n\n        &--top {\n          /* background: seashell; */\n\n          top: 0;\n          left: var(--${InteractiveFrameHeaderClassName}__frame-edge-size);\n        }\n\n        &--bottom {\n          /* background: magenta; */\n\n          bottom: 0;\n          right: var(--${InteractiveFrameHeaderClassName}__frame-edge-size);\n        }\n\n        &--right {\n          /* background: orange; */\n\n          top: 0;\n          left: var(--${InteractiveFrameHeaderClassName}__frame-edge-size);\n        }\n\n        &--left {\n          /* background: goldenrod; */\n\n          bottom: 0;\n          left: 0;\n        }\n      }\n    }\n  }\n`;\n","// Imports\n// _________________________________________________________________________\n\n// Core\nimport styled from \"styled-components\";\n\n// Constants\nimport {} from \"../../../constants/Theme\";\nimport {} from \"../../../constants/Root\";\nimport { CssUtils } from \"../../../constants/styles/CssUtils\";\n\n// Begin Styles\n// _________________________________________________________________________\n\n/**\n *\n * @name DharmaTypeClassName\n * @description The root class name for styling. BEM naming conventions.\n *\n */\nexport const DharmaTypeClassName = \"dharma-type\";\n\n/**\n *\n * @name DharmaTypeStyle\n * @author Peter Laxalt\n *\n */\nexport const DharmaTypeStyle = styled.svg`\n  &.${DharmaTypeClassName} {\n    .${DharmaTypeClassName}__character-wrapper {\n      /* filter: blur(0.01px); */\n      position: relative;\n\n      /* transition: filter 0.5s ease-in-out;\n\n      &:hover {\n        filter: blur(0.25px);\n      } */\n\n      // ___________________________________\n      // @name Letter Kerning for \"LAXALT\"\n      &[data-char-id=\"5\"] {\n        transform: translateX(2.25px);\n      }\n\n      &[data-char-id=\"4\"] {\n        transform: translateX(5.25px);\n      }\n\n      &[data-char-id=\"3\"] {\n        transform: translateX(3.25px);\n      }\n\n      &[data-char-id=\"2\"] {\n        transform: translateX(0.75px);\n      }\n\n      &[data-char-id=\"1\"] {\n        transform: translateX(-1.5px);\n      }\n\n      &[data-char-id=\"0\"] {\n        transform: translateX(0px);\n      }\n\n      &--hidden {\n        display: none;\n      }\n    }\n\n    .${DharmaTypeClassName}__character {\n      font-size: var(--${DharmaTypeClassName}-font-size);\n      font-family: dharma;\n      /* font-family: Bordeaux Roman Bold LET, DharmaGothicC-ExBold, Dharma Gothic C; */\n      font-weight: 700;\n      letter-spacing: 0em;\n\n      ${CssUtils.DisableUserSelect()};\n    }\n\n    // ___________________________________\n    // @name Simple Version\n\n    .${DharmaTypeClassName}__text {\n      font-size: var(--${DharmaTypeClassName}-font-size);\n      font-family: DharmaGothicC-ExBold, Dharma Gothic C;\n      /* font-family: Bordeaux Roman Bold LET, DharmaGothicC-ExBold, Dharma Gothic C; */\n      font-weight: 700;\n      letter-spacing: 0em;\n\n\n      transition: filter 1s ease-in-out;\n      will-change: filter;\n    }\n  }\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAMA;AACA;AAsCA;AACA;AACA;AACA;;;;;AAKA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAdA;AAiBA;AACA;AACA;AACA;AAEA;AAEA;AACA;AA5BA;AA6BA;AACA;AAlCA;AAAA;AAAA;AAoCA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAbA;AAgBA;AACA;AACA;AACA;AArFA;AAAA;AAAA;AAwFA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AATA;AAaA;AACA;AAtGA;AAAA;AAAA;AAyGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AATA;AAaA;AACA;AAvHA;AAAA;AAAA;AA0HA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AATA;AAaA;AACA;AAxIA;AAAA;AAAA;AA2IA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhKA;AAAA;AAAA;AAkKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA;AA9KA;AAAA;AAAA;AAiLA;AACA;AADA;AAIA;AACA;AAtLA;AAAA;AAAA;AAwLA;AACA;AAAA;AAAA;AAAA;AACA;AA1LA;AAAA;AAAA;AA4LA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAGA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAGA;AApNA;AACA;AADA;AAAA;AACA;AAsNA;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAEA;AACA;AACA;AACA;AAGA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AAKA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AADA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAEA;AAHA;AAIA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAFA;AAIA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAGA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAIA;;;;;;;;;;;;AC3ZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;;;;;;;AAMA;AAEA;;;;;;;AAMA;AAAA;AAAA;AAAA;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;;;;;;;AAMA;AAEA;;;;;;;AAMA;AAAA;AAAA;AAAA;;;;;;;A","sourceRoot":""}