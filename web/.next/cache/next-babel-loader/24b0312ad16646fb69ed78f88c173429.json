{"ast":null,"code":"var _jsxFileName = \"/Users/pflaxalt/Repositories/_pfl/web/pages/projects/test.tsx\";\nvar __jsx = React.createElement;\nimport React, { PureComponent } from \"react\";\nimport { Layout } from \"../../components/Layout/Layout\";\nimport Sketch from \"react-p5\";\n\nclass Test extends PureComponent {\n  constructor(setup, draw, props) {\n    super(props);\n    this.setup = setup;\n    this.draw = draw;\n    this.state = {\n      domLoaded: false,\n      setup: {},\n      draw: {}\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      domLoaded: true\n    });\n\n    if (false) {\n      let x = 0;\n      let scale = 50;\n      let initialScale = 1500;\n      let canvasX = window.innerWidth;\n      let canvasY = window.innerHeight;\n      let color = {\n        primary: \"rgba(0, 0, 0, .3)\",\n        primaryAlpha: \"rgba(0, 0, 0, 1)\",\n        secondary: \"#000000\",\n        bg: \"#ffffff\",\n        white: \"#ffffff\"\n      };\n\n      this.setup = (p5, parent) => {\n        // Our Canvas\n        let sketchCanvas = p5.createCanvas(canvasX, canvasY);\n        sketchCanvas.parent(\"sketch\");\n      };\n\n      this.draw = p5 => {\n        scale += 1;\n        x = x * 1.1 + 2;\n        p5.noFill();\n        p5.stroke(color.primary);\n\n        for (let i = -1500; i < 10; i++) {\n          p5.ellipse(i * 200, p5.windowHeight / 2, Math.sin(scale) * (Math.sin(scale) * initialScale), Math.sin(scale) * (Math.sin(scale) * initialScale));\n          p5.strokeWeight(0.5);\n        }\n      };\n    }\n  }\n\n  render() {\n    return __jsx(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Test Hello \"), this.state.domLoaded == true ? __jsx(Sketch, {\n      setup: this.setup,\n      draw: this.draw,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }) : \"Loading\");\n  }\n\n}\n\nexport default Test;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/pages/projects/test.tsx"],"names":["React","PureComponent","Layout","Sketch","Test","constructor","setup","draw","props","state","domLoaded","componentDidMount","setState","x","scale","initialScale","canvasX","window","innerWidth","canvasY","innerHeight","color","primary","primaryAlpha","secondary","bg","white","p5","parent","sketchCanvas","createCanvas","noFill","stroke","i","ellipse","windowHeight","Math","sin","strokeWeight","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,MAAT,QAAuB,gCAAvB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAQA,MAAMC,IAAN,SAAmBH,aAAnB,CAAgD;AAC9CI,EAAAA,WAAW,CAAQC,KAAR,EAA2BC,IAA3B,EAAsCC,KAAtC,EAAkD;AAC3D,UAAMA,KAAN;AAD2D,SAA1CF,KAA0C,GAA1CA,KAA0C;AAAA,SAAvBC,IAAuB,GAAvBA,IAAuB;AAG3D,SAAKE,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,KADA;AAEXJ,MAAAA,KAAK,EAAE,EAFI;AAGXC,MAAAA,IAAI,EAAE;AAHK,KAAb;AAKD;;AAEDI,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,QAAL,CAAc;AACZF,MAAAA,SAAS,EAAE;AADC,KAAd;;AAIA,eAAmC;AACjC,UAAIG,CAAC,GAAG,CAAR;AACA,UAAIC,KAAK,GAAG,EAAZ;AACA,UAAIC,YAAY,GAAG,IAAnB;AACA,UAAIC,OAAO,GAAGC,MAAM,CAACC,UAArB;AACA,UAAIC,OAAO,GAAGF,MAAM,CAACG,WAArB;AAEA,UAAIC,KAAK,GAAG;AACVC,QAAAA,OAAO,EAAE,mBADC;AAEVC,QAAAA,YAAY,EAAE,kBAFJ;AAGVC,QAAAA,SAAS,EAAE,SAHD;AAIVC,QAAAA,EAAE,EAAE,SAJM;AAKVC,QAAAA,KAAK,EAAE;AALG,OAAZ;;AAQA,WAAKpB,KAAL,GAAa,CAACqB,EAAD,EAAUC,MAAV,KAA0B;AACrC;AACA,YAAIC,YAAY,GAAGF,EAAE,CAACG,YAAH,CAAgBd,OAAhB,EAAyBG,OAAzB,CAAnB;AACAU,QAAAA,YAAY,CAACD,MAAb,CAAoB,QAApB;AACD,OAJD;;AAMA,WAAKrB,IAAL,GAAaoB,EAAD,IAAa;AACvBb,QAAAA,KAAK,IAAI,CAAT;AACAD,QAAAA,CAAC,GAAGA,CAAC,GAAG,GAAJ,GAAU,CAAd;AAEAc,QAAAA,EAAE,CAACI,MAAH;AACAJ,QAAAA,EAAE,CAACK,MAAH,CAAUX,KAAK,CAACC,OAAhB;;AAEA,aAAK,IAAIW,CAAC,GAAG,CAAC,IAAd,EAAoBA,CAAC,GAAG,EAAxB,EAA4BA,CAAC,EAA7B,EAAiC;AAC/BN,UAAAA,EAAE,CAACO,OAAH,CACED,CAAC,GAAG,GADN,EAEEN,EAAE,CAACQ,YAAH,GAAkB,CAFpB,EAGEC,IAAI,CAACC,GAAL,CAASvB,KAAT,KAAmBsB,IAAI,CAACC,GAAL,CAASvB,KAAT,IAAkBC,YAArC,CAHF,EAIEqB,IAAI,CAACC,GAAL,CAASvB,KAAT,KAAmBsB,IAAI,CAACC,GAAL,CAASvB,KAAT,IAAkBC,YAArC,CAJF;AAMAY,UAAAA,EAAE,CAACW,YAAH,CAAgB,GAAhB;AACD;AACF,OAhBD;AAiBD;AACF;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEG,KAAK9B,KAAL,CAAWC,SAAX,IAAwB,IAAxB,GACC,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,KAAKJ,KAApB;AAA2B,MAAA,IAAI,EAAE,KAAKC,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAGC,SALJ,CADF;AAUD;;AApE6C;;AAuEhD,eAAeH,IAAf","sourcesContent":["import React, { PureComponent } from \"react\";\nimport { Layout } from \"../../components/Layout/Layout\";\nimport Sketch from \"react-p5\";\n\ninterface TestState {\n  domLoaded: boolean;\n  setup: any;\n  draw: any;\n}\n\nclass Test extends PureComponent<{}, TestState> {\n  constructor(public setup: any, public draw: any, props: any) {\n    super(props);\n\n    this.state = {\n      domLoaded: false,\n      setup: {},\n      draw: {}\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      domLoaded: true\n    });\n\n    if (typeof window !== \"undefined\") {\n      let x = 0;\n      let scale = 50;\n      let initialScale = 1500;\n      let canvasX = window.innerWidth;\n      let canvasY = window.innerHeight;\n\n      let color = {\n        primary: \"rgba(0, 0, 0, .3)\",\n        primaryAlpha: \"rgba(0, 0, 0, 1)\",\n        secondary: \"#000000\",\n        bg: \"#ffffff\",\n        white: \"#ffffff\"\n      };\n\n      this.setup = (p5: any, parent: any) => {\n        // Our Canvas\n        let sketchCanvas = p5.createCanvas(canvasX, canvasY);\n        sketchCanvas.parent(\"sketch\");\n      };\n\n      this.draw = (p5: any) => {\n        scale += 1;\n        x = x * 1.1 + 2;\n\n        p5.noFill();\n        p5.stroke(color.primary);\n\n        for (let i = -1500; i < 10; i++) {\n          p5.ellipse(\n            i * 200,\n            p5.windowHeight / 2,\n            Math.sin(scale) * (Math.sin(scale) * initialScale),\n            Math.sin(scale) * (Math.sin(scale) * initialScale)\n          );\n          p5.strokeWeight(0.5);\n        }\n      };\n    }\n  }\n\n  render() {\n    return (\n      <Layout>\n        <h1>Test Hello </h1>\n        {this.state.domLoaded == true ? (\n          <Sketch setup={this.setup} draw={this.draw} />\n        ) : (\n          \"Loading\"\n        )}\n      </Layout>\n    );\n  }\n}\n\nexport default Test;\n"]},"metadata":{},"sourceType":"module"}