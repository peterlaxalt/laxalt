{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/pflaxalt/Repositories/_pfl/web/components/ThemePicker/ThemePicker.tsx\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      \", \"\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n// Core\nimport React from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { CssUtils } from \"../../constants/styles/CssUtils\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemePickerClassName, ThemePickerStyle } from \"./styles.scss\"; // Begin Types\n// __________________________________________________________________________________________\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemePicker\n * @author Peter Laxalt\n *\n */\nexport var ThemePicker =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(ThemePicker, _React$PureComponent);\n\n  function ThemePicker(props) {\n    var _this;\n\n    _classCallCheck(this, ThemePicker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ThemePicker).call(this, props));\n    _this.state = {\n      availableThemes: [{\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Foreground\n      }, {\n        name: \"lightcyan\",\n        primary: Theme.Color.Galaxy,\n        secondary: Theme.Color.Galaxy,\n        background: \"lightcyan\",\n        foreground: Theme.Color.Galaxy\n      }, {\n        name: \"goldenrod\",\n        primary: Theme.Color.Galaxy,\n        secondary: Theme.Color.Galaxy,\n        background: \"goldenrod\",\n        foreground: Theme.Color.Galaxy\n      }, {\n        name: \"honeydew\",\n        primary: Theme.Color.Galaxy,\n        secondary: Theme.Color.Galaxy,\n        background: \"honeydew\",\n        foreground: Theme.Color.Galaxy\n      }]\n    }; // this.letterCountTimer = this.letterCountTimer.bind(this);\n\n    return _this;\n  }\n\n  _createClass(ThemePicker, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"incrementLetterCount\",\n    value: function incrementLetterCount(id) {// this.setState({\n      //   characters: this.state.characters.map(\n      //     (character: LXLT_DharmaChar, idx: number) => {\n      //       return {\n      //         letter: character.letter,\n      //         count: id == character.idx ? character.count + 1 : character.count,\n      //         idx: idx,\n      //       };\n      //     }\n      //   ),\n      // });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          activeTheme = _this$state.activeTheme,\n          availableThemes = _this$state.availableThemes;\n      var SetGlobalTheme = createGlobalStyle(_templateObject(), activeTheme ? CssUtils.CreateTheme(activeTheme.primary, activeTheme.secondary, activeTheme.background, activeTheme.foreground) : \"\");\n      return __jsx(React.Fragment, null, activeTheme && activeTheme.name !== \"default\" ? __jsx(SetGlobalTheme, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }) : null, __jsx(ThemePickerStyle, {\n        className: \"\".concat(ThemePickerClassName),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, availableThemes ? availableThemes.map(function (themeItem, idx) {\n        return __jsx(\"div\", {\n          className: \"\".concat(ThemePickerClassName, \"__option \").concat(ThemePickerClassName, \"__option--\").concat(themeItem.name),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        });\n      }) : null));\n    }\n  }]);\n\n  return ThemePicker;\n}(React.PureComponent);","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/components/ThemePicker/ThemePicker.tsx"],"names":["React","createGlobalStyle","CssUtils","Theme","ThemePickerClassName","ThemePickerStyle","ThemePicker","props","state","availableThemes","name","primary","Color","Primary","secondary","Secondary","background","Background","foreground","Foreground","Galaxy","id","activeTheme","SetGlobalTheme","CreateTheme","map","themeItem","idx","PureComponent"],"mappings":"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","sourcesContent":["// Core\nimport React from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { CssUtils } from \"../../constants/styles/CssUtils\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemePickerClassName, ThemePickerStyle } from \"./styles.scss\";\n\n// Begin Types\n// __________________________________________________________________________________________\n\ntype LXLT_ThemePicker = {};\n\ntype LXLT_Theme = {\n  name: \"default\" | \"lightcyan\" | \"goldenrod\" | \"honeydew\";\n  primary: string;\n  secondary: string;\n  background: string;\n  foreground: string;\n};\n\ntype LXLT_ThemePickerState = {\n  availableThemes: LXLT_Theme[];\n  activeTheme?: LXLT_Theme;\n};\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemePicker\n * @author Peter Laxalt\n *\n */\nexport class ThemePicker extends React.PureComponent<\n  LXLT_ThemePicker,\n  LXLT_ThemePickerState\n> {\n  constructor(props: LXLT_ThemePicker) {\n    super(props);\n\n    this.state = {\n      availableThemes: [\n        {\n          name: \"default\",\n          primary: Theme.Color.Primary,\n          secondary: Theme.Color.Secondary,\n          background: Theme.Color.Background,\n          foreground: Theme.Color.Foreground,\n        },\n        {\n          name: \"lightcyan\",\n          primary: Theme.Color.Galaxy,\n          secondary: Theme.Color.Galaxy,\n          background: \"lightcyan\",\n          foreground: Theme.Color.Galaxy,\n        },\n        {\n          name: \"goldenrod\",\n          primary: Theme.Color.Galaxy,\n          secondary: Theme.Color.Galaxy,\n          background: \"goldenrod\",\n          foreground: Theme.Color.Galaxy,\n        },\n        {\n          name: \"honeydew\",\n          primary: Theme.Color.Galaxy,\n          secondary: Theme.Color.Galaxy,\n          background: \"honeydew\",\n          foreground: Theme.Color.Galaxy,\n        },\n      ],\n    };\n\n    // this.letterCountTimer = this.letterCountTimer.bind(this);\n  }\n\n  componentDidMount() {}\n\n  incrementLetterCount(id: number) {\n    // this.setState({\n    //   characters: this.state.characters.map(\n    //     (character: LXLT_DharmaChar, idx: number) => {\n    //       return {\n    //         letter: character.letter,\n    //         count: id == character.idx ? character.count + 1 : character.count,\n    //         idx: idx,\n    //       };\n    //     }\n    //   ),\n    // });\n  }\n\n  render() {\n    let { activeTheme, availableThemes } = this.state;\n\n    const SetGlobalTheme = createGlobalStyle`\n      ${\n        activeTheme\n          ? CssUtils.CreateTheme(\n              activeTheme.primary,\n              activeTheme.secondary,\n              activeTheme.background,\n              activeTheme.foreground\n            )\n          : \"\"\n      }\n    `;\n\n    return (\n      <>\n        {activeTheme && activeTheme.name !== \"default\" ? (\n          <SetGlobalTheme />\n        ) : null}\n        <ThemePickerStyle className={`${ThemePickerClassName}`}>\n          {availableThemes\n            ? availableThemes.map((themeItem: LXLT_Theme, idx: number) => {\n                return (\n                  <div\n                    className={`${ThemePickerClassName}__option ${ThemePickerClassName}__option--${themeItem.name}`}\n                  />\n                );\n              })\n            : null}\n        </ThemePickerStyle>\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}