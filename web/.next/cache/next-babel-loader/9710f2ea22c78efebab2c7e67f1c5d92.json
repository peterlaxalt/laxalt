{"ast":null,"code":"/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n// Begin Component\n// __________________________________________________________________________\nconst Dharma_Canvas = (W, H, ID, BG) => p => {\n  // _________________________________________________\n  // Config\n  // let color = {\n  //   primary: \"black\",\n  //   primaryAlpha: \"black\",\n  //   secondary: \"#000000\",\n  //   bg: \"cyan\",\n  //   white: \"#ffffff\",\n  // };\n  // _________________________________________________\n  // Preload\n  // _________________________________________________\n  // Setup\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H, p.WEBGL);\n    p.noStroke();\n  }; // _________________________________________________\n  // Draw\n\n\n  p.draw = () => {\n    // rect gives us some geometry on the screen\n    p.background(BG);\n    p.fill(255, 255, 255);\n    p.text(\"Testing\", 0, 0);\n    p.fill(255, 255, 255);\n    p.rect(W / 2, H / 2, W, H);\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default Dharma_Canvas;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/dharma.tsx"],"names":["Dharma_Canvas","W","H","ID","BG","p","setup","createCanvas","WEBGL","noStroke","draw","background","fill","text","rect","windowResized","resizeCanvas"],"mappings":"AAAA;;;;;;AASA;AACA;AASA,MAAMA,aAAiC,GAAG,CAACC,CAAD,EAAIC,CAAJ,EAAOC,EAAP,EAAWC,EAAX,KAAmBC,CAAD,IAAW;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACAA,EAAAA,CAAC,CAACC,KAAF,GAAU,MAAM;AACd;AACAD,IAAAA,CAAC,CAACE,YAAF,CAAeN,CAAf,EAAkBC,CAAlB,EAAqBG,CAAC,CAACG,KAAvB;AACAH,IAAAA,CAAC,CAACI,QAAF;AACD,GAJD,CAhBqE,CAsBrE;AACA;;;AACAJ,EAAAA,CAAC,CAACK,IAAF,GAAS,MAAM;AACb;AAEAL,IAAAA,CAAC,CAACM,UAAF,CAAaP,EAAb;AACAC,IAAAA,CAAC,CAACO,IAAF,CAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB;AACAP,IAAAA,CAAC,CAACQ,IAAF,CAAO,SAAP,EAAkB,CAAlB,EAAqB,CAArB;AAEAR,IAAAA,CAAC,CAACO,IAAF,CAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB;AACAP,IAAAA,CAAC,CAACS,IAAF,CAAOb,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAG,CAAlB,EAAqBD,CAArB,EAAwBC,CAAxB;AACD,GATD;;AAWAG,EAAAA,CAAC,CAACU,aAAF,GAAkB,MAAM;AACtBV,IAAAA,CAAC,CAACW,YAAF,CAAef,CAAf,EAAkBC,CAAlB;AACD,GAFD;AAGD,CAtCD;;AAwCA,eAAeF,aAAf","sourcesContent":["/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n\nimport p5 from \"p5\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_Dharma_Canvas = (\n  W: number,\n  H: number,\n  ID: number,\n  BG: string\n) => (p: p5) => void;\n\nconst Dharma_Canvas: LXLT_Dharma_Canvas = (W, H, ID, BG) => (p: p5) => {\n  // _________________________________________________\n  // Config\n  // let color = {\n  //   primary: \"black\",\n  //   primaryAlpha: \"black\",\n  //   secondary: \"#000000\",\n  //   bg: \"cyan\",\n  //   white: \"#ffffff\",\n  // };\n\n  // _________________________________________________\n  // Preload\n\n  // _________________________________________________\n  // Setup\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H, p.WEBGL);\n    p.noStroke();\n  };\n\n  // _________________________________________________\n  // Draw\n  p.draw = () => {\n    // rect gives us some geometry on the screen\n\n    p.background(BG);\n    p.fill(255, 255, 255);\n    p.text(\"Testing\", 0, 0);\n\n    p.fill(255, 255, 255);\n    p.rect(W / 2, H / 2, W, H);\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default Dharma_Canvas;\n"]},"metadata":{},"sourceType":"module"}