{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\n\n/**\n *\n * Sin Wave Cone\n * @author Peter Laxalt\n * @description Simple Sin Wave Cone in p5.js\n *\n */\n// Begin Component\n//////////////////////////////////////////////////////////////////////\nexport default ((W, H) => p => {\n  let x = 0;\n  let scale = 0;\n  let color = {\n    primary: \"black\",\n    primaryAlpha: \"black\",\n    secondary: \"#000000\",\n    bg: \"cyan\",\n    white: \"#ffffff\"\n  };\n\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H, p.WEBGL);\n    p.angleMode(p.RADIANS);\n  };\n\n  p.draw = () => {\n    scale += 1;\n    scale;\n    x = x * 1.1 + 2;\n    p.noFill();\n    p.stroke(color.primary);\n\n    for (let i = 0; i < 20; i++) {\n      p.cone(300, 400);\n      p.stroke(color.primaryAlpha);\n      p.strokeWeight(1);\n      p.translate(_parseInt((Math.sin(p.mouseX * 0.001) * 50).toString()), _parseInt((Math.sin(p.mouseY * 0.001) * 50).toString()), _parseInt((Math.sin(p.mouseX * 0.001) * 50).toString()));\n      p.smooth();\n      p.rotateX(p.frameCount * 0.01);\n      p.rotateY(p.frameCount * 0.01);\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n    p.background(\"yellow\");\n  };\n});","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/d3.tsx"],"names":["W","H","p","x","scale","color","primary","primaryAlpha","secondary","bg","white","setup","createCanvas","WEBGL","angleMode","RADIANS","draw","noFill","stroke","i","cone","strokeWeight","translate","Math","sin","mouseX","toString","mouseY","smooth","rotateX","frameCount","rotateY","windowResized","resizeCanvas","background"],"mappings":";;AAAA;;;;;;;AAQA;AACA;AAEA,gBAAe,CAACA,CAAD,EAASC,CAAT,KAAqBC,CAAD,IAAY;AAC7C,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,KAAK,GAAG,CAAZ;AAEA,MAAIC,KAAK,GAAG;AACVC,IAAAA,OAAO,EAAE,OADC;AAEVC,IAAAA,YAAY,EAAE,OAFJ;AAGVC,IAAAA,SAAS,EAAE,SAHD;AAIVC,IAAAA,EAAE,EAAE,MAJM;AAKVC,IAAAA,KAAK,EAAE;AALG,GAAZ;;AAQAR,EAAAA,CAAC,CAACS,KAAF,GAAU,MAAM;AACd;AACAT,IAAAA,CAAC,CAACU,YAAF,CAAeZ,CAAf,EAAkBC,CAAlB,EAAqBC,CAAC,CAACW,KAAvB;AACAX,IAAAA,CAAC,CAACY,SAAF,CAAYZ,CAAC,CAACa,OAAd;AACD,GAJD;;AAMAb,EAAAA,CAAC,CAACc,IAAF,GAAS,MAAM;AACbZ,IAAAA,KAAK,IAAI,CAAT;AACAA,IAAAA,KAAK;AACLD,IAAAA,CAAC,GAAGA,CAAC,GAAG,GAAJ,GAAU,CAAd;AAEAD,IAAAA,CAAC,CAACe,MAAF;AACAf,IAAAA,CAAC,CAACgB,MAAF,CAASb,KAAK,CAACC,OAAf;;AAEA,SAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BjB,MAAAA,CAAC,CAACkB,IAAF,CAAO,GAAP,EAAY,GAAZ;AACAlB,MAAAA,CAAC,CAACgB,MAAF,CAASb,KAAK,CAACE,YAAf;AACAL,MAAAA,CAAC,CAACmB,YAAF,CAAe,CAAf;AACAnB,MAAAA,CAAC,CAACoB,SAAF,CACE,UAAS,CAACC,IAAI,CAACC,GAAL,CAAStB,CAAC,CAACuB,MAAF,GAAW,KAApB,IAA6B,EAA9B,EAAkCC,QAAlC,EAAT,CADF,EAEE,UAAS,CAACH,IAAI,CAACC,GAAL,CAAStB,CAAC,CAACyB,MAAF,GAAW,KAApB,IAA6B,EAA9B,EAAkCD,QAAlC,EAAT,CAFF,EAGE,UAAS,CAACH,IAAI,CAACC,GAAL,CAAStB,CAAC,CAACuB,MAAF,GAAW,KAApB,IAA6B,EAA9B,EAAkCC,QAAlC,EAAT,CAHF;AAKAxB,MAAAA,CAAC,CAAC0B,MAAF;AACA1B,MAAAA,CAAC,CAAC2B,OAAF,CAAU3B,CAAC,CAAC4B,UAAF,GAAe,IAAzB;AACA5B,MAAAA,CAAC,CAAC6B,OAAF,CAAU7B,CAAC,CAAC4B,UAAF,GAAe,IAAzB;AACD;AACF,GArBD;;AAuBA5B,EAAAA,CAAC,CAAC8B,aAAF,GAAkB,MAAM;AACtB9B,IAAAA,CAAC,CAAC+B,YAAF,CAAejC,CAAf,EAAkBC,CAAlB;AACAC,IAAAA,CAAC,CAACgC,UAAF,CAAa,QAAb;AACD,GAHD;AAID,CA7CD","sourcesContent":["/**\n *\n * Sin Wave Cone\n * @author Peter Laxalt\n * @description Simple Sin Wave Cone in p5.js\n *\n */\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport default (W: any, H: any) => (p: any) => {\n  let x = 0;\n  let scale = 0;\n\n  let color = {\n    primary: \"black\",\n    primaryAlpha: \"black\",\n    secondary: \"#000000\",\n    bg: \"cyan\",\n    white: \"#ffffff\",\n  };\n\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H, p.WEBGL);\n    p.angleMode(p.RADIANS);\n  };\n\n  p.draw = () => {\n    scale += 1;\n    scale;\n    x = x * 1.1 + 2;\n\n    p.noFill();\n    p.stroke(color.primary);\n\n    for (let i = 0; i < 20; i++) {\n      p.cone(300, 400);\n      p.stroke(color.primaryAlpha);\n      p.strokeWeight(1);\n      p.translate(\n        parseInt((Math.sin(p.mouseX * 0.001) * 50).toString()),\n        parseInt((Math.sin(p.mouseY * 0.001) * 50).toString()),\n        parseInt((Math.sin(p.mouseX * 0.001) * 50).toString())\n      );\n      p.smooth();\n      p.rotateX(p.frameCount * 0.01);\n      p.rotateY(p.frameCount * 0.01);\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n    p.background(\"yellow\");\n  };\n};\n"]},"metadata":{},"sourceType":"module"}