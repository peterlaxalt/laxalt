{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/pflaxalt/Repositories/_pfl/web/pages/projects/test.tsx\";\nvar __jsx = React.createElement;\nimport React, { PureComponent } from \"react\";\nimport { Layout } from \"../../components/Layout/Layout\";\nimport Sketch from \"react-p5\";\n\nclass Test extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"x\", 0);\n\n    _defineProperty(this, \"scale\", 50);\n\n    _defineProperty(this, \"initialScale\", 1500);\n\n    _defineProperty(this, \"color\", {\n      primary: \"rgba(0, 0, 0, .3)\",\n      primaryAlpha: \"rgba(0, 0, 0, 1)\",\n      secondary: \"#000000\",\n      bg: \"#ffffff\",\n      white: \"#ffffff\"\n    });\n\n    _defineProperty(this, \"setup\", (p5, parent) => {\n      // Our Canvas\n      p5.createCanvas(p5.windowWidth, p5.windowHeight).parent(parent);\n    });\n\n    _defineProperty(this, \"draw\", p5 => {\n      this.scale += 1;\n      this.x = this.x * 1.1 + 2;\n      p5.noFill();\n      p5.stroke(this.color.primary);\n\n      for (let i = -1500; i < 10; i++) {\n        p5.ellipse(i * 200, p5.windowHeight / 2, Math.sin(this.scale) * (Math.sin(this.scale) * this.initialScale), Math.sin(this.scale) * (Math.sin(this.scale) * this.initialScale));\n        p5.strokeWeight(0.5);\n      }\n    });\n  }\n\n  render() {\n    return __jsx(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Test Hello \"), __jsx(Sketch, {\n      setup: this.setup,\n      draw: this.draw,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Test;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/pages/projects/test.tsx"],"names":["React","PureComponent","Layout","Sketch","Test","primary","primaryAlpha","secondary","bg","white","p5","parent","createCanvas","windowWidth","windowHeight","scale","x","noFill","stroke","color","i","ellipse","Math","sin","initialScale","strokeWeight","render","setup","draw"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,MAAT,QAAuB,gCAAvB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAQA,MAAMC,IAAN,SAAmBH,aAAnB,CAAgD;AAAA;AAAA;;AAAA,+BAC1C,CAD0C;;AAAA,mCAEtC,EAFsC;;AAAA,0CAG/B,IAH+B;;AAAA,mCAOtC;AACNI,MAAAA,OAAO,EAAE,mBADH;AAENC,MAAAA,YAAY,EAAE,kBAFR;AAGNC,MAAAA,SAAS,EAAE,SAHL;AAINC,MAAAA,EAAE,EAAE,SAJE;AAKNC,MAAAA,KAAK,EAAE;AALD,KAPsC;;AAAA,mCAetC,CAACC,EAAD,EAAUC,MAAV,KAA0B;AAChC;AACAD,MAAAA,EAAE,CAACE,YAAH,CAAgBF,EAAE,CAACG,WAAnB,EAAgCH,EAAE,CAACI,YAAnC,EAAiDH,MAAjD,CAAwDA,MAAxD;AACD,KAlB6C;;AAAA,kCAoBtCD,EAAD,IAAa;AAClB,WAAKK,KAAL,IAAc,CAAd;AACA,WAAKC,CAAL,GAAS,KAAKA,CAAL,GAAS,GAAT,GAAe,CAAxB;AAEAN,MAAAA,EAAE,CAACO,MAAH;AACAP,MAAAA,EAAE,CAACQ,MAAH,CAAU,KAAKC,KAAL,CAAWd,OAArB;;AAEA,WAAK,IAAIe,CAAC,GAAG,CAAC,IAAd,EAAoBA,CAAC,GAAG,EAAxB,EAA4BA,CAAC,EAA7B,EAAiC;AAC/BV,QAAAA,EAAE,CAACW,OAAH,CACED,CAAC,GAAG,GADN,EAEEV,EAAE,CAACI,YAAH,GAAkB,CAFpB,EAGEQ,IAAI,CAACC,GAAL,CAAS,KAAKR,KAAd,KAAwBO,IAAI,CAACC,GAAL,CAAS,KAAKR,KAAd,IAAuB,KAAKS,YAApD,CAHF,EAIEF,IAAI,CAACC,GAAL,CAAS,KAAKR,KAAd,KAAwBO,IAAI,CAACC,GAAL,CAAS,KAAKR,KAAd,IAAuB,KAAKS,YAApD,CAJF;AAMAd,QAAAA,EAAE,CAACe,YAAH,CAAgB,GAAhB;AACD;AACF,KApC6C;AAAA;;AAsC9CC,EAAAA,MAAM,GAAG;AACP,WACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,KAAKC,KAApB;AAA2B,MAAA,IAAI,EAAE,KAAKC,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AA7C6C;;AAgDhD,eAAexB,IAAf","sourcesContent":["import React, { PureComponent } from \"react\";\nimport { Layout } from \"../../components/Layout/Layout\";\nimport Sketch from \"react-p5\";\n\ntype TestState = {\n  expanded: boolean;\n  setup: any;\n  draw: any;\n};\n\nclass Test extends PureComponent<{}, TestState> {\n  x = 0;\n  scale = 50;\n  initialScale = 1500;\n  // canvasX = window.innerWidth;\n  // canvasY = window.innerHeight;\n\n  color = {\n    primary: \"rgba(0, 0, 0, .3)\",\n    primaryAlpha: \"rgba(0, 0, 0, 1)\",\n    secondary: \"#000000\",\n    bg: \"#ffffff\",\n    white: \"#ffffff\"\n  };\n\n  setup = (p5: any, parent: any) => {\n    // Our Canvas\n    p5.createCanvas(p5.windowWidth, p5.windowHeight).parent(parent);\n  };\n\n  draw = (p5: any) => {\n    this.scale += 1;\n    this.x = this.x * 1.1 + 2;\n\n    p5.noFill();\n    p5.stroke(this.color.primary);\n\n    for (let i = -1500; i < 10; i++) {\n      p5.ellipse(\n        i * 200,\n        p5.windowHeight / 2,\n        Math.sin(this.scale) * (Math.sin(this.scale) * this.initialScale),\n        Math.sin(this.scale) * (Math.sin(this.scale) * this.initialScale)\n      );\n      p5.strokeWeight(0.5);\n    }\n  };\n\n  render() {\n    return (\n      <Layout>\n        <h1>Test Hello </h1>\n        <Sketch setup={this.setup} draw={this.draw} />\n      </Layout>\n    );\n  }\n}\n\nexport default Test;\n"]},"metadata":{},"sourceType":"module"}