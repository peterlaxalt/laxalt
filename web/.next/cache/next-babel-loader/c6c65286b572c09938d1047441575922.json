{"ast":null,"code":"/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n// Begin Component\n// __________________________________________________________________________\nvar P5CanvasDisplay = function P5CanvasDisplay(W, H, ID, CanvasTheme) {\n  return function (p) {\n    // _________________________________________________\n    // Config\n    // ____________________________\n    // Fonts\n    var dharmaFont; // ____________________________\n    // Typography\n\n    var text = \"LAXALT\";\n    var splitCharacterArray = text.split(\"\");\n    var characters = splitCharacterArray.map(function (character, idx) {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n        copies: 5,\n        copiesLastVisible: 0,\n        copiesAreVisible: false,\n        countIsIncrementing: true,\n        countIsDecrementing: false,\n        copiesAreIncrementing: true,\n        copiesAreDecrementing: false\n      };\n    });\n    var characterCount = splitCharacterArray.length;\n    var characterWidth = W / characterCount;\n    var characterSize = H * 1.25;\n    console.log(characterSize, \"characterSize\"); // ____________________________\n    // Counts\n    // let renderCount: number = 0;\n\n    var previousCountUpdateTime = 0;\n    var previousCopyUpdateTime = 0; // ____________________________\n    // Strokes\n\n    var strokeWidth = 4;\n    var strokeOffset = strokeWidth * 1.5; // ____________________________\n    // Limits\n\n    var maxCount = 3;\n    var minCount = 1;\n    var maxCopies = 12;\n    var minCopies = 1;\n    var frameRate = 10; // ____________________________\n    // Translation\n    // let previousVerticalTranslation: number = H / 2.25;\n\n    var verticalTranslationWhitespaceCompensation = 2.25;\n\n    var previousHorizontalTranslation = function previousHorizontalTranslation(idx) {\n      return -60 + (characterWidth * idx + characterWidth / 1.5 + strokeOffset);\n    }; // _________________________________________________\n    // Preload\n\n\n    p.preload = function () {\n      dharmaFont = p.loadFont(\"/fonts/dharma/dharma_regular.ttf\");\n    }; // _________________________________________________\n    // Setup\n\n\n    p.setup = function () {\n      // Our Canvas\n      p.createCanvas(W, H);\n    }; // _________________________________________________\n    // Draw\n\n\n    p.draw = function () {\n      p.fill(\"red\");\n      p.ellipse(p.mouseX, p.mouseY, 100, 100);\n    };\n\n    p.windowResized = function () {\n      p.resizeCanvas(W, H);\n    };\n  };\n};\n\nexport default P5CanvasDisplay;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/footer-canvas.tsx"],"names":["P5CanvasDisplay","W","H","ID","CanvasTheme","p","dharmaFont","text","splitCharacterArray","split","characters","map","character","idx","letter","count","copies","copiesLastVisible","copiesAreVisible","countIsIncrementing","countIsDecrementing","copiesAreIncrementing","copiesAreDecrementing","characterCount","length","characterWidth","characterSize","console","log","previousCountUpdateTime","previousCopyUpdateTime","strokeWidth","strokeOffset","maxCount","minCount","maxCopies","minCopies","frameRate","verticalTranslationWhitespaceCompensation","previousHorizontalTranslation","preload","loadFont","setup","createCanvas","draw","fill","ellipse","mouseX","mouseY","windowResized","resizeCanvas"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAgBA,IAAMA,eAAqC,GAAG,SAAxCA,eAAwC,CAC5CC,CAD4C,EAE5CC,CAF4C,EAG5CC,EAH4C,EAI5CC,WAJ4C;AAAA,SAKzC,UAACC,CAAD,EAAW;AACd;AACA;AAEA;AACA;AACA,QAAIC,UAAJ,CANc,CAQd;AACA;;AACA,QAAIC,IAAI,GAAG,QAAX;AAEA,QAAIC,mBAAmB,GAAGD,IAAI,CAACE,KAAL,CAAW,EAAX,CAA1B;AACA,QAAIC,UAA+B,GAAGF,mBAAmB,CAACG,GAApB,CACpC,UAACC,SAAD,EAAoBC,GAApB,EAAoC;AAClC,aAAO;AACLC,QAAAA,MAAM,EAAEF,SADH;AAELG,QAAAA,KAAK,EAAE,CAFF;AAGLF,QAAAA,GAAG,EAAEA,GAHA;AAKLG,QAAAA,MAAM,EAAE,CALH;AAMLC,QAAAA,iBAAiB,EAAE,CANd;AAOLC,QAAAA,gBAAgB,EAAE,KAPb;AASLC,QAAAA,mBAAmB,EAAE,IAThB;AAULC,QAAAA,mBAAmB,EAAE,KAVhB;AAYLC,QAAAA,qBAAqB,EAAE,IAZlB;AAaLC,QAAAA,qBAAqB,EAAE;AAblB,OAAP;AAeD,KAjBmC,CAAtC;AAoBA,QAAIC,cAAsB,GAAGf,mBAAmB,CAACgB,MAAjD;AACA,QAAIC,cAAsB,GAAGxB,CAAC,GAAGsB,cAAjC;AACA,QAAIG,aAAqB,GAAGxB,CAAC,GAAG,IAAhC;AAEAyB,IAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ,EAA2B,eAA3B,EArCc,CAuCd;AACA;AACA;;AACA,QAAIG,uBAA+B,GAAG,CAAtC;AACA,QAAIC,sBAA8B,GAAG,CAArC,CA3Cc,CA6Cd;AACA;;AACA,QAAIC,WAAmB,GAAG,CAA1B;AACA,QAAIC,YAAoB,GAAGD,WAAW,GAAG,GAAzC,CAhDc,CAkDd;AACA;;AACA,QAAIE,QAAQ,GAAG,CAAf;AACA,QAAIC,QAAQ,GAAG,CAAf;AAEA,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIC,SAAS,GAAG,CAAhB;AAEA,QAAIC,SAAS,GAAG,EAAhB,CA1Dc,CA4Dd;AACA;AACA;;AAEA,QAAIC,yCAAiD,GAAG,IAAxD;;AACA,QAAMC,6BAA6B,GAAG,SAAhCA,6BAAgC,CAAC1B,GAAD;AAAA,aACpC,CAAC,EAAD,IAAOY,cAAc,GAAGZ,GAAjB,GAAuBY,cAAc,GAAG,GAAxC,GAA8CO,YAArD,CADoC;AAAA,KAAtC,CAjEc,CAoEd;AACA;;;AACA3B,IAAAA,CAAC,CAACmC,OAAF,GAAY,YAAM;AAChBlC,MAAAA,UAAU,GAAGD,CAAC,CAACoC,QAAF,oCAAb;AACD,KAFD,CAtEc,CA0Ed;AACA;;;AACApC,IAAAA,CAAC,CAACqC,KAAF,GAAU,YAAM;AACd;AACArC,MAAAA,CAAC,CAACsC,YAAF,CAAe1C,CAAf,EAAkBC,CAAlB;AACD,KAHD,CA5Ec,CAiFd;AACA;;;AACAG,IAAAA,CAAC,CAACuC,IAAF,GAAS,YAAM;AACbvC,MAAAA,CAAC,CAACwC,IAAF,CAAO,KAAP;AACAxC,MAAAA,CAAC,CAACyC,OAAF,CAAUzC,CAAC,CAAC0C,MAAZ,EAAoB1C,CAAC,CAAC2C,MAAtB,EAA8B,GAA9B,EAAmC,GAAnC;AACD,KAHD;;AAKA3C,IAAAA,CAAC,CAAC4C,aAAF,GAAkB,YAAM;AACtB5C,MAAAA,CAAC,CAAC6C,YAAF,CAAejD,CAAf,EAAkBC,CAAlB;AACD,KAFD;AAGD,GAhG6C;AAAA,CAA9C;;AAkGA,eAAeF,eAAf","sourcesContent":["/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n\nimport p5, { Font } from \"p5\";\nimport { LXLT_ColorTheme } from \"../../constants/styles/Color\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_P5Canvas = {\n  W: number;\n  H: number;\n  ID: number;\n  CanvasTheme: LXLT_ColorTheme;\n};\n\nexport type LXLT_P5CanvasDisplay = (\n  W: number,\n  H: number,\n  ID: number,\n  CanvasTheme: LXLT_ColorTheme\n) => (p: p5) => void;\n\nconst P5CanvasDisplay: LXLT_P5CanvasDisplay = (\n  W,\n  H,\n  ID,\n  CanvasTheme\n) => (p: p5) => {\n  // _________________________________________________\n  // Config\n\n  // ____________________________\n  // Fonts\n  let dharmaFont: Font;\n\n  // ____________________________\n  // Typography\n  let text = \"LAXALT\";\n\n  let splitCharacterArray = text.split(\"\");\n  let characters: LXLT_P5CanvasChar[] = splitCharacterArray.map(\n    (character: string, idx: number) => {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n\n        copies: 5,\n        copiesLastVisible: 0,\n        copiesAreVisible: false,\n\n        countIsIncrementing: true,\n        countIsDecrementing: false,\n\n        copiesAreIncrementing: true,\n        copiesAreDecrementing: false,\n      };\n    }\n  );\n\n  let characterCount: number = splitCharacterArray.length;\n  let characterWidth: number = W / characterCount;\n  let characterSize: number = H * 1.25;\n\n  console.log(characterSize, \"characterSize\");\n\n  // ____________________________\n  // Counts\n  // let renderCount: number = 0;\n  let previousCountUpdateTime: number = 0;\n  let previousCopyUpdateTime: number = 0;\n\n  // ____________________________\n  // Strokes\n  let strokeWidth: number = 4;\n  let strokeOffset: number = strokeWidth * 1.5;\n\n  // ____________________________\n  // Limits\n  let maxCount = 3;\n  let minCount = 1;\n\n  let maxCopies = 12;\n  let minCopies = 1;\n\n  let frameRate = 10;\n\n  // ____________________________\n  // Translation\n  // let previousVerticalTranslation: number = H / 2.25;\n\n  let verticalTranslationWhitespaceCompensation: number = 2.25;\n  const previousHorizontalTranslation = (idx: number) =>\n    -60 + (characterWidth * idx + characterWidth / 1.5 + strokeOffset);\n\n  // _________________________________________________\n  // Preload\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  };\n\n  // _________________________________________________\n  // Setup\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H);\n  };\n\n  // _________________________________________________\n  // Draw\n  p.draw = () => {\n    p.fill(\"red\");\n    p.ellipse(p.mouseX, p.mouseY, 100, 100);\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default P5CanvasDisplay;\n"]},"metadata":{},"sourceType":"module"}