{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\nimport { ThreeWaterCanvas } from \"../three/three-water-distort.canvas\"; // Begin Component\n// __________________________________________________________________________\n\nconst DharmaCanvasDisplay = (W, H, ID, DharmaTheme, parentEl) => p => {\n  // _________________________________________________\n  // Config\n  let canvas; // ____________________________\n  // Fonts\n\n  let dharmaFont; // ____________________________\n  // Typography\n\n  let text = \"Ã¼mlaut\";\n  let splitCharacterArray = text.split(\"\");\n  let characters = splitCharacterArray.map((character, idx) => {\n    return {\n      letter: character,\n      count: 1,\n      idx: idx,\n      copies: 5,\n      copiesLastVisible: 0,\n      copiesAreVisible: false,\n      countIsIncrementing: true,\n      countIsDecrementing: false,\n      copiesAreIncrementing: true,\n      copiesAreDecrementing: false\n    };\n  });\n  let characterCount = splitCharacterArray.length;\n  let characterWidth = W / characterCount;\n  let characterSize = H * 1.25;\n  console.log(characterSize, \"characterSize\"); // ____________________________\n  // Counts\n  // let renderCount: number = 0;\n\n  let previousCountUpdateTime = 0;\n  let previousCopyUpdateTime = 0; // ____________________________\n  // Strokes\n\n  let strokeWidth = 4;\n  let strokeOffset = strokeWidth * 1.5; // ____________________________\n  // Limits\n\n  let maxCount = 3;\n  let minCount = 1;\n  let maxCopies = 12;\n  let minCopies = 1;\n  let frameRate = 10; // ____________________________\n  // Translation\n  // let previousVerticalTranslation: number = H / 2.25;\n\n  let verticalTranslationWhitespaceCompensation = 2.25;\n\n  const previousHorizontalTranslation = idx => -60 + (characterWidth * idx + characterWidth / 1.5 + strokeOffset); // _________________________________________________\n  // Preload\n\n\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  }; // _________________________________________________\n  // Setup\n\n\n  p.setup = () => {\n    // Our Canvas\n    canvas = p.createCanvas(W, H);\n    ThreeWaterCanvas(parentEl, canvas.elt, DharmaTheme);\n    p.frameRate(frameRate);\n  }; // _________________________________________________\n  // Update Character\n\n\n  const updateCharacter = (char, idx) => {\n    if (char.count < maxCount && char.countIsIncrementing) {\n      characters[idx] = _objectSpread(_objectSpread({}, char), {}, {\n        count: char.count + 1\n      });\n      previousCountUpdateTime = p.millis();\n      return;\n    } else if (char.count === maxCount) {\n      characters[idx] = _objectSpread(_objectSpread({}, char), {}, {\n        count: char.count - 1,\n        countIsIncrementing: false,\n        countIsDecrementing: true\n      });\n      previousCountUpdateTime = p.millis();\n      return;\n    } else if (char.count > minCount && char.countIsDecrementing) {\n      characters[idx] = _objectSpread(_objectSpread({}, char), {}, {\n        count: char.count - 1,\n        countIsDecrementing: true\n      });\n      previousCountUpdateTime = p.millis();\n      return;\n    } else if (char.count === minCount && char.countIsDecrementing) {\n      characters[idx] = _objectSpread(_objectSpread({}, char), {}, {\n        count: char.count + 1,\n        countIsIncrementing: true,\n        countIsDecrementing: false\n      });\n      previousCountUpdateTime = p.millis();\n      return;\n    }\n\n    return;\n  }; // _________________________________________________\n  // Update Copies\n\n\n  const updateCopies = (char, idx) => {\n    if (char.copies < maxCopies && char.copiesAreIncrementing) {\n      characters[idx] = _objectSpread(_objectSpread({}, char), {}, {\n        copies: char.copies + 1\n      });\n      previousCopyUpdateTime = p.millis();\n      return;\n    } else if (char.copies === maxCopies) {\n      characters[idx] = _objectSpread(_objectSpread({}, char), {}, {\n        copies: char.copies - 1,\n        copiesAreIncrementing: false,\n        copiesAreDecrementing: true\n      });\n      previousCopyUpdateTime = p.millis();\n      return;\n    } else if (char.copies > minCopies && char.copiesAreDecrementing) {\n      characters[idx] = _objectSpread(_objectSpread({}, char), {}, {\n        copies: char.copies - 1,\n        copiesAreDecrementing: true\n      });\n      previousCopyUpdateTime = p.millis();\n      return;\n    } else if (char.copies === minCopies && char.copiesAreDecrementing) {\n      characters[idx] = _objectSpread(_objectSpread({}, char), {}, {\n        copies: char.copies + 1,\n        copiesAreIncrementing: true,\n        copiesAreDecrementing: false\n      });\n      previousCopyUpdateTime = p.millis();\n      return;\n    }\n\n    return;\n  }; // _________________________________________________\n  // Draw\n\n\n  p.draw = () => {\n    p.background(DharmaTheme.background);\n    p.textFont(dharmaFont);\n    p.textSize(characterSize);\n    p.textAlign(p.CENTER, p.CENTER);\n    p.fill(`${DharmaTheme.foreground}`);\n    p.strokeWeight(strokeWidth);\n    p.stroke(DharmaTheme.background);\n\n    if (H && W) {\n      // _________________________________________\n      // Loop through our copies\n      characters.map((char, idx) => {\n        p.scale(1, 1);\n        let randomCharPick = Math.random() <= 0.5;\n\n        if (randomCharPick) {\n          updateCopies(char, idx);\n        }\n\n        if (randomCharPick && p.millis() - previousCountUpdateTime > 3000) {\n          updateCharacter(char, idx);\n        }\n\n        let countArray = Array.from(Array(char.count).keys());\n        countArray = countArray.map(countNumber => {\n          return countNumber + 1;\n        }); // _________________________________________\n        // Duplicate positions\n\n        countArray.map((countNumber, idxx) => {\n          let verticalScale = 1 / (char.count * 0.95);\n          let verticalSkewDivisible = 2.75;\n          let characterSkewDivisible = 1.36;\n          let duplicateVerticalPosition = char.count == 1 ? H / verticalTranslationWhitespaceCompensation : characterSize / verticalSkewDivisible + characterSize / characterSkewDivisible * idxx; // _________________________________________\n          // Make copies\n\n          let copiesArray = Array.from(Array(char.copies).keys()); // let randomCopyPick = Math.random() <= 0.5;\n\n          copiesArray = copiesArray.map(copyNumber => {\n            return copyNumber + 1;\n          }); // let randomCopyPick = Math.random() <= 0.5;\n          // let copyTimer = p.millis() - previousCopiesVisibleTime > 2000;\n\n          previousCopyUpdateTime; // let isFirstCount = true;\n\n          copiesArray.map((copyNumber, idxxx) => {\n            // let centerCoordsX = W / 2;\n            // let centerCoordsY = H / 2;\n            // let horizontalTranslate =\n            //   copyNumber !== 1\n            //     ? (previousHorizontalTranslation(idx) +\n            //         (strokeOffset / (p.mouseX / 100)) * copyNumber)\n            //     : previousHorizontalTranslation(idx) +\n            //       strokeOffset * copyNumber;\n            // let verticalTranslate =\n            //   copyNumber !== 1\n            //     ? (duplicateVerticalPosition - (strokeOffset / (p.mouseX / 100)) * copyNumber)\n            //     : duplicateVerticalPosition - strokeOffset * copyNumber;\n            let horizontalTranslate = previousHorizontalTranslation(idx) + strokeOffset * copyNumber;\n            let verticalTranslate = duplicateVerticalPosition - strokeOffset * copyNumber;\n            p.push();\n            p.scale(1, verticalScale);\n            p.text(char.letter, horizontalTranslate, verticalTranslate);\n            p.pop();\n          });\n        });\n      });\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/dharma-water-distort.canvas.tsx"],"names":["ThreeWaterCanvas","DharmaCanvasDisplay","W","H","ID","DharmaTheme","parentEl","p","canvas","dharmaFont","text","splitCharacterArray","split","characters","map","character","idx","letter","count","copies","copiesLastVisible","copiesAreVisible","countIsIncrementing","countIsDecrementing","copiesAreIncrementing","copiesAreDecrementing","characterCount","length","characterWidth","characterSize","console","log","previousCountUpdateTime","previousCopyUpdateTime","strokeWidth","strokeOffset","maxCount","minCount","maxCopies","minCopies","frameRate","verticalTranslationWhitespaceCompensation","previousHorizontalTranslation","preload","loadFont","setup","createCanvas","elt","updateCharacter","char","millis","updateCopies","draw","background","textFont","textSize","textAlign","CENTER","fill","foreground","strokeWeight","stroke","scale","randomCharPick","Math","random","countArray","Array","from","keys","countNumber","idxx","verticalScale","verticalSkewDivisible","characterSkewDivisible","duplicateVerticalPosition","copiesArray","copyNumber","idxxx","horizontalTranslate","verticalTranslate","push","pop","windowResized","resizeCanvas"],"mappings":"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","sourcesContent":["/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n\nimport p5, { Font } from \"p5\";\nimport { LXLT_ColorTheme } from \"../../constants/styles/Color\";\nimport { ThreeWaterCanvas } from \"../three/three-water-distort.canvas\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_DharmaCanvas = {\n  W: number;\n  H: number;\n  ID: number;\n  BG: LXLT_ColorTheme;\n  parentEl: HTMLDivElement;\n};\n\nexport type LXLT_DharmaCanvasDisplay = (\n  W: number,\n  H: number,\n  ID: number,\n  BG: LXLT_ColorTheme,\n  parentEl: HTMLDivElement\n) => (p: p5) => void;\n\ntype LXLT_DharmaCanvasChar = {\n  letter: string;\n  count: number;\n  idx: number;\n\n  copies: number;\n  copiesLastVisible: number;\n  copiesAreVisible: boolean;\n\n  copiesAreIncrementing: boolean;\n  copiesAreDecrementing: boolean;\n\n  countIsIncrementing: boolean;\n  countIsDecrementing: boolean;\n};\n\nconst DharmaCanvasDisplay: LXLT_DharmaCanvasDisplay = (\n  W,\n  H,\n  ID,\n  DharmaTheme,\n  parentEl\n) => (p: p5) => {\n  // _________________________________________________\n  // Config\n\n  let canvas;\n\n  // ____________________________\n  // Fonts\n  let dharmaFont: Font;\n\n  // ____________________________\n  // Typography\n  let text = \"Ã¼mlaut\";\n\n  let splitCharacterArray = text.split(\"\");\n  let characters: LXLT_DharmaCanvasChar[] = splitCharacterArray.map(\n    (character: string, idx: number) => {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n\n        copies: 5,\n        copiesLastVisible: 0,\n        copiesAreVisible: false,\n\n        countIsIncrementing: true,\n        countIsDecrementing: false,\n\n        copiesAreIncrementing: true,\n        copiesAreDecrementing: false,\n      };\n    }\n  );\n\n  let characterCount: number = splitCharacterArray.length;\n  let characterWidth: number = W / characterCount;\n  let characterSize: number = H * 1.25;\n\n  console.log(characterSize, \"characterSize\");\n\n  // ____________________________\n  // Counts\n  // let renderCount: number = 0;\n  let previousCountUpdateTime: number = 0;\n  let previousCopyUpdateTime: number = 0;\n\n  // ____________________________\n  // Strokes\n  let strokeWidth: number = 4;\n  let strokeOffset: number = strokeWidth * 1.5;\n\n  // ____________________________\n  // Limits\n  let maxCount = 3;\n  let minCount = 1;\n\n  let maxCopies = 12;\n  let minCopies = 1;\n\n  let frameRate = 10;\n\n  // ____________________________\n  // Translation\n  // let previousVerticalTranslation: number = H / 2.25;\n\n  let verticalTranslationWhitespaceCompensation: number = 2.25;\n  const previousHorizontalTranslation = (idx: number) =>\n    -60 + (characterWidth * idx + characterWidth / 1.5 + strokeOffset);\n\n  // _________________________________________________\n  // Preload\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  };\n\n  // _________________________________________________\n  // Setup\n  p.setup = () => {\n    // Our Canvas\n    canvas = p.createCanvas(W, H);\n\n    ThreeWaterCanvas(parentEl, canvas.elt, DharmaTheme);\n\n    p.frameRate(frameRate);\n  };\n\n  // _________________________________________________\n  // Update Character\n  const updateCharacter = (char: LXLT_DharmaCanvasChar, idx: number) => {\n    if (char.count < maxCount && char.countIsIncrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count + 1,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    } else if (char.count === maxCount) {\n      characters[idx] = {\n        ...char,\n        count: char.count - 1,\n        countIsIncrementing: false,\n        countIsDecrementing: true,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    } else if (char.count > minCount && char.countIsDecrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count - 1,\n        countIsDecrementing: true,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    } else if (char.count === minCount && char.countIsDecrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count + 1,\n        countIsIncrementing: true,\n        countIsDecrementing: false,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    }\n\n    return;\n  };\n\n  // _________________________________________________\n  // Update Copies\n  const updateCopies = (char: LXLT_DharmaCanvasChar, idx: number) => {\n    if (char.copies < maxCopies && char.copiesAreIncrementing) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies + 1,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    } else if (char.copies === maxCopies) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies - 1,\n        copiesAreIncrementing: false,\n        copiesAreDecrementing: true,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    } else if (char.copies > minCopies && char.copiesAreDecrementing) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies - 1,\n        copiesAreDecrementing: true,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    } else if (char.copies === minCopies && char.copiesAreDecrementing) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies + 1,\n        copiesAreIncrementing: true,\n        copiesAreDecrementing: false,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    }\n\n    return;\n  };\n\n  // _________________________________________________\n  // Draw\n  p.draw = () => {\n    p.background(DharmaTheme.background);\n\n    p.textFont(dharmaFont);\n\n    p.textSize(characterSize);\n\n    p.textAlign(p.CENTER, p.CENTER);\n\n    p.fill(`${DharmaTheme.foreground}`);\n    p.strokeWeight(strokeWidth);\n    p.stroke(DharmaTheme.background);\n\n    if (H && W) {\n      // _________________________________________\n      // Loop through our copies\n      characters.map((char: LXLT_DharmaCanvasChar, idx: number) => {\n        p.scale(1, 1);\n\n        let randomCharPick = Math.random() <= 0.5;\n\n        if (randomCharPick) {\n          updateCopies(char, idx);\n        }\n\n        if (randomCharPick && p.millis() - previousCountUpdateTime > 3000) {\n          updateCharacter(char, idx);\n        }\n\n        let countArray: number[] = Array.from(Array(char.count).keys());\n\n        countArray = countArray.map((countNumber: number) => {\n          return countNumber + 1;\n        });\n\n        // _________________________________________\n        // Duplicate positions\n        countArray.map((countNumber: number, idxx: number) => {\n          let verticalScale = 1 / (char.count * 0.95);\n\n          let verticalSkewDivisible: number = 2.75;\n          let characterSkewDivisible: number = 1.36;\n\n          let duplicateVerticalPosition: number =\n            char.count == 1\n              ? H / verticalTranslationWhitespaceCompensation\n              : characterSize / verticalSkewDivisible +\n                (characterSize / characterSkewDivisible) * idxx;\n\n          // _________________________________________\n          // Make copies\n          let copiesArray: number[] = Array.from(Array(char.copies).keys());\n          // let randomCopyPick = Math.random() <= 0.5;\n\n          copiesArray = copiesArray.map((copyNumber: number) => {\n            return copyNumber + 1;\n          });\n\n          // let randomCopyPick = Math.random() <= 0.5;\n          // let copyTimer = p.millis() - previousCopiesVisibleTime > 2000;\n          previousCopyUpdateTime;\n\n          // let isFirstCount = true;\n\n          copiesArray.map((copyNumber: number, idxxx: number) => {\n            // let centerCoordsX = W / 2;\n            // let centerCoordsY = H / 2;\n\n            // let horizontalTranslate =\n            //   copyNumber !== 1\n            //     ? (previousHorizontalTranslation(idx) +\n            //         (strokeOffset / (p.mouseX / 100)) * copyNumber)\n            //     : previousHorizontalTranslation(idx) +\n            //       strokeOffset * copyNumber;\n\n            // let verticalTranslate =\n            //   copyNumber !== 1\n            //     ? (duplicateVerticalPosition - (strokeOffset / (p.mouseX / 100)) * copyNumber)\n            //     : duplicateVerticalPosition - strokeOffset * copyNumber;\n\n            let horizontalTranslate =\n              previousHorizontalTranslation(idx) + strokeOffset * copyNumber;\n\n            let verticalTranslate =\n              duplicateVerticalPosition - strokeOffset * copyNumber;\n\n            p.push();\n            p.scale(1, verticalScale);\n            p.text(char.letter, horizontalTranslate, verticalTranslate);\n            p.pop();\n          });\n        });\n      });\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;\n"]},"metadata":{},"sourceType":"module"}