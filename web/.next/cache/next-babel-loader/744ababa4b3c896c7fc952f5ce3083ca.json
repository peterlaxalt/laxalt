{"ast":null,"code":"import _classCallCheck from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\n/**\n *\n * * @see https://tympanus.net/codrops/2019/10/08/creating-a-water-like-distortion-effect-with-three-js/\n *\n */\n// ____________________________________________________________________________________\nimport * as THREE from \"three\";\n\n/**\n *\n * @name Easings\n * @see https://tympanus.net/codrops/2019/10/08/creating-a-water-like-distortion-effect-with-three-js/\n *\n */\nvar easeOutSine = function easeOutSine(t, b, c, d) {\n  return c * Math.sin(t / d * (Math.PI / 2)) + b;\n};\n\nvar easeOutQuad = function easeOutQuad(t, b, c, d) {\n  t /= d;\n  return -c * t * (t - 2) + b;\n};\n/**\n *\n * @name TouchTexture\n * @see https://tympanus.net/codrops/2019/10/08/creating-a-water-like-distortion-effect-with-three-js/\n *\n */\n\n\nexport var TouchTexture = /*#__PURE__*/function () {\n  // _________________________________\n  // Types\n  // _________________________________\n  // Constructor\n  function TouchTexture(options) {\n    _classCallCheck(this, TouchTexture);\n\n    _defineProperty(this, \"size\", void 0);\n\n    _defineProperty(this, \"radius\", void 0);\n\n    _defineProperty(this, \"width\", void 0);\n\n    _defineProperty(this, \"height\", void 0);\n\n    _defineProperty(this, \"canvas\", void 0);\n\n    _defineProperty(this, \"ctx\", void 0);\n\n    _defineProperty(this, \"debug\", void 0);\n\n    _defineProperty(this, \"points\", void 0);\n\n    _defineProperty(this, \"maxAge\", void 0);\n\n    _defineProperty(this, \"last\", void 0);\n\n    _defineProperty(this, \"texture\", void 0);\n\n    this.size = 64;\n    this.radius = this.size * 0.1;\n    this.width = this.height = this.size;\n    this.size = 64;\n    this.radius = this.size * 0.1;\n    this.points = [];\n    this.maxAge = 64;\n    this.last = null;\n\n    if (options.debug) {\n      this.width = window.innerWidth;\n      this.height = window.innerHeight;\n      this.radius = this.width * 0.05;\n    }\n\n    this.initTexture();\n    if (options.debug) document.body.append(this.canvas);\n  }\n  /**\n   *\n   * @description Initialize our canvas\n   *\n   */\n\n\n  _createClass(TouchTexture, [{\n    key: \"initTexture\",\n    value: function initTexture() {\n      this.canvas = document.createElement(\"canvas\");\n      this.canvas.id = \"TouchTexture\";\n      this.canvas.width = this.width;\n      this.canvas.height = this.height;\n      this.ctx = this.canvas.getContext(\"2d\");\n      this.clear();\n      this.texture = new THREE.Texture(this.canvas);\n    }\n    /**\n     *\n     * @description Note that addPoint() receives normalized values, from 0 to 1.\n     * If the canvas happens to resize, we can use the normalized points to draw using the correct size.\n     *\n     */\n\n  }, {\n    key: \"addPoint\",\n    value: function addPoint(point) {\n      var force = 0;\n      var vx = 0;\n      var vy = 0;\n      var last = this.last;\n\n      if (last) {\n        var relativeX = point.x - last.x;\n        var relativeY = point.y - last.y; // Distance formula\n\n        var distanceSquared = relativeX * relativeX + relativeY * relativeY;\n        var distance = Math.sqrt(distanceSquared); // Calculate Unit Vector\n\n        vx = relativeX / distance;\n        vy = relativeY / distance;\n        force = Math.min(distanceSquared * 10000, 1);\n      }\n\n      this.last = {\n        x: point.x,\n        y: point.y\n      };\n      this.points.push({\n        x: point.x,\n        y: point.y,\n        age: 0,\n        force: force,\n        vx: vx,\n        vy: vy\n      });\n    }\n    /**\n     *\n     * @description Letâ€™s create drawPoint(point) to start drawing the ripples:\n     * Convert the normalized point coordinates into canvas coordinates. Then, draw a happy little circle.\n     *\n     */\n\n  }, {\n    key: \"drawPoint\",\n    value: function drawPoint(point) {\n      // Convert normalized position into canvas coordinates\n      var pos = {\n        x: point.x * this.width,\n        y: point.y * this.height\n      };\n      var radius = this.radius;\n      this.ctx.beginPath();\n      this.ctx.arc(pos.x, pos.y, radius, 0, Math.PI * 2);\n      this.ctx.fill();\n      var ctx = this.ctx; // Lower the opacity as it gets older\n\n      var intensity = 1;\n\n      if (point.age < this.maxAge * 0.3) {\n        intensity = easeOutSine(point.age / (this.maxAge * 0.3), 0, 1, 1);\n      } else {\n        intensity = easeOutQuad(1 - (point.age - this.maxAge * 0.3) / (this.maxAge * 0.7), 0, 1, 1);\n      }\n\n      intensity *= point.force; // Insert data to color channels\n      // RG = Unit vector\n\n      var red = (point.vx + 1) / 2 * 255;\n      var green = (point.vy + 1) / 2 * 255; // B = Unit vector\n\n      var blue = intensity * 255;\n      var color = \"\".concat(red, \", \").concat(green, \", \").concat(blue);\n      var offset = this.size * 5;\n      this.ctx.beginPath();\n      this.ctx.fillStyle = \"rgba(255,0,0,1)\";\n      this.ctx.arc(pos.x - offset, pos.y - offset, radius, 0, Math.PI * 2);\n      this.ctx.fill();\n      ctx.shadowOffsetX = offset;\n      ctx.shadowOffsetY = offset;\n      ctx.shadowBlur = radius * 1;\n      ctx.shadowColor = \"rgba(\".concat(color, \",\").concat(0.2 * intensity, \")\");\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.ctx.fillStyle = \"black\";\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this = this;\n\n      this.clear();\n      var agePart = 1 / this.maxAge;\n      this.points.forEach(function (point, i) {\n        var slowAsOlder = 1 - point.age / _this.maxAge;\n        var force = point.force * agePart * slowAsOlder;\n        point.x += point.vx * force;\n        point.y += point.vy * force;\n        point.age += 1;\n\n        if (point.age > _this.maxAge) {\n          _this.points.splice(i, 1);\n        }\n      });\n      this.points.forEach(function (point) {\n        _this.drawPoint(point);\n      });\n      this.texture.needsUpdate = true;\n    }\n  }]);\n\n  return TouchTexture;\n}();","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/three/water-distort/TouchTexture.ts"],"names":["THREE","easeOutSine","t","b","c","d","Math","sin","PI","easeOutQuad","TouchTexture","options","size","radius","width","height","points","maxAge","last","debug","window","innerWidth","innerHeight","initTexture","document","body","append","canvas","createElement","id","ctx","getContext","clear","texture","Texture","point","force","vx","vy","relativeX","x","relativeY","y","distanceSquared","distance","sqrt","min","push","age","pos","beginPath","arc","fill","intensity","red","green","blue","color","offset","fillStyle","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","fillRect","agePart","forEach","i","slowAsOlder","splice","drawPoint","needsUpdate"],"mappings":"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","sourcesContent":["/**\n *\n * * @see https://tympanus.net/codrops/2019/10/08/creating-a-water-like-distortion-effect-with-three-js/\n *\n */\n\n// ____________________________________________________________________________________\n\nimport * as THREE from \"three\";\n\nexport type LXLT_TouchTextureOptions = {\n  debug?: boolean;\n};\n\nexport type LXLT_TouchTexturePoint = {\n  x: number;\n  y: number;\n  age?: number;\n  force?: number;\n  vx?: number;\n  vy?: number;\n};\n\n/**\n *\n * @name Easings\n * @see https://tympanus.net/codrops/2019/10/08/creating-a-water-like-distortion-effect-with-three-js/\n *\n */\nconst easeOutSine = (t: number, b: number, c: number, d: number) => {\n  return c * Math.sin((t / d) * (Math.PI / 2)) + b;\n};\n\nconst easeOutQuad = (t: number, b: number, c: number, d: number) => {\n  t /= d;\n  return -c * t * (t - 2) + b;\n};\n\n/**\n *\n * @name TouchTexture\n * @see https://tympanus.net/codrops/2019/10/08/creating-a-water-like-distortion-effect-with-three-js/\n *\n */\n\nexport class TouchTexture {\n  // _________________________________\n  // Types\n  size: number;\n  radius: number;\n  width: number;\n  height: number;\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  debug?: boolean;\n  points: LXLT_TouchTexturePoint[];\n  maxAge: number;\n  last: LXLT_TouchTexturePoint;\n  texture: THREE.Texture;\n\n  // _________________________________\n  // Constructor\n  constructor(options: LXLT_TouchTextureOptions) {\n    this.size = 64;\n    this.radius = this.size * 0.1;\n    this.width = this.height = this.size;\n\n    this.size = 64;\n    this.radius = this.size * 0.1;\n\n    this.points = [];\n    this.maxAge = 64;\n\n    this.last = null;\n\n    if (options.debug) {\n      this.width = window.innerWidth;\n      this.height = window.innerHeight;\n      this.radius = this.width * 0.05;\n    }\n\n    this.initTexture();\n    if (options.debug) document.body.append(this.canvas);\n  }\n\n  /**\n   *\n   * @description Initialize our canvas\n   *\n   */\n  initTexture() {\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.id = \"TouchTexture\";\n    this.canvas.width = this.width;\n    this.canvas.height = this.height;\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.clear();\n\n    this.texture = new THREE.Texture(this.canvas);\n  }\n\n  /**\n   *\n   * @description Note that addPoint() receives normalized values, from 0 to 1.\n   * If the canvas happens to resize, we can use the normalized points to draw using the correct size.\n   *\n   */\n\n  addPoint(point: LXLT_TouchTexturePoint) {\n    let force = 0;\n    let vx = 0;\n    let vy = 0;\n    const last = this.last;\n\n    if (last) {\n      const relativeX = point.x - last.x;\n      const relativeY = point.y - last.y;\n      // Distance formula\n      const distanceSquared = relativeX * relativeX + relativeY * relativeY;\n      const distance = Math.sqrt(distanceSquared);\n      // Calculate Unit Vector\n      vx = relativeX / distance;\n      vy = relativeY / distance;\n\n      force = Math.min(distanceSquared * 10000, 1);\n    }\n\n    this.last = {\n      x: point.x,\n      y: point.y,\n    };\n    this.points.push({ x: point.x, y: point.y, age: 0, force, vx, vy });\n  }\n\n  /**\n   *\n   * @description Letâ€™s create drawPoint(point) to start drawing the ripples:\n   * Convert the normalized point coordinates into canvas coordinates. Then, draw a happy little circle.\n   *\n   */\n  drawPoint(point: LXLT_TouchTexturePoint) {\n    // Convert normalized position into canvas coordinates\n    let pos = {\n      x: point.x * this.width,\n      y: point.y * this.height,\n    };\n    const radius = this.radius;\n\n    this.ctx.beginPath();\n    this.ctx.arc(pos.x, pos.y, radius, 0, Math.PI * 2);\n    this.ctx.fill();\n\n    const ctx = this.ctx;\n    // Lower the opacity as it gets older\n    let intensity = 1;\n    if (point.age < this.maxAge * 0.3) {\n      intensity = easeOutSine(point.age / (this.maxAge * 0.3), 0, 1, 1);\n    } else {\n      intensity = easeOutQuad(\n        1 - (point.age - this.maxAge * 0.3) / (this.maxAge * 0.7),\n        0,\n        1,\n        1\n      );\n    }\n    intensity *= point.force;\n\n    // Insert data to color channels\n    // RG = Unit vector\n    let red = ((point.vx + 1) / 2) * 255;\n    let green = ((point.vy + 1) / 2) * 255;\n\n    // B = Unit vector\n    let blue = intensity * 255;\n    let color = `${red}, ${green}, ${blue}`;\n\n    let offset = this.size * 5;\n\n    this.ctx.beginPath();\n    this.ctx.fillStyle = \"rgba(255,0,0,1)\";\n    this.ctx.arc(pos.x - offset, pos.y - offset, radius, 0, Math.PI * 2);\n    this.ctx.fill();\n\n    ctx.shadowOffsetX = offset;\n    ctx.shadowOffsetY = offset;\n    ctx.shadowBlur = radius * 1;\n    ctx.shadowColor = `rgba(${color},${0.2 * intensity})`;\n\n\n  }\n\n  clear() {\n    this.ctx.fillStyle = \"black\";\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  update() {\n    this.clear();\n\n    let agePart = 1 / this.maxAge;\n\n    this.points.forEach((point, i) => {\n      let slowAsOlder = 1 - point.age / this.maxAge;\n      let force = point.force * agePart * slowAsOlder;\n\n      point.x += point.vx * force;\n      point.y += point.vy * force;\n\n      point.age += 1;\n\n      if (point.age > this.maxAge) {\n        this.points.splice(i, 1);\n      }\n    });\n\n    this.points.forEach((point) => {\n      this.drawPoint(point);\n    });\n\n    this.texture.needsUpdate = true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}