{"ast":null,"code":"var _jsxFileName = \"/Users/pflaxalt/Repositories/_pfl/web/components/_svg/DharmaType/DharmaType.tsx\";\nvar __jsx = React.createElement;\n// Core\nimport React from \"react\";\nimport { DharmaTypeClassName, DharmaTypeStyle } from \"./styles.scss\"; // Begin Types\n// __________________________________________________________________________________________\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name DharmaType\n * @author Peter Laxalt\n *\n */\nexport const DharmaType = ({\n  text\n}) => {\n  let viewBoxHeight = 173.21;\n  let viewBoxWidth = 215.21;\n  let characterArray = text.split(\"\");\n  let characterCount = characterArray.length;\n  let characterWidth = viewBoxWidth / characterCount;\n  console.log(\"characterArray / \", characterArray);\n  console.log(\"characterCount / \", characterCount);\n  return __jsx(DharmaTypeStyle, {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: `0 0 ${viewBoxWidth} ${viewBoxHeight}`,\n    preserveAspectRatio: \"none\",\n    className: `${DharmaTypeClassName}`,\n    style: {\n      [`--${DharmaTypeClassName}-font-size`]: `${viewBoxHeight}px`\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, __jsx(\"g\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, characterArray.map((char, idx) => {\n    return __jsx(\"g\", {\n      className: `${DharmaTypeClassName}__character-wrapper`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, __jsx(\"text\", {\n      className: `${DharmaTypeClassName}__character`,\n      transform: `translate(${characterWidth * idx} 170.53) scale(1.13, 1.38)`,\n      style: {\n        [`--${DharmaTypeClassName}-key`]: idx\n      },\n      key: idx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, __jsx(\"tspan\", {\n      className: `${DharmaTypeClassName}__letter`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, char)));\n  })));\n};\n{\n  /* <text\n  className={`${DharmaTypeClassName}__text`}\n  transform=\"translate(0 170.53) scale(1.15, 1.39)\"\n  >\n  {characterArray.map((char: string, idx: number) => {\n    return (\n      <span\n        key={idx}\n        className={`${DharmaTypeClassName}__text__char`}\n        style={{\n          [`--${DharmaTypeClassName}-key` as any]: idx,\n        }}\n      >\n        {char}\n      </span>\n    );\n  })}\n  </text> */\n}\n{\n  /* <g>\n          <text\n            className={`${DharmaTypeClassName}__text`}\n            transform=\"translate(0 170.53) scale(1.15, 1.39)\"\n          >\n            {text}\n          </text>\n        </g> */\n}","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/components/_svg/DharmaType/DharmaType.tsx"],"names":["React","DharmaTypeClassName","DharmaTypeStyle","DharmaType","text","viewBoxHeight","viewBoxWidth","characterArray","split","characterCount","length","characterWidth","console","log","map","char","idx"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,EAA8BC,eAA9B,QAAqD,eAArD,C,CAEA;AACA;;AAMA;AACA;;AAEA;;;;;AAKA,OAAO,MAAMC,UAAoD,GAAG,CAAC;AACnEC,EAAAA;AADmE,CAAD,KAE9D;AACJ,MAAIC,aAAa,GAAG,MAApB;AACA,MAAIC,YAAY,GAAG,MAAnB;AAEA,MAAIC,cAAc,GAAGH,IAAI,CAACI,KAAL,CAAW,EAAX,CAArB;AACA,MAAIC,cAAc,GAAGF,cAAc,CAACG,MAApC;AACA,MAAIC,cAAc,GAAGL,YAAY,GAAGG,cAApC;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCN,cAAjC;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCJ,cAAjC;AAEA,SACE,MAAC,eAAD;AACE,IAAA,KAAK,EAAC,4BADR;AAEE,IAAA,OAAO,EAAG,OAAMH,YAAa,IAAGD,aAAc,EAFhD;AAGE,IAAA,mBAAmB,EAAC,MAHtB;AAIE,IAAA,SAAS,EAAG,GAAEJ,mBAAoB,EAJpC;AAKE,IAAA,KAAK,EAAE;AACL,OAAE,KAAIA,mBAAoB,YAA1B,GAAgD,GAAEI,aAAc;AAD3D,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,cAAc,CAACO,GAAf,CAAmB,CAACC,IAAD,EAAeC,GAAf,KAA+B;AACjD,WACE;AAAG,MAAA,SAAS,EAAG,GAAEf,mBAAoB,qBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,SAAS,EAAG,GAAEA,mBAAoB,aADpC;AAEE,MAAA,SAAS,EAAG,aACVU,cAAc,GAAGK,GAClB,4BAJH;AAKE,MAAA,KAAK,EAAE;AACL,SAAE,KAAIf,mBAAoB,MAA1B,GAAyCe;AADpC,OALT;AAQE,MAAA,GAAG,EAAEA,GARP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAUE;AAAO,MAAA,SAAS,EAAG,GAAEf,mBAAoB,UAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGc,IADH,CAVF,CADF,CADF;AAkBD,GAnBA,CADH,CATF,CADF;AAkCD,CA/CM;AAiDP;AACE;;;;;;;;;;;;;;;;;;AAkBD;AAED;AACE;;;;;;;;AAQD","sourcesContent":["// Core\nimport React from \"react\";\nimport { DharmaTypeClassName, DharmaTypeStyle } from \"./styles.scss\";\n\n// Begin Types\n// __________________________________________________________________________________________\n\ntype LXLT_DharmaType = {\n  text: string;\n};\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name DharmaType\n * @author Peter Laxalt\n *\n */\nexport const DharmaType: React.FunctionComponent<LXLT_DharmaType> = ({\n  text,\n}) => {\n  let viewBoxHeight = 173.21;\n  let viewBoxWidth = 215.21;\n\n  let characterArray = text.split(\"\");\n  let characterCount = characterArray.length;\n  let characterWidth = viewBoxWidth / characterCount;\n\n  console.log(\"characterArray / \", characterArray);\n  console.log(\"characterCount / \", characterCount);\n\n  return (\n    <DharmaTypeStyle\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox={`0 0 ${viewBoxWidth} ${viewBoxHeight}`}\n      preserveAspectRatio=\"none\"\n      className={`${DharmaTypeClassName}`}\n      style={{\n        [`--${DharmaTypeClassName}-font-size` as any]: `${viewBoxHeight}px`,\n      }}\n    >\n      <g>\n        {characterArray.map((char: string, idx: number) => {\n          return (\n            <g className={`${DharmaTypeClassName}__character-wrapper`}>\n              <text\n                className={`${DharmaTypeClassName}__character`}\n                transform={`translate(${\n                  characterWidth * idx\n                } 170.53) scale(1.13, 1.38)`}\n                style={{\n                  [`--${DharmaTypeClassName}-key` as any]: idx,\n                }}\n                key={idx}\n              >\n                <tspan className={`${DharmaTypeClassName}__letter`}>\n                  {char}\n                </tspan>\n              </text>\n            </g>\n          );\n        })}\n      </g>\n    </DharmaTypeStyle>\n  );\n};\n\n{\n  /* <text\n  className={`${DharmaTypeClassName}__text`}\n  transform=\"translate(0 170.53) scale(1.15, 1.39)\"\n>\n  {characterArray.map((char: string, idx: number) => {\n    return (\n      <span\n        key={idx}\n        className={`${DharmaTypeClassName}__text__char`}\n        style={{\n          [`--${DharmaTypeClassName}-key` as any]: idx,\n        }}\n      >\n        {char}\n      </span>\n    );\n  })}\n</text> */\n}\n\n{\n  /* <g>\n          <text\n            className={`${DharmaTypeClassName}__text`}\n            transform=\"translate(0 170.53) scale(1.15, 1.39)\"\n          >\n            {text}\n          </text>\n        </g> */\n}\n"]},"metadata":{},"sourceType":"module"}