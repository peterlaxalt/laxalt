{"ast":null,"code":"import * as THREE from \"three\";\nimport { __DEBUG__ } from \"../../constants/site/Settings\";\nexport const ThreeCanvas = (container, CanvasElement, CanvasTheme) => {\n  __DEBUG__ && console.log(\"ðŸ¤™ Three.js Canvas received:\", CanvasElement);\n  let camera, scene, renderer, mesh, material; // const drawStartPos = new THREE.Vector2();\n\n  init();\n  setupCanvasDrawing();\n  animate();\n\n  function init() {\n    camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 2000);\n    camera.position.z = 500;\n    scene = new THREE.Scene();\n    material = new THREE.MeshBasicMaterial();\n    mesh = new THREE.Mesh(new THREE.BoxBufferGeometry(200, 200, 200), material);\n    scene.add(mesh);\n    renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    window.addEventListener(\"resize\", onWindowResize, false);\n  } // Sets up the drawing canvas and adds it as the material map\n\n\n  function setupCanvasDrawing() {\n    // get canvas and context\n    const drawingCanvas = CanvasElement; // const drawingContext = drawingCanvas.getContext(\"2d\");\n    // // draw white background\n    // drawingContext.fillStyle = \"#FFFFFF\";\n    // drawingContext.fillRect(0, 0, 128, 128);\n    // set canvas as material.map (this could be done to any map, bump, displacement etc.)\n\n    material.map = new THREE.CanvasTexture(drawingCanvas);\n    draw();\n  }\n\n  function draw() {\n    material.map.needsUpdate = true;\n  }\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  function animate() {\n    requestAnimationFrame(animate);\n    mesh.rotation.x += 0.01;\n    mesh.rotation.y += 0.01;\n    renderer.render(scene, camera);\n  }\n};","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/three/with-canvas-as-texture.ts"],"names":["THREE","__DEBUG__","ThreeCanvas","container","CanvasElement","CanvasTheme","console","log","camera","scene","renderer","mesh","material","init","setupCanvasDrawing","animate","PerspectiveCamera","window","innerWidth","innerHeight","position","z","Scene","MeshBasicMaterial","Mesh","BoxBufferGeometry","add","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","document","body","appendChild","domElement","addEventListener","onWindowResize","drawingCanvas","map","CanvasTexture","draw","needsUpdate","aspect","updateProjectionMatrix","requestAnimationFrame","rotation","x","y","render"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,+BAA1B;AAYA,OAAO,MAAMC,WAAoC,GAAG,CAClDC,SADkD,EAElDC,aAFkD,EAGlDC,WAHkD,KAI/C;AACHJ,EAAAA,SAAS,IAAIK,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CH,aAA5C,CAAb;AAEA,MAAII,MAAJ,EAAYC,KAAZ,EAAmBC,QAAnB,EAA6BC,IAA7B,EAAmCC,QAAnC,CAHG,CAIH;;AAEAC,EAAAA,IAAI;AACJC,EAAAA,kBAAkB;AAClBC,EAAAA,OAAO;;AAEP,WAASF,IAAT,GAAgB;AACdL,IAAAA,MAAM,GAAG,IAAIR,KAAK,CAACgB,iBAAV,CACP,EADO,EAEPC,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAFpB,EAGP,CAHO,EAIP,IAJO,CAAT;AAMAX,IAAAA,MAAM,CAACY,QAAP,CAAgBC,CAAhB,GAAoB,GAApB;AAEAZ,IAAAA,KAAK,GAAG,IAAIT,KAAK,CAACsB,KAAV,EAAR;AAEAV,IAAAA,QAAQ,GAAG,IAAIZ,KAAK,CAACuB,iBAAV,EAAX;AAEAZ,IAAAA,IAAI,GAAG,IAAIX,KAAK,CAACwB,IAAV,CAAe,IAAIxB,KAAK,CAACyB,iBAAV,CAA4B,GAA5B,EAAiC,GAAjC,EAAsC,GAAtC,CAAf,EAA2Db,QAA3D,CAAP;AACAH,IAAAA,KAAK,CAACiB,GAAN,CAAUf,IAAV;AAEAD,IAAAA,QAAQ,GAAG,IAAIV,KAAK,CAAC2B,aAAV,CAAwB;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAxB,CAAX;AACAlB,IAAAA,QAAQ,CAACmB,aAAT,CAAuBZ,MAAM,CAACa,gBAA9B;AACApB,IAAAA,QAAQ,CAACqB,OAAT,CAAiBd,MAAM,CAACC,UAAxB,EAAoCD,MAAM,CAACE,WAA3C;AACAa,IAAAA,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0BxB,QAAQ,CAACyB,UAAnC;AAEAlB,IAAAA,MAAM,CAACmB,gBAAP,CAAwB,QAAxB,EAAkCC,cAAlC,EAAkD,KAAlD;AACD,GAhCE,CAkCH;;;AAEA,WAASvB,kBAAT,GAA8B;AAC5B;AAEA,UAAMwB,aAAa,GAAGlC,aAAtB,CAH4B,CAI5B;AAEA;AAEA;AACA;AAEA;;AAEAQ,IAAAA,QAAQ,CAAC2B,GAAT,GAAe,IAAIvC,KAAK,CAACwC,aAAV,CAAwBF,aAAxB,CAAf;AAEAG,IAAAA,IAAI;AACL;;AAED,WAASA,IAAT,GAAgB;AACd7B,IAAAA,QAAQ,CAAC2B,GAAT,CAAaG,WAAb,GAA2B,IAA3B;AACD;;AAED,WAASL,cAAT,GAA0B;AACxB7B,IAAAA,MAAM,CAACmC,MAAP,GAAgB1B,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAA3C;AACAX,IAAAA,MAAM,CAACoC,sBAAP;AAEAlC,IAAAA,QAAQ,CAACqB,OAAT,CAAiBd,MAAM,CAACC,UAAxB,EAAoCD,MAAM,CAACE,WAA3C;AACD;;AAED,WAASJ,OAAT,GAAmB;AACjB8B,IAAAA,qBAAqB,CAAC9B,OAAD,CAArB;AAEAJ,IAAAA,IAAI,CAACmC,QAAL,CAAcC,CAAd,IAAmB,IAAnB;AACApC,IAAAA,IAAI,CAACmC,QAAL,CAAcE,CAAd,IAAmB,IAAnB;AAEAtC,IAAAA,QAAQ,CAACuC,MAAT,CAAgBxC,KAAhB,EAAuBD,MAAvB;AACD;AACF,CA7EM","sourcesContent":["import * as THREE from \"three\";\nimport { __DEBUG__ } from \"../../constants/site/Settings\";\nimport { LXLT_ColorTheme } from \"../../constants/styles/Color\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_ThreeCanvasDisplay = (\n  container: HTMLDivElement,\n  CanvasElement: HTMLCanvasElement,\n  CanvasTheme: LXLT_ColorTheme\n) => void;\n\nexport const ThreeCanvas: LXLT_ThreeCanvasDisplay = (\n  container,\n  CanvasElement,\n  CanvasTheme\n) => {\n  __DEBUG__ && console.log(\"ðŸ¤™ Three.js Canvas received:\", CanvasElement);\n\n  let camera, scene, renderer, mesh, material;\n  // const drawStartPos = new THREE.Vector2();\n\n  init();\n  setupCanvasDrawing();\n  animate();\n\n  function init() {\n    camera = new THREE.PerspectiveCamera(\n      50,\n      window.innerWidth / window.innerHeight,\n      1,\n      2000\n    );\n    camera.position.z = 500;\n\n    scene = new THREE.Scene();\n\n    material = new THREE.MeshBasicMaterial();\n\n    mesh = new THREE.Mesh(new THREE.BoxBufferGeometry(200, 200, 200), material);\n    scene.add(mesh);\n\n    renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n\n    window.addEventListener(\"resize\", onWindowResize, false);\n  }\n\n  // Sets up the drawing canvas and adds it as the material map\n\n  function setupCanvasDrawing() {\n    // get canvas and context\n\n    const drawingCanvas = CanvasElement;\n    // const drawingContext = drawingCanvas.getContext(\"2d\");\n\n    // // draw white background\n\n    // drawingContext.fillStyle = \"#FFFFFF\";\n    // drawingContext.fillRect(0, 0, 128, 128);\n\n    // set canvas as material.map (this could be done to any map, bump, displacement etc.)\n\n    material.map = new THREE.CanvasTexture(drawingCanvas);\n\n    draw();\n  }\n\n  function draw() {\n    material.map.needsUpdate = true;\n  }\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  function animate() {\n    requestAnimationFrame(animate);\n\n    mesh.rotation.x += 0.01;\n    mesh.rotation.y += 0.01;\n\n    renderer.render(scene, camera);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}