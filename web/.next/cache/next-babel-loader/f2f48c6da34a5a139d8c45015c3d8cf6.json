{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/pflaxalt/Repositories/_pfl/web/components/_interactive/DharmaCounter/DharmaCounter.tsx\";\nvar __jsx = React.createElement;\n// Core\nimport React from \"react\";\nimport { DharmaTypeClassName, DharmaTypeStyle } from \"../../_svg/DharmaType/styles.scss\"; // Begin Types\n// __________________________________________________________________________________________\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name DharmaCounter\n * @author Peter Laxalt\n *\n */\nexport var DharmaCounter =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(DharmaCounter, _React$PureComponent);\n\n  function DharmaCounter(props) {\n    var _this;\n\n    _classCallCheck(this, DharmaCounter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DharmaCounter).call(this, props));\n    _this.state = {\n      text: \"\",\n      characters: [],\n      viewBoxHeight: 0,\n      viewBoxWidth: 0,\n      characterWidth: 0,\n      characterVerticalTranslation: 0,\n      characterHorizontalScale: 0,\n      characterVerticalScale: 0,\n      isInitialized: false\n    };\n    _this.incrementLetterCount = _this.incrementLetterCount.bind(_assertThisInitialized(_this));\n    _this.letterCountTimer = _this.letterCountTimer.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(DharmaCounter, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.text) {\n        // ____________________________________________\n        // Get text / create array\n        var text = this.props.text;\n        var splitCharacterArray = text.split(\"\");\n        var characterArray = splitCharacterArray.map(function (character, idx) {\n          return {\n            letter: character,\n            count: 1,\n            idx: idx\n          };\n        }); // ____________________________________________\n        // USE THESE TO TWEAK YOUR CHARACTERS TO FIT\n\n        var viewBoxHeight = 100;\n        var viewBoxWidth = 100;\n        var characterCount = splitCharacterArray.length;\n        var characterWidth = viewBoxWidth / characterCount;\n        var characterVerticalTranslation = 0.983; // Multiplied by the viewBoxHeight\n\n        var characterHorizontalScale = 0.75; // Multiplied by the characterWidth\n\n        var characterVerticalScale = 1.38; // Multiplied by the characterWidth\n\n        this.setState({\n          text: text,\n          characters: characterArray,\n          viewBoxHeight: viewBoxHeight,\n          viewBoxWidth: viewBoxWidth,\n          characterWidth: characterWidth,\n          characterHorizontalScale: characterHorizontalScale,\n          characterVerticalScale: characterVerticalScale,\n          characterVerticalTranslation: characterVerticalTranslation,\n          isInitialized: true\n        });\n        this.letterCountTimer();\n      }\n    }\n  }, {\n    key: \"incrementLetterCount\",\n    value: function incrementLetterCount(id) {\n      this.setState({\n        characters: this.state.characters.map(function (character, idx) {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? character.count + 1 : character.count,\n            idx: idx\n          };\n        })\n      });\n      return;\n    }\n  }, {\n    key: \"letterCountTimer\",\n    value: function letterCountTimer() {\n      var _this2 = this;\n\n      function generateRandomInteger(min, max) {\n        return Math.floor(min + Math.random() * (max + 1 - min));\n      }\n\n      window.setInterval(function () {\n        return _this2.incrementLetterCount(generateRandomInteger(0, _this2.state.characters.length));\n      }, 3000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          viewBoxHeight = _this$state.viewBoxHeight,\n          viewBoxWidth = _this$state.viewBoxWidth,\n          characters = _this$state.characters,\n          characterWidth = _this$state.characterWidth,\n          characterHorizontalScale = _this$state.characterHorizontalScale,\n          characterVerticalScale = _this$state.characterVerticalScale,\n          characterVerticalTranslation = _this$state.characterVerticalTranslation;\n      console.log(\"DharmaCounter state:\", this.state);\n      return __jsx(DharmaTypeStyle, {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 \".concat(viewBoxWidth, \" \").concat(viewBoxHeight),\n        preserveAspectRatio: \"none\",\n        className: \"\".concat(DharmaTypeClassName, \" \").concat(DharmaTypeClassName, \"--couter\"),\n        style: _defineProperty({}, \"--\".concat(DharmaTypeClassName, \"-font-size\"), \"\".concat(viewBoxHeight, \"px\")),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, __jsx(\"filter\", {\n        id: \"displacementFilter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, __jsx(\"feTurbulence\", {\n        type: \"turbulence\",\n        baseFrequency: \"0.05\",\n        numOctaves: \"2\",\n        result: \"turbulence\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }), __jsx(\"feDisplacementMap\", {\n        in2: \"turbulence\",\n        \"in\": \"SourceGraphic\",\n        scale: \"2\",\n        xChannelSelector: \"R\",\n        yChannelSelector: \"G\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      })), __jsx(\"g\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, characters.map(function (_char, idx) {\n        var countArray = _Array$from(Array(_char.count).keys());\n\n        return countArray.map(function (duplicate, idxx) {\n          var adjustedDuplicate = _char.count > 1 ? _char.count : duplicate + 1;\n          var adjustedVerticalTranslation = viewBoxHeight / adjustedDuplicate * (idxx + 1) * characterVerticalTranslation;\n          var adjustedVerticalScale = characterVerticalScale / adjustedDuplicate;\n          return __jsx(\"g\", {\n            className: \"\".concat(DharmaTypeClassName, \"__character-wrapper\"),\n            \"data-char-id\": idx,\n            \"data-char-count\": duplicate,\n            key: idxx,\n            onClick: function onClick() {\n              return _this3.incrementLetterCount(idx);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 207\n            },\n            __self: this\n          }, __jsx(\"text\", {\n            className: \"\".concat(DharmaTypeClassName, \"__character\"),\n            transform: \"translate(\".concat(characterWidth * idx, \" \").concat(adjustedVerticalTranslation, \") scale(\").concat(characterHorizontalScale, \", \").concat(adjustedVerticalScale, \")\"),\n            style: _defineProperty({}, \"--\".concat(DharmaTypeClassName, \"-key\"), idx),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 214\n            },\n            __self: this\n          }, __jsx(\"tspan\", {\n            className: \"\".concat(DharmaTypeClassName, \"__letter\"),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 223\n            },\n            __self: this\n          }, _char.letter)));\n        });\n      })));\n    }\n  }]);\n\n  return DharmaCounter;\n}(React.PureComponent);","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/components/_interactive/DharmaCounter/DharmaCounter.tsx"],"names":["React","DharmaTypeClassName","DharmaTypeStyle","DharmaCounter","props","state","text","characters","viewBoxHeight","viewBoxWidth","characterWidth","characterVerticalTranslation","characterHorizontalScale","characterVerticalScale","isInitialized","incrementLetterCount","bind","letterCountTimer","splitCharacterArray","split","characterArray","map","character","idx","letter","count","characterCount","length","setState","id","generateRandomInteger","min","max","Math","floor","random","window","setInterval","console","log","char","countArray","Array","keys","duplicate","idxx","adjustedDuplicate","adjustedVerticalTranslation","adjustedVerticalScale","PureComponent"],"mappings":"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","sourcesContent":["// Core\nimport React from \"react\";\nimport {\n  DharmaTypeClassName,\n  DharmaTypeStyle,\n} from \"../../_svg/DharmaType/styles.scss\";\n\n// Begin Types\n// __________________________________________________________________________________________\n\ntype LXLT_DharmaCounter = {\n  text: string;\n};\n\ntype LXLT_DharmaCounterState = {\n  text: string;\n  characters: LXLT_DharmaChar[];\n\n  viewBoxHeight: number;\n  viewBoxWidth: number;\n\n  characterVerticalTranslation: number;\n  characterHorizontalScale: number;\n  characterVerticalScale: number;\n\n  characterWidth: number;\n\n  isInitialized: boolean;\n};\n\ntype LXLT_DharmaChar = {\n  letter: string;\n  count: number;\n  idx: number;\n};\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name DharmaCounter\n * @author Peter Laxalt\n *\n */\nexport class DharmaCounter extends React.PureComponent<\n  LXLT_DharmaCounter,\n  LXLT_DharmaCounterState\n> {\n  constructor(props: LXLT_DharmaCounter) {\n    super(props);\n\n    this.state = {\n      text: \"\",\n      characters: [],\n\n      viewBoxHeight: 0,\n      viewBoxWidth: 0,\n      characterWidth: 0,\n\n      characterVerticalTranslation: 0,\n      characterHorizontalScale: 0,\n      characterVerticalScale: 0,\n\n      isInitialized: false,\n    };\n\n    this.incrementLetterCount = this.incrementLetterCount.bind(this);\n    this.letterCountTimer = this.letterCountTimer.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.text) {\n      // ____________________________________________\n      // Get text / create array\n      let { text } = this.props;\n\n      let splitCharacterArray = text.split(\"\");\n      let characterArray: LXLT_DharmaChar[] = splitCharacterArray.map(\n        (character: string, idx: number) => {\n          return {\n            letter: character,\n            count: 1,\n            idx: idx,\n          };\n        }\n      );\n\n      // ____________________________________________\n      // USE THESE TO TWEAK YOUR CHARACTERS TO FIT\n      let viewBoxHeight = 100;\n      let viewBoxWidth = 100;\n\n      let characterCount = splitCharacterArray.length;\n      let characterWidth = viewBoxWidth / characterCount;\n\n      let characterVerticalTranslation = 0.983; // Multiplied by the viewBoxHeight\n      let characterHorizontalScale = 0.75; // Multiplied by the characterWidth\n      let characterVerticalScale = 1.38; // Multiplied by the characterWidth\n\n      this.setState({\n        text: text,\n        characters: characterArray,\n\n        viewBoxHeight: viewBoxHeight,\n        viewBoxWidth: viewBoxWidth,\n\n        characterWidth: characterWidth,\n\n        characterHorizontalScale: characterHorizontalScale,\n        characterVerticalScale: characterVerticalScale,\n        characterVerticalTranslation: characterVerticalTranslation,\n\n        isInitialized: true,\n      });\n\n      this.letterCountTimer();\n    }\n  }\n\n  incrementLetterCount(id: number) {\n    this.setState({\n      characters: this.state.characters.map(\n        (character: LXLT_DharmaChar, idx: number) => {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? character.count + 1 : character.count,\n            idx: idx,\n          };\n        }\n      ),\n    });\n\n    return;\n  }\n\n  letterCountTimer() {\n    function generateRandomInteger(min, max) {\n      return Math.floor(min + Math.random() * (max + 1 - min));\n    }\n\n    window.setInterval(\n      () =>\n        this.incrementLetterCount(\n          generateRandomInteger(0, this.state.characters.length)\n        ),\n      3000\n    );\n  }\n\n  render() {\n    let {\n      viewBoxHeight,\n      viewBoxWidth,\n      characters,\n      characterWidth,\n\n      characterHorizontalScale,\n      characterVerticalScale,\n      characterVerticalTranslation,\n    } = this.state;\n\n    console.log(\"DharmaCounter state:\", this.state);\n\n    return (\n      <DharmaTypeStyle\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox={`0 0 ${viewBoxWidth} ${viewBoxHeight}`}\n        preserveAspectRatio=\"none\"\n        className={`${DharmaTypeClassName} ${DharmaTypeClassName}--couter`}\n        style={{\n          [`--${DharmaTypeClassName}-font-size` as any]: `${viewBoxHeight}px`,\n        }}\n      >\n        <filter id=\"displacementFilter\">\n          <feTurbulence\n            type=\"turbulence\"\n            baseFrequency=\"0.05\"\n            numOctaves=\"2\"\n            result=\"turbulence\"\n          />\n          <feDisplacementMap\n            in2=\"turbulence\"\n            in=\"SourceGraphic\"\n            scale=\"2\"\n            xChannelSelector=\"R\"\n            yChannelSelector=\"G\"\n          />\n        </filter>\n\n        <g>\n          {characters.map((char: LXLT_DharmaChar, idx: number) => {\n            let countArray = Array.from(Array(char.count).keys());\n\n            return countArray.map((duplicate: number, idxx: number) => {\n              let adjustedDuplicate =\n                char.count > 1 ? char.count : duplicate + 1;\n\n              let adjustedVerticalTranslation =\n                (viewBoxHeight / adjustedDuplicate) *\n                (idxx + 1) *\n                characterVerticalTranslation;\n\n              let adjustedVerticalScale =\n                characterVerticalScale / adjustedDuplicate;\n\n              return (\n                <g\n                  className={`${DharmaTypeClassName}__character-wrapper`}\n                  data-char-id={idx}\n                  data-char-count={duplicate}\n                  key={idxx}\n                  onClick={() => this.incrementLetterCount(idx)}\n                >\n                  <text\n                    className={`${DharmaTypeClassName}__character`}\n                    transform={`translate(${\n                      characterWidth * idx\n                    } ${adjustedVerticalTranslation}) scale(${characterHorizontalScale}, ${adjustedVerticalScale})`}\n                    style={{\n                      [`--${DharmaTypeClassName}-key` as any]: idx,\n                    }}\n                  >\n                    <tspan className={`${DharmaTypeClassName}__letter`}>\n                      {char.letter}\n                    </tspan>\n                  </text>\n                </g>\n              );\n            });\n          })}\n        </g>\n      </DharmaTypeStyle>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}