{"ast":null,"code":"var _jsxFileName = \"/Users/pflaxalt/Repositories/_pfl/web/pages/projects/test.tsx\";\nvar __jsx = React.createElement;\nimport React, { PureComponent } from \"react\";\nimport { Layout } from \"../../components/Layout/Layout\";\nimport Sketch from \"react-p5\";\n\nclass Test extends PureComponent {\n  componentDidMount() {\n    let x = 0;\n    let scale = 50;\n    let initialScale = 1500;\n    let canvasX = window.innerWidth;\n    let canvasY = window.innerHeight;\n    let color = {\n      primary: \"rgba(0, 0, 0, .3)\",\n      primaryAlpha: \"rgba(0, 0, 0, 1)\",\n      secondary: \"#000000\",\n      bg: \"#ffffff\",\n      white: \"#ffffff\"\n    };\n\n    const setup = (p5, parent) => {\n      // Our Canvas\n      let sketchCanvas = p5.createCanvas(p5.windowWidth, p5.windowHeight);\n      sketchCanvas.parent(\"sketch\");\n    };\n\n    const draw = p5 => {\n      scale += 1;\n      x = x * 1.1 + 2;\n      p5.noFill();\n      p5.stroke(color.primary);\n\n      for (let i = -1500; i < 10; i++) {\n        p5.ellipse(i * 200, p5.windowHeight / 2, Math.sin(scale) * (Math.sin(scale) * initialScale), Math.sin(scale) * (Math.sin(scale) * initialScale));\n        p5.strokeWeight(0.5);\n      }\n    };\n  }\n\n  render() {\n    return __jsx(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Test Hello \"), __jsx(Sketch, {\n      setup: this.setup,\n      draw: this.draw,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Test;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/pages/projects/test.tsx"],"names":["React","PureComponent","Layout","Sketch","Test","componentDidMount","x","scale","initialScale","canvasX","window","innerWidth","canvasY","innerHeight","color","primary","primaryAlpha","secondary","bg","white","setup","p5","parent","sketchCanvas","createCanvas","windowWidth","windowHeight","draw","noFill","stroke","i","ellipse","Math","sin","strokeWeight","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,MAAT,QAAuB,gCAAvB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAQA,MAAMC,IAAN,SAAmBH,aAAnB,CAAgD;AAC9CI,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIC,YAAY,GAAG,IAAnB;AACA,QAAIC,OAAO,GAAGC,MAAM,CAACC,UAArB;AACA,QAAIC,OAAO,GAAGF,MAAM,CAACG,WAArB;AAEA,QAAIC,KAAK,GAAG;AACVC,MAAAA,OAAO,EAAE,mBADC;AAEVC,MAAAA,YAAY,EAAE,kBAFJ;AAGVC,MAAAA,SAAS,EAAE,SAHD;AAIVC,MAAAA,EAAE,EAAE,SAJM;AAKVC,MAAAA,KAAK,EAAE;AALG,KAAZ;;AAQA,UAAMC,KAAK,GAAG,CAACC,EAAD,EAAUC,MAAV,KAA0B;AACtC;AACA,UAAIC,YAAY,GAAGF,EAAE,CAACG,YAAH,CAAgBH,EAAE,CAACI,WAAnB,EAAgCJ,EAAE,CAACK,YAAnC,CAAnB;AACAH,MAAAA,YAAY,CAACD,MAAb,CAAoB,QAApB;AACD,KAJD;;AAMA,UAAMK,IAAI,GAAIN,EAAD,IAAa;AACxBd,MAAAA,KAAK,IAAI,CAAT;AACAD,MAAAA,CAAC,GAAGA,CAAC,GAAG,GAAJ,GAAU,CAAd;AAEAe,MAAAA,EAAE,CAACO,MAAH;AACAP,MAAAA,EAAE,CAACQ,MAAH,CAAUf,KAAK,CAACC,OAAhB;;AAEA,WAAK,IAAIe,CAAC,GAAG,CAAC,IAAd,EAAoBA,CAAC,GAAG,EAAxB,EAA4BA,CAAC,EAA7B,EAAiC;AAC/BT,QAAAA,EAAE,CAACU,OAAH,CACED,CAAC,GAAG,GADN,EAEET,EAAE,CAACK,YAAH,GAAkB,CAFpB,EAGEM,IAAI,CAACC,GAAL,CAAS1B,KAAT,KAAmByB,IAAI,CAACC,GAAL,CAAS1B,KAAT,IAAkBC,YAArC,CAHF,EAIEwB,IAAI,CAACC,GAAL,CAAS1B,KAAT,KAAmByB,IAAI,CAACC,GAAL,CAAS1B,KAAT,IAAkBC,YAArC,CAJF;AAMAa,QAAAA,EAAE,CAACa,YAAH,CAAgB,GAAhB;AACD;AACF,KAhBD;AAiBD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,KAAKf,KAApB;AAA2B,MAAA,IAAI,EAAE,KAAKO,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AAhD6C;;AAmDhD,eAAevB,IAAf","sourcesContent":["import React, { PureComponent } from \"react\";\nimport { Layout } from \"../../components/Layout/Layout\";\nimport Sketch from \"react-p5\";\n\ntype TestState = {\n  expanded: boolean;\n  setup: any;\n  draw: any;\n};\n\nclass Test extends PureComponent<{}, TestState> {\n  componentDidMount() {\n    let x = 0;\n    let scale = 50;\n    let initialScale = 1500;\n    let canvasX = window.innerWidth;\n    let canvasY = window.innerHeight;\n\n    let color = {\n      primary: \"rgba(0, 0, 0, .3)\",\n      primaryAlpha: \"rgba(0, 0, 0, 1)\",\n      secondary: \"#000000\",\n      bg: \"#ffffff\",\n      white: \"#ffffff\"\n    };\n\n    const setup = (p5: any, parent: any) => {\n      // Our Canvas\n      let sketchCanvas = p5.createCanvas(p5.windowWidth, p5.windowHeight);\n      sketchCanvas.parent(\"sketch\");\n    };\n\n    const draw = (p5: any) => {\n      scale += 1;\n      x = x * 1.1 + 2;\n\n      p5.noFill();\n      p5.stroke(color.primary);\n\n      for (let i = -1500; i < 10; i++) {\n        p5.ellipse(\n          i * 200,\n          p5.windowHeight / 2,\n          Math.sin(scale) * (Math.sin(scale) * initialScale),\n          Math.sin(scale) * (Math.sin(scale) * initialScale)\n        );\n        p5.strokeWeight(0.5);\n      }\n    };\n  }\n\n  render() {\n    return (\n      <Layout>\n        <h1>Test Hello </h1>\n        <Sketch setup={this.setup} draw={this.draw} />\n      </Layout>\n    );\n  }\n}\n\nexport default Test;\n"]},"metadata":{},"sourceType":"module"}