{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\n\n/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\nimport { Theme } from \"../../constants/Theme\"; // Begin Component\n// __________________________________________________________________________\n\nconst DharmaCanvasDisplay = (W, H, ID, BG) => p => {\n  // _________________________________________________\n  // Config\n  // ____________________________\n  // Fonts\n  let dharmaFont; // ____________________________\n  // Typography\n\n  let text = \"LAXALT\";\n  let splitCharacterArray = text.split(\"\");\n  let characters = splitCharacterArray.map((character, idx) => {\n    return {\n      letter: character,\n      count: 1,\n      idx: idx,\n      copies: Math.random() <= 0.5\n    };\n  });\n  let characterCount = splitCharacterArray.length;\n  let characterWidth = W / characterCount; // ____________________________\n  // Counts\n\n  let renderCount = 0; // ____________________________\n  // Strokes\n\n  let strokeWidth = 2;\n  let strokeOffset = strokeWidth * 3; // ____________________________\n  // Incrementing\n\n  let maxCopies = 30;\n  let minCopies = 1;\n  let isIncrementing = true;\n  isIncrementing; // ____________________________\n  // Translation\n\n  let previousVerticalTranslation = H / 2.25;\n\n  const previousHorizontalTranslation = idx => characterWidth * idx + characterWidth / 2 + strokeOffset * renderCount; // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n  // let characterVerticalTranslation: number = 0.993; // Multiplied by the viewBoxHeight\n  // let characterHorizontalScale: number = 0.75; // Multiplied by the characterWidth\n  // let characterVerticalScale: number = 1.38; // Multiplied by the characterWidth\n  // _________________________________________________\n  // Preload\n\n\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  }; // _________________________________________________\n  // Setup\n\n\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H); // p.createCanvas(W, H);\n  }; // _________________________________________________\n  // Draw\n\n\n  p.draw = () => {\n    // rect gives us some geometry on the screen\n    p.background(BG);\n    p.textFont(dharmaFont);\n    p.textLeading(0);\n    p.textSize(H * 1.25);\n    p.textAlign(p.CENTER, p.CENTER);\n    p.fill(`${Theme.Color.Galaxy}`);\n    p.strokeWeight(strokeWidth);\n    p.stroke(BG);\n    p.mouseIsPressed ? renderCount = renderCount + 1 : renderCount = renderCount;\n\n    if (H && W) {\n      characters.map((char, idx) => {\n        let countArray = _Array$from(Array(char.count).keys());\n\n        if (p.mouseIsPressed) {\n          if (char.letter == \"L\") {\n            return countArray.map((duplicate, idxx) => {\n              previousVerticalTranslation = H / 2.25 + strokeOffset * renderCount * -1;\n              p.text(char.letter, previousHorizontalTranslation(idx), previousVerticalTranslation);\n            });\n          } else {\n            return null;\n          }\n        } else {\n          return countArray.map((duplicate, idxx) => {\n            p.text(char.letter, previousHorizontalTranslation(idx), previousVerticalTranslation);\n          });\n        }\n      });\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/dharma.tsx"],"names":["Theme","DharmaCanvasDisplay","W","H","ID","BG","p","dharmaFont","text","splitCharacterArray","split","characters","map","character","idx","letter","count","copies","Math","random","characterCount","length","characterWidth","renderCount","strokeWidth","strokeOffset","maxCopies","minCopies","isIncrementing","previousVerticalTranslation","previousHorizontalTranslation","preload","loadFont","setup","createCanvas","draw","background","textFont","textLeading","textSize","textAlign","CENTER","fill","Color","Galaxy","strokeWeight","stroke","mouseIsPressed","char","countArray","Array","keys","duplicate","idxx","windowResized","resizeCanvas"],"mappings":"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","sourcesContent":["/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n\nimport p5, { Font } from \"p5\";\nimport { Theme } from \"../../constants/Theme\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_DharmaCanvas = {\n  W: number;\n  H: number;\n  ID: number;\n  BG: string;\n};\n\nexport type LXLT_DharmaCanvasDisplay = (\n  W: number,\n  H: number,\n  ID: number,\n  BG: string\n) => (p: p5) => void;\n\ntype LXLT_DharmaCanvasChar = {\n  letter: string;\n  count: number;\n  idx: number;\n  copies: boolean;\n};\n\nconst DharmaCanvasDisplay: LXLT_DharmaCanvasDisplay = (W, H, ID, BG) => (\n  p: p5\n) => {\n  // _________________________________________________\n  // Config\n\n  // ____________________________\n  // Fonts\n  let dharmaFont: Font;\n\n  // ____________________________\n  // Typography\n  let text = \"LAXALT\";\n\n  let splitCharacterArray = text.split(\"\");\n  let characters: LXLT_DharmaCanvasChar[] = splitCharacterArray.map(\n    (character: string, idx: number) => {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n        copies: Math.random() <= 0.5,\n      };\n    }\n  );\n\n  let characterCount: number = splitCharacterArray.length;\n  let characterWidth: number = W / characterCount;\n\n  // ____________________________\n  // Counts\n  let renderCount: number = 0;\n\n  // ____________________________\n  // Strokes\n  let strokeWidth: number = 2;\n  let strokeOffset: number = strokeWidth * 3;\n\n  // ____________________________\n  // Incrementing\n  let maxCopies = 30;\n  let minCopies = 1;\n\n  let isIncrementing: boolean = true;\n  isIncrementing;\n\n  // ____________________________\n  // Translation\n  let previousVerticalTranslation: number = H / 2.25;\n  const previousHorizontalTranslation = (idx: number) =>\n    characterWidth * idx + characterWidth / 2 + strokeOffset * renderCount;\n\n  // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n  // let characterVerticalTranslation: number = 0.993; // Multiplied by the viewBoxHeight\n  // let characterHorizontalScale: number = 0.75; // Multiplied by the characterWidth\n  // let characterVerticalScale: number = 1.38; // Multiplied by the characterWidth\n\n  // _________________________________________________\n  // Preload\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  };\n\n  // _________________________________________________\n  // Setup\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H);\n    // p.createCanvas(W, H);\n  };\n\n  // _________________________________________________\n  // Draw\n  p.draw = () => {\n    // rect gives us some geometry on the screen\n\n    p.background(BG);\n\n    p.textFont(dharmaFont);\n\n    p.textLeading(0);\n    p.textSize(H * 1.25);\n\n    p.textAlign(p.CENTER, p.CENTER);\n\n    p.fill(`${Theme.Color.Galaxy}`);\n    p.strokeWeight(strokeWidth);\n    p.stroke(BG);\n\n    p.mouseIsPressed\n      ? (renderCount = renderCount + 1)\n      : (renderCount = renderCount);\n\n    if (H && W) {\n      characters.map((char: LXLT_DharmaCanvasChar, idx: number) => {\n        let countArray: number[] = Array.from(Array(char.count).keys());\n\n        if (p.mouseIsPressed) {\n          if (char.letter == \"L\") {\n            return countArray.map((duplicate: number, idxx: number) => {\n              previousVerticalTranslation =\n                H / 2.25 + strokeOffset * renderCount * -1;\n\n              p.text(\n                char.letter,\n                previousHorizontalTranslation(idx),\n                previousVerticalTranslation\n              );\n            });\n          } else {\n            return null;\n          }\n        } else {\n          return countArray.map((duplicate: number, idxx: number) => {\n            p.text(\n              char.letter,\n              previousHorizontalTranslation(idx),\n              previousVerticalTranslation\n            );\n          });\n        }\n      });\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;\n"]},"metadata":{},"sourceType":"module"}