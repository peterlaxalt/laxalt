{"ast":null,"code":"/**\n * @author alteredq / http://alteredqualia.com/\n */\nimport { Clock, LinearFilter, Mesh, OrthographicCamera, PlaneBufferGeometry, RGBAFormat, Vector2, WebGLRenderTarget } from \"three\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"../postprocessing/ShaderPass.js\";\nimport { MaskPass } from \"../postprocessing/MaskPass.js\";\nimport { ClearMaskPass } from \"../postprocessing/MaskPass.js\";\n\nvar EffectComposer = function EffectComposer(renderer, renderTarget) {\n  this.renderer = renderer;\n\n  if (renderTarget === undefined) {\n    var parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBAFormat,\n      stencilBuffer: false\n    };\n    var size = renderer.getSize(new Vector2());\n    this._pixelRatio = renderer.getPixelRatio();\n    this._width = size.width;\n    this._height = size.height;\n    renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n    renderTarget.texture.name = \"EffectComposer.rt1\";\n  } else {\n    this._pixelRatio = 1;\n    this._width = renderTarget.width;\n    this._height = renderTarget.height;\n  }\n\n  this.renderTarget1 = renderTarget;\n  this.renderTarget2 = renderTarget.clone();\n  this.renderTarget2.texture.name = \"EffectComposer.rt2\";\n  this.writeBuffer = this.renderTarget1;\n  this.readBuffer = this.renderTarget2;\n  this.renderToScreen = true;\n  this.passes = []; // dependencies\n\n  if (CopyShader === undefined) {\n    console.error(\"THREE.EffectComposer relies on CopyShader\");\n  }\n\n  if (ShaderPass === undefined) {\n    console.error(\"THREE.EffectComposer relies on ShaderPass\");\n  }\n\n  this.copyPass = new ShaderPass(CopyShader);\n  this.clock = new Clock();\n};\n\n_c = EffectComposer;\nObject.assign(EffectComposer.prototype, {\n  swapBuffers: function swapBuffers() {\n    var tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  },\n  addPass: function addPass(pass) {\n    this.passes.push(pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  },\n  insertPass: function insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n  },\n  isLastEnabledPass: function isLastEnabledPass(passIndex) {\n    for (var i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n  render: function render(deltaTime) {\n    // deltaTime value is in seconds\n    if (deltaTime === undefined) {\n      deltaTime = this.clock.getDelta();\n    }\n\n    var currentRenderTarget = this.renderer.getRenderTarget();\n    var maskActive = false;\n    var pass,\n        i,\n        il = this.passes.length;\n\n    for (i = 0; i < il; i++) {\n      pass = this.passes[i];\n      if (pass.enabled === false) continue;\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n\n      if (pass.needsSwap) {\n        if (maskActive) {\n          var context = this.renderer.getContext();\n          var stencil = this.renderer.state.buffers.stencil; //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime); //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n        }\n\n        this.swapBuffers();\n      }\n\n      if (MaskPass !== undefined) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n\n    this.renderer.setRenderTarget(currentRenderTarget);\n  },\n  reset: function reset(renderTarget) {\n    if (renderTarget === undefined) {\n      var size = this.renderer.getSize(new Vector2());\n      this._pixelRatio = this.renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  },\n  setSize: function setSize(width, height) {\n    this._width = width;\n    this._height = height;\n    var effectiveWidth = this._width * this._pixelRatio;\n    var effectiveHeight = this._height * this._pixelRatio;\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n\n    for (var i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight);\n    }\n  },\n  setPixelRatio: function setPixelRatio(pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this.setSize(this._width, this._height);\n  }\n});\n\nvar Pass = function Pass() {\n  // if set to true, the pass is processed by the composer\n  this.enabled = true; // if set to true, the pass indicates to swap read and write buffer after rendering\n\n  this.needsSwap = true; // if set to true, the pass clears its buffer before rendering\n\n  this.clear = false; // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\n  this.renderToScreen = false;\n};\n\n_c2 = Pass;\nObject.assign(Pass.prototype, {\n  setSize: function setSize()\n  /* width, height */\n  {},\n  render: function render()\n  /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */\n  {\n    console.error(\"THREE.Pass: .render() must be implemented in derived pass.\");\n  }\n}); // Helper for passes that need to fill the viewport with a single quad.\n\nPass.FullScreenQuad = function () {\n  var camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  var geometry = new PlaneBufferGeometry(2, 2);\n\n  var FullScreenQuad = function FullScreenQuad(material) {\n    this._mesh = new Mesh(geometry, material);\n  };\n\n  Object.defineProperty(FullScreenQuad.prototype, \"material\", {\n    get: function get() {\n      return this._mesh.material;\n    },\n    set: function set(value) {\n      this._mesh.material = value;\n    }\n  });\n  Object.assign(FullScreenQuad.prototype, {\n    render: function render(renderer) {\n      renderer.render(this._mesh, camera);\n    }\n  });\n  return FullScreenQuad;\n}();\n\nexport { EffectComposer, Pass };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EffectComposer\");\n$RefreshReg$(_c2, \"Pass\");","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/three/jsm/postprocessing/EffectComposer.js"],"names":["Clock","LinearFilter","Mesh","OrthographicCamera","PlaneBufferGeometry","RGBAFormat","Vector2","WebGLRenderTarget","CopyShader","ShaderPass","MaskPass","ClearMaskPass","EffectComposer","renderer","renderTarget","undefined","parameters","minFilter","magFilter","format","stencilBuffer","size","getSize","_pixelRatio","getPixelRatio","_width","width","_height","height","texture","name","renderTarget1","renderTarget2","clone","writeBuffer","readBuffer","renderToScreen","passes","console","error","copyPass","clock","Object","assign","prototype","swapBuffers","tmp","addPass","pass","push","setSize","insertPass","index","splice","isLastEnabledPass","passIndex","i","length","enabled","render","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","needsSwap","context","getContext","stencil","state","buffers","setFunc","NOTEQUAL","EQUAL","setRenderTarget","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","Pass","clear","FullScreenQuad","camera","geometry","material","_mesh","defineProperty","get","set","value"],"mappings":"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","sourcesContent":["/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport {\n  Clock,\n  LinearFilter,\n  Mesh,\n  OrthographicCamera,\n  PlaneBufferGeometry,\n  RGBAFormat,\n  Vector2,\n  WebGLRenderTarget,\n} from \"three\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"../postprocessing/ShaderPass.js\";\nimport { MaskPass } from \"../postprocessing/MaskPass.js\";\nimport { ClearMaskPass } from \"../postprocessing/MaskPass.js\";\n\nvar EffectComposer = function (renderer, renderTarget) {\n  this.renderer = renderer;\n\n  if (renderTarget === undefined) {\n    var parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBAFormat,\n      stencilBuffer: false,\n    };\n\n    var size = renderer.getSize(new Vector2());\n    this._pixelRatio = renderer.getPixelRatio();\n    this._width = size.width;\n    this._height = size.height;\n\n    renderTarget = new WebGLRenderTarget(\n      this._width * this._pixelRatio,\n      this._height * this._pixelRatio,\n      parameters\n    );\n    renderTarget.texture.name = \"EffectComposer.rt1\";\n  } else {\n    this._pixelRatio = 1;\n    this._width = renderTarget.width;\n    this._height = renderTarget.height;\n  }\n\n  this.renderTarget1 = renderTarget;\n  this.renderTarget2 = renderTarget.clone();\n  this.renderTarget2.texture.name = \"EffectComposer.rt2\";\n\n  this.writeBuffer = this.renderTarget1;\n  this.readBuffer = this.renderTarget2;\n\n  this.renderToScreen = true;\n\n  this.passes = [];\n\n  // dependencies\n\n  if (CopyShader === undefined) {\n    console.error(\"THREE.EffectComposer relies on CopyShader\");\n  }\n\n  if (ShaderPass === undefined) {\n    console.error(\"THREE.EffectComposer relies on ShaderPass\");\n  }\n\n  this.copyPass = new ShaderPass(CopyShader);\n\n  this.clock = new Clock();\n};\n\nObject.assign(EffectComposer.prototype, {\n  swapBuffers: function () {\n    var tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  },\n\n  addPass: function (pass) {\n    this.passes.push(pass);\n    pass.setSize(\n      this._width * this._pixelRatio,\n      this._height * this._pixelRatio\n    );\n  },\n\n  insertPass: function (pass, index) {\n    this.passes.splice(index, 0, pass);\n  },\n\n  isLastEnabledPass: function (passIndex) {\n    for (var i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  render: function (deltaTime) {\n    // deltaTime value is in seconds\n\n    if (deltaTime === undefined) {\n      deltaTime = this.clock.getDelta();\n    }\n\n    var currentRenderTarget = this.renderer.getRenderTarget();\n\n    var maskActive = false;\n\n    var pass,\n      i,\n      il = this.passes.length;\n\n    for (i = 0; i < il; i++) {\n      pass = this.passes[i];\n\n      if (pass.enabled === false) continue;\n\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n      pass.render(\n        this.renderer,\n        this.writeBuffer,\n        this.readBuffer,\n        deltaTime,\n        maskActive\n      );\n\n      if (pass.needsSwap) {\n        if (maskActive) {\n          var context = this.renderer.getContext();\n          var stencil = this.renderer.state.buffers.stencil;\n\n          //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n          stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n\n          this.copyPass.render(\n            this.renderer,\n            this.writeBuffer,\n            this.readBuffer,\n            deltaTime\n          );\n\n          //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n          stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n        }\n\n        this.swapBuffers();\n      }\n\n      if (MaskPass !== undefined) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n\n    this.renderer.setRenderTarget(currentRenderTarget);\n  },\n\n  reset: function (renderTarget) {\n    if (renderTarget === undefined) {\n      var size = this.renderer.getSize(new Vector2());\n      this._pixelRatio = this.renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(\n        this._width * this._pixelRatio,\n        this._height * this._pixelRatio\n      );\n    }\n\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  },\n\n  setSize: function (width, height) {\n    this._width = width;\n    this._height = height;\n\n    var effectiveWidth = this._width * this._pixelRatio;\n    var effectiveHeight = this._height * this._pixelRatio;\n\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n\n    for (var i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight);\n    }\n  },\n\n  setPixelRatio: function (pixelRatio) {\n    this._pixelRatio = pixelRatio;\n\n    this.setSize(this._width, this._height);\n  },\n});\n\nvar Pass = function () {\n  // if set to true, the pass is processed by the composer\n  this.enabled = true;\n\n  // if set to true, the pass indicates to swap read and write buffer after rendering\n  this.needsSwap = true;\n\n  // if set to true, the pass clears its buffer before rendering\n  this.clear = false;\n\n  // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n  this.renderToScreen = false;\n};\n\nObject.assign(Pass.prototype, {\n  setSize: function (/* width, height */) {},\n\n  render: function (/* renderer, writeBuffer, readBuffer, deltaTime, maskActive */) {\n    console.error(\"THREE.Pass: .render() must be implemented in derived pass.\");\n  },\n});\n\n// Helper for passes that need to fill the viewport with a single quad.\nPass.FullScreenQuad = (function () {\n  var camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  var geometry = new PlaneBufferGeometry(2, 2);\n\n  var FullScreenQuad = function (material) {\n    this._mesh = new Mesh(geometry, material);\n  };\n\n  Object.defineProperty(FullScreenQuad.prototype, \"material\", {\n    get: function () {\n      return this._mesh.material;\n    },\n\n    set: function (value) {\n      this._mesh.material = value;\n    },\n  });\n\n  Object.assign(FullScreenQuad.prototype, {\n    render: function (renderer) {\n      renderer.render(this._mesh, camera);\n    },\n  });\n\n  return FullScreenQuad;\n})();\n\nexport { EffectComposer, Pass };\n"]},"metadata":{},"sourceType":"module"}