{"ast":null,"code":"/**\n *\n * isVisible.ts\n * @description Dead simple function to know if something is in the viewport\n * @example https://stackoverflow.com/a/65008608/13364822\n *\n */\nimport { useEffect, useState } from \"react\";\nexport function isVisible(ref) {\n  const {\n    0: isIntersecting,\n    1: setIntersecting\n  } = useState(false);\n  useEffect(() => {\n    const observer = new IntersectionObserver(([entry]) => setIntersecting(entry.isIntersecting));\n    observer.observe(ref.current); // Remove the observer as soon as the component is unmounted\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n  return isIntersecting;\n}\nexport function percentIsVisible(ref, percentVisible) {\n  const {\n    0: isIntersecting,\n    1: setIntersecting\n  } = useState(false);\n  useEffect(() => {\n    const observer = new IntersectionObserver(([entry]) => {\n      console.log(entry);\n      setIntersecting(entry.isIntersecting);\n    });\n    observer.observe(ref.current); // Remove the observer as soon as the component is unmounted\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n  return isIntersecting;\n}","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/utils/isVisible.ts"],"names":["useEffect","useState","isVisible","ref","isIntersecting","setIntersecting","observer","IntersectionObserver","entry","observe","current","disconnect","percentIsVisible","percentVisible","console","log"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,SAASC,SAAT,CAAmBC,GAAnB,EAA8C;AACnD,QAAM;AAAA,OAACC,cAAD;AAAA,OAAiBC;AAAjB,MAAoCJ,QAAQ,CAAC,KAAD,CAAlD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,QAAQ,GAAG,IAAIC,oBAAJ,CAAyB,CAAC,CAACC,KAAD,CAAD,KACxCH,eAAe,CAACG,KAAK,CAACJ,cAAP,CADA,CAAjB;AAIAE,IAAAA,QAAQ,CAACG,OAAT,CAAiBN,GAAG,CAACO,OAArB,EALc,CAMd;;AACA,WAAO,MAAM;AACXJ,MAAAA,QAAQ,CAACK,UAAT;AACD,KAFD;AAGD,GAVQ,EAUN,EAVM,CAAT;AAYA,SAAOP,cAAP;AACD;AAED,OAAO,SAASQ,gBAAT,CACLT,GADK,EAELU,cAFK,EAGL;AACA,QAAM;AAAA,OAACT,cAAD;AAAA,OAAiBC;AAAjB,MAAoCJ,QAAQ,CAAC,KAAD,CAAlD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,QAAQ,GAAG,IAAIC,oBAAJ,CAAyB,CAAC,CAACC,KAAD,CAAD,KAAa;AACrDM,MAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACAH,MAAAA,eAAe,CAACG,KAAK,CAACJ,cAAP,CAAf;AACD,KAHgB,CAAjB;AAKAE,IAAAA,QAAQ,CAACG,OAAT,CAAiBN,GAAG,CAACO,OAArB,EANc,CAOd;;AACA,WAAO,MAAM;AACXJ,MAAAA,QAAQ,CAACK,UAAT;AACD,KAFD;AAGD,GAXQ,EAWN,EAXM,CAAT;AAaA,SAAOP,cAAP;AACD","sourcesContent":["/**\n *\n * isVisible.ts\n * @description Dead simple function to know if something is in the viewport\n * @example https://stackoverflow.com/a/65008608/13364822\n *\n */\n\nimport { useEffect, useState } from \"react\";\n\nexport function isVisible(ref: React.RefObject<any>) {\n  const [isIntersecting, setIntersecting] = useState(false);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(([entry]) =>\n      setIntersecting(entry.isIntersecting)\n    );\n\n    observer.observe(ref.current);\n    // Remove the observer as soon as the component is unmounted\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  return isIntersecting;\n}\n\nexport function percentIsVisible(\n  ref: React.RefObject<any>,\n  percentVisible: number\n) {\n  const [isIntersecting, setIntersecting] = useState(false);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(([entry]) => {\n      console.log(entry);\n      setIntersecting(entry.isIntersecting);\n    });\n\n    observer.observe(ref.current);\n    // Remove the observer as soon as the component is unmounted\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  return isIntersecting;\n}\n"]},"metadata":{},"sourceType":"module"}