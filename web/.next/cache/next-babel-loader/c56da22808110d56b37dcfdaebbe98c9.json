{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Core\nimport React, { Component } from \"react\"; // Constants\n\n// Styles\nimport { InteractiveEyeballClassName, InteractiveEyeballStyle // InteractiveOverlayNavigationClassName,\n} from \"./styles.scss\"; // Begin Types\n// __________________________________________________________________________________________\n\n/**\n *\n * @name InteractiveEyeball\n * @author Peter Laxalt\n *\n */\nexport class InteractiveEyeball extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"pupilRef\", /*#__PURE__*/React.createRef());\n\n    this.state = {\n      mouseX: 0,\n      mouseY: 0,\n      scrollX: 0,\n      scrollY: 0,\n      pupilWidth: 0,\n      pupilHeight: 0,\n      pupilOffsetX: 0,\n      pupilOffsetY: 0,\n      rotation: 0\n    };\n    this.handleMouseMovement = this.handleMouseMovement.bind(this);\n    this.calculatePupilBoundaries = this.calculatePupilBoundaries.bind(this);\n  }\n  /**\n   *\n   * @name componentDidMount()\n   *\n   */\n\n\n  componentDidMount() {\n    if (\"undefined\" && this.pupilRef) {\n      this.calculatePupilBoundaries();\n      window.addEventListener(\"mousemove\", this.handleMouseMovement);\n    } else {\n      return;\n    }\n  }\n\n  componentWillUnmount() {\n    if (\"undefined\") {\n      window.removeEventListener(\"mousemove\", this.handleMouseMovement);\n    }\n  }\n\n  calculatePupilBoundaries() {\n    if (this.pupilRef.current) {\n      let pupilClientRect = this.pupilRef.current.getBoundingClientRect();\n      this.setState({\n        pupilWidth: pupilClientRect.width,\n        pupilHeight: pupilClientRect.height,\n        pupilOffsetX: pupilClientRect.left,\n        pupilOffsetY: pupilClientRect.top\n      });\n    }\n  }\n\n  handleMouseMovement(e) {\n    if (e) {\n      // let radians = Math.atan2(\n      //   e.screenY - (this.state.pupilOffsetY - this.state.pupilHeight / 2),\n      //   e.screenX - (this.state.pupilOffsetX - this.state.pupilWidth / 2)\n      // );\n      let scrollContainer = this.props.scrollContainer && this.props.scrollContainer.current ? this.props.scrollContainer.current : document.querySelector(\"html\");\n      let radians = Math.atan2(e.clientY + scrollContainer.scrollTop - (this.state.pupilOffsetY - this.state.pupilHeight / 2), e.clientX - (this.state.pupilOffsetX - this.state.pupilWidth / 2));\n      let angle = radians * (180 / Math.PI) - 15;\n      this.setState({\n        rotation: angle\n      });\n    } else {\n      return;\n    }\n  }\n\n  render() {\n    // console.log(this.state);\n    return /*#__PURE__*/_jsxs(InteractiveEyeballStyle, {\n      className: `${InteractiveEyeballClassName} ${this.props.addClass ? this.props.addClass : ''} ${InteractiveEyeballClassName}--is-${this.props.isInverted ? `inverted` : `not-inverted`}`,\n      children: [/*#__PURE__*/_jsx(\"span\", {\n        className: `${InteractiveEyeballClassName}__outline`\n      }), /*#__PURE__*/_jsx(\"span\", {\n        className: `${InteractiveEyeballClassName}__pupil-wrapper`,\n        children: /*#__PURE__*/_jsx(\"span\", {\n          ref: this.pupilRef,\n          className: `${InteractiveEyeballClassName}__pupil`,\n          style: {\n            transform: `rotate(${this.state.rotation}deg)`\n          },\n          children: /*#__PURE__*/_jsx(\"span\", {\n            className: `${InteractiveEyeballClassName}__pupil__el`\n          })\n        })\n      })]\n    });\n  }\n\n} // End Component\n// ______________________________________________________________________________","map":null,"metadata":{},"sourceType":"module"}