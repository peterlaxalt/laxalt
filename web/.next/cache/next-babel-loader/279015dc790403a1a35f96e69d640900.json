{"ast":null,"code":"var _jsxFileName = \"/Users/pflaxalt/Repositories/_pfl/web/components/_interactive/DharmaCounter/DharmaCounter.tsx\";\nvar __jsx = React.createElement;\n// Core\nimport React from \"react\";\nimport { DharmaTypeClassName, DharmaTypeStyle } from \"../../_svg/DharmaType/styles.scss\"; // Begin Types\n// __________________________________________________________________________________________\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name DharmaCounter\n * @author Peter Laxalt\n *\n */\nexport class DharmaCounter extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"\",\n      characters: [],\n      viewBoxHeight: 0,\n      viewBoxWidth: 0,\n      characterWidth: 0,\n      characterVerticalTranslation: 0,\n      characterHorizontalScale: 0,\n      characterVerticalScale: 0,\n      isInitialized: false\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.text) {\n      // ____________________________________________\n      // Get text / create array\n      let {\n        text\n      } = this.props;\n      let splitCharacterArray = text.split(\"\");\n      let characterArray = splitCharacterArray.map((character, idx) => {\n        return {\n          letter: character,\n          count: 1,\n          idx: idx\n        };\n      }); // ____________________________________________\n      // USE THESE TO TWEAK YOUR CHARACTERS TO FIT\n\n      let viewBoxHeight = 100;\n      let viewBoxWidth = 100;\n      let characterCount = splitCharacterArray.length;\n      let characterWidth = viewBoxWidth / characterCount;\n      let characterVerticalTranslation = 0.983; // Multiplied by the viewBoxHeight\n\n      let characterHorizontalScale = 1.13; // Multiplied by the characterWidth\n\n      let characterVerticalScale = 1.38; // Multiplied by the characterWidth\n\n      this.setState({\n        text: text,\n        characters: characterArray,\n        viewBoxHeight: viewBoxHeight,\n        viewBoxWidth: viewBoxWidth,\n        characterWidth: characterWidth,\n        characterHorizontalScale: characterHorizontalScale,\n        characterVerticalScale: characterVerticalScale,\n        characterVerticalTranslation: characterVerticalTranslation,\n        isInitialized: true\n      });\n    }\n  }\n\n  render() {\n    let {\n      viewBoxHeight,\n      viewBoxWidth,\n      characters,\n      characterWidth,\n      characterHorizontalScale,\n      characterVerticalScale,\n      characterVerticalTranslation\n    } = this.state;\n    console.log(\"DharmaCounter state:\", this.state);\n    return __jsx(DharmaTypeStyle, {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      viewBox: `0 0 ${viewBoxWidth} ${viewBoxHeight}`,\n      preserveAspectRatio: \"none\",\n      className: `${DharmaTypeClassName} ${DharmaTypeClassName}--couter`,\n      style: {\n        [`--${DharmaTypeClassName}-font-size`]: `${viewBoxHeight}px`\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, __jsx(\"g\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, characters.map((char, idx) => {\n      return __jsx(\"g\", {\n        className: `${DharmaTypeClassName}__character-wrapper`,\n        key: idx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, __jsx(\"text\", {\n        className: `${DharmaTypeClassName}__character`,\n        transform: `translate(${characterWidth * idx} ${viewBoxHeight * characterVerticalTranslation}) scale(${characterHorizontalScale}, ${characterVerticalScale})`,\n        style: {\n          [`--${DharmaTypeClassName}-key`]: idx\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, __jsx(\"tspan\", {\n        className: `${DharmaTypeClassName}__letter`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, char.letter)));\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/components/_interactive/DharmaCounter/DharmaCounter.tsx"],"names":["React","DharmaTypeClassName","DharmaTypeStyle","DharmaCounter","PureComponent","constructor","props","state","text","characters","viewBoxHeight","viewBoxWidth","characterWidth","characterVerticalTranslation","characterHorizontalScale","characterVerticalScale","isInitialized","componentDidMount","splitCharacterArray","split","characterArray","map","character","idx","letter","count","characterCount","length","setState","render","console","log","char"],"mappings":"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","sourcesContent":["// Core\nimport React from \"react\";\nimport {\n  DharmaTypeClassName,\n  DharmaTypeStyle,\n} from \"../../_svg/DharmaType/styles.scss\";\n\n// Begin Types\n// __________________________________________________________________________________________\n\ntype LXLT_DharmaCounter = {\n  text: string;\n};\n\ntype LXLT_DharmaCounterState = {\n  text: string;\n  characters: LXLT_DharmaChar[];\n\n  viewBoxHeight: number;\n  viewBoxWidth: number;\n\n  characterVerticalTranslation: number;\n  characterHorizontalScale: number;\n  characterVerticalScale: number;\n\n  characterWidth: number;\n\n  isInitialized: boolean;\n};\n\ntype LXLT_DharmaChar = {\n  letter: string;\n  count: number;\n  idx: number;\n};\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name DharmaCounter\n * @author Peter Laxalt\n *\n */\nexport class DharmaCounter extends React.PureComponent<\n  LXLT_DharmaCounter,\n  LXLT_DharmaCounterState\n> {\n  constructor(props: LXLT_DharmaCounter) {\n    super(props);\n\n    this.state = {\n      text: \"\",\n      characters: [],\n\n      viewBoxHeight: 0,\n      viewBoxWidth: 0,\n      characterWidth: 0,\n\n      characterVerticalTranslation: 0,\n      characterHorizontalScale: 0,\n      characterVerticalScale: 0,\n\n      isInitialized: false,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.text) {\n      // ____________________________________________\n      // Get text / create array\n      let { text } = this.props;\n\n      let splitCharacterArray = text.split(\"\");\n      let characterArray: LXLT_DharmaChar[] = splitCharacterArray.map(\n        (character: string, idx: number) => {\n          return {\n            letter: character,\n            count: 1,\n            idx: idx,\n          };\n        }\n      );\n\n      // ____________________________________________\n      // USE THESE TO TWEAK YOUR CHARACTERS TO FIT\n      let viewBoxHeight = 100;\n      let viewBoxWidth = 100;\n\n      let characterCount = splitCharacterArray.length;\n      let characterWidth = viewBoxWidth / characterCount;\n\n      let characterVerticalTranslation = 0.983; // Multiplied by the viewBoxHeight\n      let characterHorizontalScale = 1.13; // Multiplied by the characterWidth\n      let characterVerticalScale = 1.38; // Multiplied by the characterWidth\n\n      this.setState({\n        text: text,\n        characters: characterArray,\n\n        viewBoxHeight: viewBoxHeight,\n        viewBoxWidth: viewBoxWidth,\n\n        characterWidth: characterWidth,\n\n        characterHorizontalScale: characterHorizontalScale,\n        characterVerticalScale: characterVerticalScale,\n        characterVerticalTranslation: characterVerticalTranslation,\n\n        isInitialized: true,\n      });\n    }\n  }\n\n  render() {\n    let {\n      viewBoxHeight,\n      viewBoxWidth,\n      characters,\n      characterWidth,\n\n      characterHorizontalScale,\n      characterVerticalScale,\n      characterVerticalTranslation,\n    } = this.state;\n\n    console.log(\"DharmaCounter state:\", this.state);\n\n    return (\n      <DharmaTypeStyle\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox={`0 0 ${viewBoxWidth} ${viewBoxHeight}`}\n        preserveAspectRatio=\"none\"\n        className={`${DharmaTypeClassName} ${DharmaTypeClassName}--couter`}\n        style={{\n          [`--${DharmaTypeClassName}-font-size` as any]: `${viewBoxHeight}px`,\n        }}\n      >\n        <g>\n          {characters.map((char: LXLT_DharmaChar, idx: number) => {\n            return (\n              <g\n                className={`${DharmaTypeClassName}__character-wrapper`}\n                key={idx}\n              >\n                <text\n                  className={`${DharmaTypeClassName}__character`}\n                  transform={`translate(${characterWidth * idx} ${\n                    viewBoxHeight * characterVerticalTranslation\n                  }) scale(${characterHorizontalScale}, ${characterVerticalScale})`}\n                  style={{\n                    [`--${DharmaTypeClassName}-key` as any]: idx,\n                  }}\n                >\n                  <tspan className={`${DharmaTypeClassName}__letter`}>\n                    {char.letter}\n                  </tspan>\n                </text>\n              </g>\n            );\n          })}\n        </g>\n      </DharmaTypeStyle>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}