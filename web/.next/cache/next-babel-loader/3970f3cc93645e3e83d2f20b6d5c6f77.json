{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/pflaxalt/Repositories/_pfl/web/components/_interactive/DharmaCounter/DharmaCounter.tsx\";\nvar __jsx = React.createElement;\n// Core\nimport React from \"react\";\nimport { DharmaTypeClassName, DharmaTypeStyle } from \"../../_svg/DharmaType/styles.scss\"; // Begin Types\n// __________________________________________________________________________________________\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name DharmaCounter\n * @author Peter Laxalt\n *\n */\nexport var DharmaCounter =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(DharmaCounter, _React$PureComponent);\n\n  function DharmaCounter(props) {\n    var _this;\n\n    _classCallCheck(this, DharmaCounter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DharmaCounter).call(this, props));\n    _this.state = {\n      text: \"\",\n      characters: [],\n      viewBoxHeight: 0,\n      viewBoxWidth: 0,\n      characterWidth: 0,\n      characterVerticalTranslation: 0,\n      characterHorizontalScale: 0,\n      characterVerticalScale: 0,\n      isInitialized: false\n    };\n    _this.incrementLetterCount = _this.incrementLetterCount.bind(_assertThisInitialized(_this));\n    _this.decrementLetterCount = _this.decrementLetterCount.bind(_assertThisInitialized(_this));\n    _this.resetLetterCount = _this.resetLetterCount.bind(_assertThisInitialized(_this));\n    _this.updateLetterCount = _this.updateLetterCount.bind(_assertThisInitialized(_this));\n    _this.letterCountTimer = _this.letterCountTimer.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(DharmaCounter, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.text) {\n        // ____________________________________________\n        // Get text / create array\n        var text = this.props.text;\n        var splitCharacterArray = text.split(\"\");\n        var characterArray = splitCharacterArray.map(function (character, idx) {\n          return {\n            letter: character,\n            count: 1,\n            idx: idx\n          };\n        }); // ____________________________________________\n        // USE THESE TO TWEAK YOUR CHARACTERS TO FIT\n\n        var viewBoxHeight = 100;\n        var viewBoxWidth = 100;\n        var characterCount = splitCharacterArray.length;\n        var characterWidth = viewBoxWidth / characterCount;\n        var characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n\n        var characterHorizontalScale = 0.75; // Multiplied by the characterWidth\n\n        var characterVerticalScale = 1.38; // Multiplied by the characterWidth\n\n        this.setState({\n          text: text,\n          characters: characterArray,\n          viewBoxHeight: viewBoxHeight,\n          viewBoxWidth: viewBoxWidth,\n          characterWidth: characterWidth,\n          characterHorizontalScale: characterHorizontalScale,\n          characterVerticalScale: characterVerticalScale,\n          characterVerticalTranslation: characterVerticalTranslation,\n          isInitialized: true\n        });\n        this.letterCountTimer();\n      }\n    }\n  }, {\n    key: \"incrementLetterCount\",\n    value: function incrementLetterCount(id) {\n      this.setState({\n        characters: this.state.characters.map(function (character, idx) {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? character.count + 1 : character.count,\n            idx: idx\n          };\n        })\n      });\n      return;\n    }\n  }, {\n    key: \"decrementLetterCount\",\n    value: function decrementLetterCount(id) {\n      this.setState({\n        characters: this.state.characters.map(function (character, idx) {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? character.count - 1 : character.count,\n            idx: idx\n          };\n        })\n      });\n      return;\n    }\n  }, {\n    key: \"resetLetterCount\",\n    value: function resetLetterCount(id) {\n      this.setState({\n        characters: this.state.characters.map(function (character, idx) {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? 1 : character.count,\n            idx: idx\n          };\n        })\n      });\n      return;\n    }\n  }, {\n    key: \"updateLetterCount\",\n    value: function updateLetterCount(id) {\n      if (this.state.characters && this.state.characters.length > 0) {\n        var matchedCharacter = this.state.characters.filter(function (character) {\n          return character.idx == id;\n        })[0];\n        var maxCount = 4;\n\n        if (matchedCharacter) {\n          if (matchedCharacter.count === maxCount) {\n            this.resetLetterCount(id);\n          } else {\n            this.incrementLetterCount(id);\n          }\n        } else {\n          return;\n        }\n      } else {\n        return;\n      }\n\n      return;\n    }\n  }, {\n    key: \"letterCountTimer\",\n    value: function letterCountTimer() {\n      var _this2 = this;\n\n      function generateRandomInteger(min, max) {\n        return Math.floor(min + Math.random() * (max + 1 - min));\n      }\n\n      window.setInterval(function () {\n        return _this2.updateLetterCount(generateRandomInteger(0, _this2.state.characters.length));\n      }, 3000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          viewBoxHeight = _this$state.viewBoxHeight,\n          viewBoxWidth = _this$state.viewBoxWidth,\n          characters = _this$state.characters,\n          characterWidth = _this$state.characterWidth,\n          characterHorizontalScale = _this$state.characterHorizontalScale,\n          characterVerticalScale = _this$state.characterVerticalScale,\n          characterVerticalTranslation = _this$state.characterVerticalTranslation; // console.table(\"DharmaCounter state:\", this.state.characters);\n\n      return __jsx(DharmaTypeStyle, {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 \".concat(viewBoxWidth, \" \").concat(viewBoxHeight),\n        preserveAspectRatio: \"none\",\n        className: \"\".concat(DharmaTypeClassName, \" \").concat(DharmaTypeClassName, \"--couter\"),\n        style: _defineProperty({}, \"--\".concat(DharmaTypeClassName, \"-font-size\"), \"\".concat(viewBoxHeight, \"px\")),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, __jsx(\"filter\", {\n        id: \"displacementFilter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, __jsx(\"feTurbulence\", {\n        type: \"turbulence\",\n        baseFrequency: 0.05,\n        numOctaves: 1,\n        result: \"turbulence\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }), __jsx(\"feDisplacementMap\", {\n        in2: \"turbulence\",\n        \"in\": \"SourceGraphic\",\n        scale: 3,\n        xChannelSelector: \"R\",\n        yChannelSelector: \"G\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      })), __jsx(\"g\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, characters.map(function (_char, idx) {\n        var countArray = _Array$from(Array(_char.count).keys());\n\n        return countArray.map(function (duplicate, idxx) {\n          var _ref2;\n\n          var adjustedDuplicate = _char.count > 1 ? _char.count : duplicate + 1;\n          var adjustedVerticalTranslation = viewBoxHeight / adjustedDuplicate * (idxx + 1) * characterVerticalTranslation;\n          var adjustedVerticalScale = characterVerticalScale / adjustedDuplicate;\n          return __jsx(\"g\", {\n            className: \"\".concat(DharmaTypeClassName, \"__character-wrapper\"),\n            \"data-char-id\": idx,\n            \"data-char-count\": duplicate,\n            key: idxx,\n            onClick: function onClick() {\n              return _this3.updateLetterCount(idx);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 267\n            },\n            __self: this\n          }, __jsx(\"filter\", {\n            id: \"displacementFilter__\".concat(idx, \"__\").concat(idxx),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 274\n            },\n            __self: this\n          }, __jsx(\"feTurbulence\", {\n            type: \"turbulence\",\n            baseFrequency: 0.1 * (idxx * 0.05),\n            numOctaves: 1 * (idxx + 20),\n            result: \"turbulence\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 275\n            },\n            __self: this\n          }), __jsx(\"feDisplacementMap\", {\n            in2: \"turbulence\",\n            \"in\": \"SourceGraphic\",\n            scale: 3 - idxx * 0.5,\n            xChannelSelector: \"R\",\n            yChannelSelector: \"G\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 281\n            },\n            __self: this\n          })), __jsx(\"text\", {\n            className: \"\".concat(DharmaTypeClassName, \"__character\"),\n            transform: \"translate(\".concat(characterWidth * idx, \" \").concat(adjustedVerticalTranslation, \") scale(\").concat(characterHorizontalScale, \", \").concat(adjustedVerticalScale, \")\"),\n            style: (_ref2 = {}, _defineProperty(_ref2, \"--\".concat(DharmaTypeClassName, \"-key\"), idx), _defineProperty(_ref2, \"filter\", \"url(#displacementFilter__\".concat(idx, \"__\").concat(idxx, \")\")), _ref2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 290\n            },\n            __self: this\n          }, __jsx(\"tspan\", {\n            className: \"\".concat(DharmaTypeClassName, \"__letter\"),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 300\n            },\n            __self: this\n          }, _char.letter)));\n        });\n      })));\n    }\n  }]);\n\n  return DharmaCounter;\n}(React.PureComponent);","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/components/_interactive/DharmaCounter/DharmaCounter.tsx"],"names":["React","DharmaTypeClassName","DharmaTypeStyle","DharmaCounter","props","state","text","characters","viewBoxHeight","viewBoxWidth","characterWidth","characterVerticalTranslation","characterHorizontalScale","characterVerticalScale","isInitialized","incrementLetterCount","bind","decrementLetterCount","resetLetterCount","updateLetterCount","letterCountTimer","splitCharacterArray","split","characterArray","map","character","idx","letter","count","characterCount","length","setState","id","matchedCharacter","filter","maxCount","generateRandomInteger","min","max","Math","floor","random","window","setInterval","char","countArray","Array","keys","duplicate","idxx","adjustedDuplicate","adjustedVerticalTranslation","adjustedVerticalScale","PureComponent"],"mappings":"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","sourcesContent":["// Core\nimport React from \"react\";\nimport {\n  DharmaTypeClassName,\n  DharmaTypeStyle,\n} from \"../../_svg/DharmaType/styles.scss\";\n\n// Begin Types\n// __________________________________________________________________________________________\n\ntype LXLT_DharmaCounter = {\n  text: string;\n};\n\ntype LXLT_DharmaCounterState = {\n  text: string;\n  characters: LXLT_DharmaChar[];\n\n  viewBoxHeight: number;\n  viewBoxWidth: number;\n\n  characterVerticalTranslation: number;\n  characterHorizontalScale: number;\n  characterVerticalScale: number;\n\n  characterWidth: number;\n\n  isInitialized: boolean;\n};\n\ntype LXLT_DharmaChar = {\n  letter: string;\n  count: number;\n  idx: number;\n};\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name DharmaCounter\n * @author Peter Laxalt\n *\n */\nexport class DharmaCounter extends React.PureComponent<\n  LXLT_DharmaCounter,\n  LXLT_DharmaCounterState\n> {\n  constructor(props: LXLT_DharmaCounter) {\n    super(props);\n\n    this.state = {\n      text: \"\",\n      characters: [],\n\n      viewBoxHeight: 0,\n      viewBoxWidth: 0,\n      characterWidth: 0,\n\n      characterVerticalTranslation: 0,\n      characterHorizontalScale: 0,\n      characterVerticalScale: 0,\n\n      isInitialized: false,\n    };\n\n    this.incrementLetterCount = this.incrementLetterCount.bind(this);\n    this.decrementLetterCount = this.decrementLetterCount.bind(this);\n    this.resetLetterCount = this.resetLetterCount.bind(this);\n    this.updateLetterCount = this.updateLetterCount.bind(this);\n\n    this.letterCountTimer = this.letterCountTimer.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.text) {\n      // ____________________________________________\n      // Get text / create array\n      let { text } = this.props;\n\n      let splitCharacterArray = text.split(\"\");\n      let characterArray: LXLT_DharmaChar[] = splitCharacterArray.map(\n        (character: string, idx: number) => {\n          return {\n            letter: character,\n            count: 1,\n            idx: idx,\n          };\n        }\n      );\n\n      // ____________________________________________\n      // USE THESE TO TWEAK YOUR CHARACTERS TO FIT\n      let viewBoxHeight = 100;\n      let viewBoxWidth = 100;\n\n      let characterCount = splitCharacterArray.length;\n      let characterWidth = viewBoxWidth / characterCount;\n\n      let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n      let characterHorizontalScale = 0.75; // Multiplied by the characterWidth\n      let characterVerticalScale = 1.38; // Multiplied by the characterWidth\n\n      this.setState({\n        text: text,\n        characters: characterArray,\n\n        viewBoxHeight: viewBoxHeight,\n        viewBoxWidth: viewBoxWidth,\n\n        characterWidth: characterWidth,\n\n        characterHorizontalScale: characterHorizontalScale,\n        characterVerticalScale: characterVerticalScale,\n        characterVerticalTranslation: characterVerticalTranslation,\n\n        isInitialized: true,\n      });\n\n      this.letterCountTimer();\n    }\n  }\n\n  incrementLetterCount(id: number) {\n    this.setState({\n      characters: this.state.characters.map(\n        (character: LXLT_DharmaChar, idx: number) => {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? character.count + 1 : character.count,\n            idx: idx,\n          };\n        }\n      ),\n    });\n\n    return;\n  }\n\n  decrementLetterCount(id: number) {\n    this.setState({\n      characters: this.state.characters.map(\n        (character: LXLT_DharmaChar, idx: number) => {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? character.count - 1 : character.count,\n            idx: idx,\n          };\n        }\n      ),\n    });\n\n    return;\n  }\n\n  resetLetterCount(id: number) {\n    this.setState({\n      characters: this.state.characters.map(\n        (character: LXLT_DharmaChar, idx: number) => {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? 1 : character.count,\n            idx: idx,\n          };\n        }\n      ),\n    });\n\n    return;\n  }\n\n  updateLetterCount(id: number) {\n    if (this.state.characters && this.state.characters.length > 0) {\n      let matchedCharacter: LXLT_DharmaChar = this.state.characters.filter(\n        (character: LXLT_DharmaChar) => character.idx == id\n      )[0];\n\n      let maxCount = 4;\n\n      if (matchedCharacter) {\n        if (matchedCharacter.count === maxCount) {\n          this.resetLetterCount(id);\n        } else {\n          this.incrementLetterCount(id);\n        }\n      } else {\n        return;\n      }\n    } else {\n      return;\n    }\n\n    return;\n  }\n\n  letterCountTimer() {\n    function generateRandomInteger(min, max) {\n      return Math.floor(min + Math.random() * (max + 1 - min));\n    }\n\n    window.setInterval(\n      () =>\n        this.updateLetterCount(\n          generateRandomInteger(0, this.state.characters.length)\n        ),\n      3000\n    );\n  }\n\n  render() {\n    let {\n      viewBoxHeight,\n      viewBoxWidth,\n      characters,\n      characterWidth,\n\n      characterHorizontalScale,\n      characterVerticalScale,\n      characterVerticalTranslation,\n    } = this.state;\n\n    // console.table(\"DharmaCounter state:\", this.state.characters);\n\n    return (\n      <DharmaTypeStyle\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox={`0 0 ${viewBoxWidth} ${viewBoxHeight}`}\n        preserveAspectRatio=\"none\"\n        className={`${DharmaTypeClassName} ${DharmaTypeClassName}--couter`}\n        style={{\n          [`--${DharmaTypeClassName}-font-size` as any]: `${viewBoxHeight}px`,\n        }}\n      >\n        <filter id={`displacementFilter`}>\n          <feTurbulence\n            type=\"turbulence\"\n            baseFrequency={0.05}\n            numOctaves={1}\n            result=\"turbulence\"\n          />\n          <feDisplacementMap\n            in2=\"turbulence\"\n            in=\"SourceGraphic\"\n            scale={3}\n            xChannelSelector=\"R\"\n            yChannelSelector=\"G\"\n          />\n        </filter>\n\n        <g>\n          {characters.map((char: LXLT_DharmaChar, idx: number) => {\n            let countArray = Array.from(Array(char.count).keys());\n\n            return countArray.map((duplicate: number, idxx: number) => {\n              let adjustedDuplicate =\n                char.count > 1 ? char.count : duplicate + 1;\n\n              let adjustedVerticalTranslation =\n                (viewBoxHeight / adjustedDuplicate) *\n                (idxx + 1) *\n                characterVerticalTranslation;\n\n              let adjustedVerticalScale =\n                characterVerticalScale / adjustedDuplicate;\n\n              return (\n                <g\n                  className={`${DharmaTypeClassName}__character-wrapper`}\n                  data-char-id={idx}\n                  data-char-count={duplicate}\n                  key={idxx}\n                  onClick={() => this.updateLetterCount(idx)}\n                >\n                  <filter id={`displacementFilter__${idx}__${idxx}`}>\n                    <feTurbulence\n                      type=\"turbulence\"\n                      baseFrequency={0.1 * (idxx * 0.05)}\n                      numOctaves={1 * (idxx + 20)}\n                      result=\"turbulence\"\n                    />\n                    <feDisplacementMap\n                      in2=\"turbulence\"\n                      in=\"SourceGraphic\"\n                      scale={3 - idxx * 0.5}\n                      xChannelSelector=\"R\"\n                      yChannelSelector=\"G\"\n                    />\n                  </filter>\n\n                  <text\n                    className={`${DharmaTypeClassName}__character`}\n                    transform={`translate(${\n                      characterWidth * idx\n                    } ${adjustedVerticalTranslation}) scale(${characterHorizontalScale}, ${adjustedVerticalScale})`}\n                    style={{\n                      [`--${DharmaTypeClassName}-key` as any]: idx,\n                      filter: `url(#displacementFilter__${idx}__${idxx})`,\n                    }}\n                  >\n                    <tspan className={`${DharmaTypeClassName}__letter`}>\n                      {char.letter}\n                    </tspan>\n                  </text>\n                </g>\n              );\n            });\n          })}\n        </g>\n      </DharmaTypeStyle>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}