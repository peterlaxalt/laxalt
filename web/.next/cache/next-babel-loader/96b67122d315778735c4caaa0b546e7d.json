{"ast":null,"code":"import _classCallCheck from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n// Core\nimport * as THREE from \"three\"; // Settings\n\n// Textures\nimport { EffectComposer, RenderPass, EffectPass } from \"postprocessing\"; // Textures\n\nimport { TouchTexture } from \"./water-distort/TouchTexture\";\nimport WaterEffect from \"./water-distort/WaterEffect\";\nexport var ThreeWaterCanvasClass = /*#__PURE__*/function () {\n  // ______________________________\n  // Types\n  // ______________________________\n  // Constructor\n  function ThreeWaterCanvasClass(options) {\n    _classCallCheck(this, ThreeWaterCanvasClass);\n\n    _defineProperty(this, \"touchTexture\", void 0);\n\n    _defineProperty(this, \"waterEffect\", void 0);\n\n    _defineProperty(this, \"renderer\", void 0);\n\n    _defineProperty(this, \"camera\", void 0);\n\n    _defineProperty(this, \"scene\", void 0);\n\n    _defineProperty(this, \"composer\", void 0);\n\n    _defineProperty(this, \"clock\", void 0);\n\n    _defineProperty(this, \"material\", void 0);\n\n    _defineProperty(this, \"mesh\", void 0);\n\n    _defineProperty(this, \"canvasElement\", void 0);\n\n    _defineProperty(this, \"geometry\", void 0);\n\n    this.touchTexture = new TouchTexture({\n      debug: false\n    });\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: false,\n      alpha: true\n    });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.domElement.id = \"three_canvas\";\n    options.canvasContainer.append(this.renderer.domElement); // Scene\n\n    this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 10000);\n    this.camera.position.z = 50;\n    this.scene = new THREE.Scene(); // this.scene.background = new THREE.Color(\n    //   `${hexToRGB(window.laxaltUniversalTheme.background, 1)}`\n    // );\n\n    this.canvasElement = options.canvasElement;\n    this.geometry = new THREE.PlaneBufferGeometry(60, 35, 1, 1);\n    this.material = new THREE.MeshBasicMaterial();\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n    this.material.map = new THREE.CanvasTexture(this.canvasElement);\n    this.tick = this.tick.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this); // Post Processing\n\n    this.composer = new EffectComposer(this.renderer);\n    this.clock = new THREE.Clock();\n    this.init();\n  }\n\n  _createClass(ThreeWaterCanvasClass, [{\n    key: \"initComposer\",\n    value: function initComposer() {\n      var renderPass = new RenderPass(this.scene, this.camera);\n      this.waterEffect = new WaterEffect({\n        texture: this.touchTexture.texture\n      });\n      var waterPass = new EffectPass(this.camera, this.waterEffect);\n      renderPass.renderToScreen = false;\n      waterPass.renderToScreen = true;\n      this.composer.addPass(renderPass);\n      this.composer.addPass(waterPass);\n    }\n  }, {\n    key: \"watchPlane\",\n    value: function watchPlane() {\n      window.addEventListener(\"mousemove\", this.onMouseMove);\n      this.scene.add(this.mesh);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      this.initComposer();\n      this.watchPlane();\n      this.tick();\n    }\n  }, {\n    key: \"onMouseMove\",\n    value: function onMouseMove(ev) {\n      var point = {\n        x: ev.clientX / window.innerWidth,\n        y: ev.clientY / window.innerHeight\n      };\n      this.touchTexture.addPoint(point);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.material.map.needsUpdate = true;\n      this.composer.render(this.clock.getDelta());\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      this.render();\n      this.touchTexture.update();\n      requestAnimationFrame(this.tick);\n    }\n  }]);\n\n  return ThreeWaterCanvasClass;\n}();\nexport var ThreeWaterCanvas = function ThreeWaterCanvas(canvasContainer, canvasElement) {\n  if (!document.querySelector(\"#three_canvas\")) {\n    var myWaterCanvas = new ThreeWaterCanvasClass({\n      canvasContainer: canvasContainer,\n      canvasElement: canvasElement\n    });\n    return myWaterCanvas;\n  } else {\n    document.querySelector(\"#three_canvas\").remove();\n\n    var _myWaterCanvas = new ThreeWaterCanvasClass({\n      canvasContainer: canvasContainer,\n      canvasElement: canvasElement\n    });\n\n    return _myWaterCanvas;\n  }\n};\n_c = ThreeWaterCanvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreeWaterCanvas\");","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/three/three-water-distort.canvas.ts"],"names":["THREE","EffectComposer","RenderPass","EffectPass","TouchTexture","WaterEffect","ThreeWaterCanvasClass","options","touchTexture","debug","renderer","WebGLRenderer","antialias","alpha","setSize","window","innerWidth","innerHeight","setPixelRatio","devicePixelRatio","domElement","id","canvasContainer","append","camera","PerspectiveCamera","position","z","scene","Scene","canvasElement","geometry","PlaneBufferGeometry","material","MeshBasicMaterial","mesh","Mesh","map","CanvasTexture","tick","bind","onMouseMove","composer","clock","Clock","init","renderPass","waterEffect","texture","waterPass","renderToScreen","addPass","addEventListener","add","initComposer","watchPlane","ev","point","x","clientX","y","clientY","addPoint","needsUpdate","render","getDelta","update","requestAnimationFrame","ThreeWaterCanvas","document","querySelector","myWaterCanvas","remove"],"mappings":"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","sourcesContent":["// Core\nimport * as THREE from \"three\";\n\n// Settings\nimport { __DEBUG__ } from \"../../constants/site/Settings\";\n\n// Types\nimport { LXLT_ColorTheme } from \"../../constants/styles/Color\";\n\n// Textures\nimport { EffectComposer, RenderPass, EffectPass } from \"postprocessing\";\n\n// Textures\nimport {\n  LXLT_TouchTexturePoint,\n  TouchTexture,\n} from \"./water-distort/TouchTexture\";\nimport WaterEffect from \"./water-distort/WaterEffect\";\nimport { hexToRGB } from \"../../utils/hexToRGB\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_ThreeWaterCanvas = {\n  canvasContainer: HTMLDivElement;\n  canvasElement: HTMLCanvasElement;\n};\n\nexport class ThreeWaterCanvasClass {\n  // ______________________________\n  // Types\n  touchTexture: TouchTexture;\n  waterEffect: WaterEffect;\n  renderer: THREE.WebGLRenderer;\n  camera: THREE.PerspectiveCamera;\n  scene: THREE.Scene;\n  composer: any;\n  clock: THREE.Clock;\n  material: THREE.MeshBasicMaterial;\n  mesh: THREE.Mesh;\n  canvasElement: HTMLCanvasElement;\n  geometry: THREE.PlaneBufferGeometry;\n\n  // ______________________________\n  // Constructor\n  constructor(options: LXLT_ThreeWaterCanvas) {\n    this.touchTexture = new TouchTexture({ debug: false });\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: false,\n      alpha: true,\n    });\n\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.domElement.id = \"three_canvas\";\n\n    options.canvasContainer.append(this.renderer.domElement);\n\n    // Scene\n    this.camera = new THREE.PerspectiveCamera(\n      45,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      10000\n    );\n    this.camera.position.z = 50;\n\n    this.scene = new THREE.Scene();\n    // this.scene.background = new THREE.Color(\n    //   `${hexToRGB(window.laxaltUniversalTheme.background, 1)}`\n    // );\n\n    this.canvasElement = options.canvasElement;\n\n    this.geometry = new THREE.PlaneBufferGeometry(60, 35, 1, 1);\n    this.material = new THREE.MeshBasicMaterial();\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n\n    this.material.map = new THREE.CanvasTexture(this.canvasElement);\n\n    this.tick = this.tick.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n\n    // Post Processing\n    this.composer = new EffectComposer(this.renderer);\n    this.clock = new THREE.Clock();\n\n    this.init();\n  }\n\n  initComposer() {\n    const renderPass = new RenderPass(this.scene, this.camera);\n\n    this.waterEffect = new WaterEffect({ texture: this.touchTexture.texture });\n\n    const waterPass = new EffectPass(this.camera, this.waterEffect);\n\n    renderPass.renderToScreen = false;\n    waterPass.renderToScreen = true;\n    this.composer.addPass(renderPass);\n    this.composer.addPass(waterPass);\n  }\n\n  watchPlane() {\n    window.addEventListener(\"mousemove\", this.onMouseMove);\n    this.scene.add(this.mesh);\n  }\n\n  init() {\n    this.initComposer();\n    this.watchPlane();\n    this.tick();\n  }\n\n  onMouseMove(ev: MouseEvent) {\n    const point: LXLT_TouchTexturePoint = {\n      x: ev.clientX / window.innerWidth,\n      y: ev.clientY / window.innerHeight,\n    };\n    this.touchTexture.addPoint(point);\n  }\n\n  render() {\n    this.material.map.needsUpdate = true;\n\n    this.composer.render(this.clock.getDelta());\n  }\n\n  tick() {\n    this.render();\n    this.touchTexture.update();\n\n    requestAnimationFrame(this.tick);\n  }\n}\n\nexport const ThreeWaterCanvas = (\n  canvasContainer: HTMLDivElement,\n  canvasElement: HTMLCanvasElement\n): ThreeWaterCanvasClass => {\n  if (!document.querySelector(\"#three_canvas\")) {\n    const myWaterCanvas = new ThreeWaterCanvasClass({\n      canvasContainer,\n      canvasElement,\n    });\n\n    return myWaterCanvas;\n  } else {\n    document.querySelector(\"#three_canvas\").remove();\n\n    const myWaterCanvas = new ThreeWaterCanvasClass({\n      canvasContainer,\n      canvasElement,\n    });\n\n    return myWaterCanvas;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}