{"ast":null,"code":"import _slicedToArray from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\n/**\n *\n * isVisible.ts\n * @description Dead simple function to know if something is in the viewport\n * @example https://stackoverflow.com/a/65008608/13364822\n *\n */\nimport { useEffect, useState } from \"react\";\nexport function isVisible(ref) {\n  _s();\n\n  var _useState = useState(false),\n      isIntersecting = _useState[0],\n      setIntersecting = _useState[1];\n\n  var observer = new IntersectionObserver(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        entry = _ref2[0];\n\n    return setIntersecting(entry.isIntersecting);\n  });\n  useEffect(function () {\n    observer.observe(ref.current); // Remove the observer as soon as the component is unmounted\n\n    return function () {\n      observer.disconnect();\n    };\n  }, []);\n  return isIntersecting;\n}\n\n_s(isVisible, \"+TWZGT8mxcpNH+JS7IkSFv1hR0A=\");","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/utils/isVisible.ts"],"names":["useEffect","useState","isVisible","ref","isIntersecting","setIntersecting","observer","IntersectionObserver","entry","observe","current","disconnect"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,SAASC,SAAT,CAAmBC,GAAnB,EAA8C;AAAA;;AAAA,kBACTF,QAAQ,CAAC,KAAD,CADC;AAAA,MAC5CG,cAD4C;AAAA,MAC5BC,eAD4B;;AAGnD,MAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyB;AAAA;AAAA,QAAEC,KAAF;;AAAA,WACxCH,eAAe,CAACG,KAAK,CAACJ,cAAP,CADyB;AAAA,GAAzB,CAAjB;AAIAJ,EAAAA,SAAS,CAAC,YAAM;AACdM,IAAAA,QAAQ,CAACG,OAAT,CAAiBN,GAAG,CAACO,OAArB,EADc,CAEd;;AACA,WAAO,YAAM;AACXJ,MAAAA,QAAQ,CAACK,UAAT;AACD,KAFD;AAGD,GANQ,EAMN,EANM,CAAT;AAQA,SAAOP,cAAP;AACD;;GAhBeF,S","sourcesContent":["/**\n *\n * isVisible.ts\n * @description Dead simple function to know if something is in the viewport\n * @example https://stackoverflow.com/a/65008608/13364822\n *\n */\n\nimport { useEffect, useState } from \"react\";\n\nexport function isVisible(ref: React.RefObject<any>) {\n  const [isIntersecting, setIntersecting] = useState(false);\n\n  const observer = new IntersectionObserver(([entry]) =>\n    setIntersecting(entry.isIntersecting)\n  );\n\n  useEffect(() => {\n    observer.observe(ref.current);\n    // Remove the observer as soon as the component is unmounted\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  return isIntersecting;\n}\n"]},"metadata":{},"sourceType":"module"}