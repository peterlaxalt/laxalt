{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n// Begin Component\n// __________________________________________________________________________\nconst DharmaCanvasDisplay = (W, H, ID, DharmaTheme) => p => {\n  // _________________________________________________\n  // Config\n  // ____________________________\n  // Fonts\n  let dharmaFont; // ____________________________\n  // Typography\n\n  let text = \"LAXALT\";\n  let splitCharacterArray = text.split(\"\");\n  let characters = splitCharacterArray.map((character, idx) => {\n    return {\n      letter: character,\n      count: 1,\n      idx: idx,\n      copies: 5,\n      copiesLastVisible: 0,\n      copiesAreVisible: false,\n      countIsIncrementing: true,\n      countIsDecrementing: false,\n      copiesAreIncrementing: true,\n      copiesAreDecrementing: false\n    };\n  });\n  let characterCount = splitCharacterArray.length;\n  let characterWidth = W / characterCount;\n  let characterSize = H * 1.25;\n  console.log(characterSize, \"characterSize\"); // ____________________________\n  // Counts\n  // let renderCount: number = 0;\n\n  let previousCountUpdateTime = 0;\n  let previousCopyUpdateTime = 0; // ____________________________\n  // Strokes\n\n  let strokeWidth = 4;\n  let strokeOffset = strokeWidth * 1.5; // ____________________________\n  // Limits\n\n  let maxCount = 3;\n  let minCount = 1;\n  let maxCopies = 12;\n  let minCopies = 1; // ____________________________\n  // Translation\n  // let previousVerticalTranslation: number = H / 2.25;\n\n  let verticalTranslationWhitespaceCompensation = 2.25;\n\n  const previousHorizontalTranslation = idx => -60 + (characterWidth * idx + characterWidth / 1.5 + strokeOffset); // _________________________________________________\n  // Preload\n\n\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  }; // _________________________________________________\n  // Setup\n\n\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H);\n  }; // _________________________________________________\n  // Update Character\n\n\n  const updateCharacter = (char, idx) => {\n    if (char.count < maxCount && char.countIsIncrementing) {\n      characters[idx] = _objectSpread({}, char, {\n        count: char.count + 1\n      });\n      previousCountUpdateTime = p.millis();\n      return;\n    } else if (char.count === maxCount) {\n      characters[idx] = _objectSpread({}, char, {\n        count: char.count - 1,\n        countIsIncrementing: false,\n        countIsDecrementing: true\n      });\n      previousCountUpdateTime = p.millis();\n      return;\n    } else if (char.count > minCount && char.countIsDecrementing) {\n      characters[idx] = _objectSpread({}, char, {\n        count: char.count - 1,\n        countIsDecrementing: true\n      });\n      previousCountUpdateTime = p.millis();\n      return;\n    } else if (char.count === minCount && char.countIsDecrementing) {\n      characters[idx] = _objectSpread({}, char, {\n        count: char.count + 1,\n        countIsIncrementing: true,\n        countIsDecrementing: false\n      });\n      previousCountUpdateTime = p.millis();\n      return;\n    }\n\n    return;\n  }; // _________________________________________________\n  // Update Copies\n\n\n  const updateCopies = (char, idx) => {\n    if (char.copies < maxCopies && char.copiesAreIncrementing) {\n      characters[idx] = _objectSpread({}, char, {\n        copies: char.copies + 1\n      });\n      previousCopyUpdateTime = p.millis();\n      return;\n    } else if (char.copies === maxCopies) {\n      characters[idx] = _objectSpread({}, char, {\n        copies: char.copies - 1,\n        copiesAreIncrementing: false,\n        copiesAreDecrementing: true\n      });\n      previousCopyUpdateTime = p.millis();\n      return;\n    } else if (char.copies > minCopies && char.copiesAreDecrementing) {\n      characters[idx] = _objectSpread({}, char, {\n        copies: char.copies - 1,\n        copiesAreDecrementing: true\n      });\n      previousCopyUpdateTime = p.millis();\n      return;\n    } else if (char.copies === minCopies && char.copiesAreDecrementing) {\n      characters[idx] = _objectSpread({}, char, {\n        copies: char.copies + 1,\n        copiesAreIncrementing: true,\n        copiesAreDecrementing: false\n      });\n      previousCopyUpdateTime = p.millis();\n      return;\n    }\n\n    return;\n  }; // _________________________________________________\n  // Draw\n\n\n  p.draw = () => {\n    p.background(DharmaTheme.background);\n    p.textFont(dharmaFont);\n    p.textSize(characterSize);\n    p.textAlign(p.CENTER, p.CENTER);\n    p.fill(`${DharmaTheme.foreground}`);\n    p.strokeWeight(strokeWidth);\n    p.stroke(DharmaTheme.background);\n\n    if (H && W) {\n      // _________________________________________\n      // Loop through our copies\n      characters.map((char, idx) => {\n        p.scale(1, 1);\n        let randomCharPick = Math.random() <= 0.5;\n\n        if (randomCharPick) {\n          console.log(\"yep\");\n          updateCopies(char, idx);\n        } else {\n          console.log(\"nope\");\n        }\n\n        if (randomCharPick && p.millis() - previousCountUpdateTime > 3000) {\n          updateCharacter(char, idx);\n        }\n\n        let countArray = _Array$from(Array(char.count).keys());\n\n        countArray = countArray.map(countNumber => {\n          return countNumber + 1;\n        }); // _________________________________________\n        // Duplicate positions\n\n        countArray.map((countNumber, idxx) => {\n          let verticalScale = 1 / (char.count * 0.95);\n          let verticalSkewDivisible = 2.75;\n          let characterSkewDivisible = 1.36;\n          let duplicateVerticalPosition = char.count == 1 ? H / verticalTranslationWhitespaceCompensation : characterSize / verticalSkewDivisible + characterSize / characterSkewDivisible * idxx; // _________________________________________\n          // Make copies\n\n          let copiesArray = _Array$from(Array(char.copies).keys()); // let randomCopyPick = Math.random() <= 0.5;\n\n\n          copiesArray = copiesArray.map(copyNumber => {\n            return copyNumber + 1;\n          }); // let randomCopyPick = Math.random() <= 0.5;\n          // let copyTimer = p.millis() - previousCopiesVisibleTime > 2000;\n\n          previousCopyUpdateTime; // let isFirstCount = true;\n\n          copiesArray.map((copyNumber, idxxx) => {\n            // let centerCoordsX = W / 2;\n            // let centerCoordsY = H / 2;\n            // let horizontalTranslate =\n            //   copyNumber !== 1\n            //     ? (previousHorizontalTranslation(idx) +\n            //         (strokeOffset / (p.mouseX / 100)) * copyNumber)\n            //     : previousHorizontalTranslation(idx) +\n            //       strokeOffset * copyNumber;\n            // let verticalTranslate =\n            //   copyNumber !== 1\n            //     ? (duplicateVerticalPosition - (strokeOffset / (p.mouseX / 100)) * copyNumber)\n            //     : duplicateVerticalPosition - strokeOffset * copyNumber;\n            let horizontalTranslate = previousHorizontalTranslation(idx) + strokeOffset * copyNumber;\n            let verticalTranslate = duplicateVerticalPosition - strokeOffset * copyNumber;\n            p.push();\n            p.scale(1, verticalScale);\n            p.text(char.letter, horizontalTranslate, verticalTranslate);\n            p.pop();\n          });\n        });\n      });\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/dharma.tsx"],"names":["DharmaCanvasDisplay","W","H","ID","DharmaTheme","p","dharmaFont","text","splitCharacterArray","split","characters","map","character","idx","letter","count","copies","copiesLastVisible","copiesAreVisible","countIsIncrementing","countIsDecrementing","copiesAreIncrementing","copiesAreDecrementing","characterCount","length","characterWidth","characterSize","console","log","previousCountUpdateTime","previousCopyUpdateTime","strokeWidth","strokeOffset","maxCount","minCount","maxCopies","minCopies","verticalTranslationWhitespaceCompensation","previousHorizontalTranslation","preload","loadFont","setup","createCanvas","updateCharacter","char","millis","updateCopies","draw","background","textFont","textSize","textAlign","CENTER","fill","foreground","strokeWeight","stroke","scale","randomCharPick","Math","random","countArray","Array","keys","countNumber","idxx","verticalScale","verticalSkewDivisible","characterSkewDivisible","duplicateVerticalPosition","copiesArray","copyNumber","idxxx","horizontalTranslate","verticalTranslate","push","pop","windowResized","resizeCanvas"],"mappings":"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","sourcesContent":["/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n\nimport p5, { Font } from \"p5\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_DharmaCanvas = {\n  W: number;\n  H: number;\n  ID: number;\n  BG: LXLT_DharmaTheme;\n};\n\nexport type LXLT_DharmaTheme = {\n  primary: string;\n  secondary: string;\n  background: string;\n  foreground: string;\n}\n\nexport type LXLT_DharmaCanvasDisplay = (\n  W: number,\n  H: number,\n  ID: number,\n  BG: LXLT_DharmaTheme\n) => (p: p5) => void;\n\ntype LXLT_DharmaCanvasChar = {\n  letter: string;\n  count: number;\n  idx: number;\n\n  copies: number;\n  copiesLastVisible: number;\n  copiesAreVisible: boolean;\n\n  copiesAreIncrementing: boolean;\n  copiesAreDecrementing: boolean;\n\n  countIsIncrementing: boolean;\n  countIsDecrementing: boolean;\n};\n\nconst DharmaCanvasDisplay: LXLT_DharmaCanvasDisplay = (W, H, ID, DharmaTheme) => (\n  p: p5\n) => {\n  // _________________________________________________\n  // Config\n\n  // ____________________________\n  // Fonts\n  let dharmaFont: Font;\n\n  // ____________________________\n  // Typography\n  let text = \"LAXALT\";\n\n  let splitCharacterArray = text.split(\"\");\n  let characters: LXLT_DharmaCanvasChar[] = splitCharacterArray.map(\n    (character: string, idx: number) => {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n\n        copies: 5,\n        copiesLastVisible: 0,\n        copiesAreVisible: false,\n\n        countIsIncrementing: true,\n        countIsDecrementing: false,\n\n        copiesAreIncrementing: true,\n        copiesAreDecrementing: false,\n      };\n    }\n  );\n\n  let characterCount: number = splitCharacterArray.length;\n  let characterWidth: number = W / characterCount;\n  let characterSize: number = H * 1.25;\n\n  console.log(characterSize, \"characterSize\");\n\n  // ____________________________\n  // Counts\n  // let renderCount: number = 0;\n  let previousCountUpdateTime: number = 0;\n  let previousCopyUpdateTime: number = 0;\n\n  // ____________________________\n  // Strokes\n  let strokeWidth: number = 4;\n  let strokeOffset: number = strokeWidth * 1.5;\n\n  // ____________________________\n  // Limits\n  let maxCount = 3;\n  let minCount = 1;\n\n  let maxCopies = 12;\n  let minCopies = 1;\n\n  // ____________________________\n  // Translation\n  // let previousVerticalTranslation: number = H / 2.25;\n\n  let verticalTranslationWhitespaceCompensation: number = 2.25;\n  const previousHorizontalTranslation = (idx: number) =>\n    -60 + (characterWidth * idx + characterWidth / 1.5 + strokeOffset);\n\n  // _________________________________________________\n  // Preload\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  };\n\n  // _________________________________________________\n  // Setup\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H);\n  };\n\n  // _________________________________________________\n  // Update Character\n  const updateCharacter = (char: LXLT_DharmaCanvasChar, idx: number) => {\n    if (char.count < maxCount && char.countIsIncrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count + 1,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    } else if (char.count === maxCount) {\n      characters[idx] = {\n        ...char,\n        count: char.count - 1,\n        countIsIncrementing: false,\n        countIsDecrementing: true,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    } else if (char.count > minCount && char.countIsDecrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count - 1,\n        countIsDecrementing: true,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    } else if (char.count === minCount && char.countIsDecrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count + 1,\n        countIsIncrementing: true,\n        countIsDecrementing: false,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    }\n\n    return;\n  };\n\n  // _________________________________________________\n  // Update Copies\n  const updateCopies = (char: LXLT_DharmaCanvasChar, idx: number) => {\n    if (char.copies < maxCopies && char.copiesAreIncrementing) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies + 1,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    } else if (char.copies === maxCopies) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies - 1,\n        copiesAreIncrementing: false,\n        copiesAreDecrementing: true,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    } else if (char.copies > minCopies && char.copiesAreDecrementing) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies - 1,\n        copiesAreDecrementing: true,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    } else if (char.copies === minCopies && char.copiesAreDecrementing) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies + 1,\n        copiesAreIncrementing: true,\n        copiesAreDecrementing: false,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    }\n\n    return;\n  };\n\n  // _________________________________________________\n  // Draw\n  p.draw = () => {\n    p.background(DharmaTheme.background);\n\n    p.textFont(dharmaFont);\n\n    p.textSize(characterSize);\n\n    p.textAlign(p.CENTER, p.CENTER);\n\n    p.fill(`${DharmaTheme.foreground}`);\n    p.strokeWeight(strokeWidth);\n    p.stroke(DharmaTheme.background);\n\n    if (H && W) {\n      // _________________________________________\n      // Loop through our copies\n      characters.map((char: LXLT_DharmaCanvasChar, idx: number) => {\n        p.scale(1, 1);\n\n        let randomCharPick = Math.random() <= 0.5;\n\n        if (randomCharPick) {\n          console.log(\"yep\");\n\n          updateCopies(char, idx);\n        } else {\n          console.log(\"nope\");\n        }\n\n        if (randomCharPick && p.millis() - previousCountUpdateTime > 3000) {\n          updateCharacter(char, idx);\n        }\n\n        let countArray: number[] = Array.from(Array(char.count).keys());\n\n        countArray = countArray.map((countNumber: number) => {\n          return countNumber + 1;\n        });\n\n        // _________________________________________\n        // Duplicate positions\n        countArray.map((countNumber: number, idxx: number) => {\n          let verticalScale = 1 / (char.count * 0.95);\n\n          let verticalSkewDivisible: number = 2.75;\n          let characterSkewDivisible: number = 1.36;\n\n          let duplicateVerticalPosition: number =\n            char.count == 1\n              ? H / verticalTranslationWhitespaceCompensation\n              : characterSize / verticalSkewDivisible +\n                (characterSize / characterSkewDivisible) * idxx;\n\n          // _________________________________________\n          // Make copies\n          let copiesArray: number[] = Array.from(Array(char.copies).keys());\n          // let randomCopyPick = Math.random() <= 0.5;\n\n          copiesArray = copiesArray.map((copyNumber: number) => {\n            return copyNumber + 1;\n          });\n\n          // let randomCopyPick = Math.random() <= 0.5;\n          // let copyTimer = p.millis() - previousCopiesVisibleTime > 2000;\n          previousCopyUpdateTime;\n\n          // let isFirstCount = true;\n\n          copiesArray.map((copyNumber: number, idxxx: number) => {\n            // let centerCoordsX = W / 2;\n            // let centerCoordsY = H / 2;\n\n            // let horizontalTranslate =\n            //   copyNumber !== 1\n            //     ? (previousHorizontalTranslation(idx) +\n            //         (strokeOffset / (p.mouseX / 100)) * copyNumber)\n            //     : previousHorizontalTranslation(idx) +\n            //       strokeOffset * copyNumber;\n\n            // let verticalTranslate =\n            //   copyNumber !== 1\n            //     ? (duplicateVerticalPosition - (strokeOffset / (p.mouseX / 100)) * copyNumber)\n            //     : duplicateVerticalPosition - strokeOffset * copyNumber;\n\n            let horizontalTranslate =\n              previousHorizontalTranslation(idx) + strokeOffset * copyNumber;\n\n            let verticalTranslate =\n              duplicateVerticalPosition - strokeOffset * copyNumber;\n\n            p.push();\n            p.scale(1, verticalScale);\n            p.text(char.letter, horizontalTranslate, verticalTranslate);\n            p.pop();\n          });\n        });\n      });\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;\n"]},"metadata":{},"sourceType":"module"}