{"ast":null,"code":"import _defineProperty from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// Core\nimport React from \"react\";\nimport { Theme } from \"../../../constants/Theme\";\nimport { DharmaTypeClassName, DharmaTypeStyle } from \"../../_svg/DharmaType/styles.scss\"; // Begin Types\n// __________________________________________________________________________________________\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name DharmaCounter\n * @author Peter Laxalt\n *\n */\nexport var DharmaCounter = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(DharmaCounter, _React$PureComponent);\n\n  var _super = _createSuper(DharmaCounter);\n\n  function DharmaCounter(props) {\n    var _this;\n\n    _classCallCheck(this, DharmaCounter);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      text: \"\",\n      characters: [],\n      viewBoxHeight: 0,\n      viewBoxWidth: 0,\n      characterWidth: 0,\n      offsetCount: 3,\n      characterVerticalTranslation: 0,\n      characterHorizontalScale: 0,\n      characterVerticalScale: 0,\n      isInitialized: false\n    };\n    _this.incrementLetterCount = _this.incrementLetterCount.bind(_assertThisInitialized(_this));\n    _this.decrementLetterCount = _this.decrementLetterCount.bind(_assertThisInitialized(_this));\n    _this.resetLetterCount = _this.resetLetterCount.bind(_assertThisInitialized(_this));\n    _this.updateLetterCount = _this.updateLetterCount.bind(_assertThisInitialized(_this));\n    _this.letterCountTimer = _this.letterCountTimer.bind(_assertThisInitialized(_this));\n    _this.offsetCountTimer = _this.offsetCountTimer.bind(_assertThisInitialized(_this));\n    _this.incrementOffsetCount = _this.incrementOffsetCount.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(DharmaCounter, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.text) {\n        // ____________________________________________\n        // Get text / create array\n        var text = this.props.text;\n        var splitCharacterArray = text.split(\"\");\n        var characterArray = splitCharacterArray.map(function (character, idx) {\n          return {\n            letter: character,\n            count: 1,\n            idx: idx,\n            copies: Math.random() <= 0.5\n          };\n        }); // ____________________________________________\n        // USE THESE TO TWEAK YOUR CHARACTERS TO FIT\n\n        var viewBoxHeight = 100;\n        var viewBoxWidth = 100;\n        var characterCount = splitCharacterArray.length;\n        var characterWidth = viewBoxWidth / characterCount; // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n\n        var characterVerticalTranslation = 0.993; // Multiplied by the viewBoxHeight\n\n        var characterHorizontalScale = 0.75; // Multiplied by the characterWidth\n\n        var characterVerticalScale = 1.38; // Multiplied by the characterWidth\n\n        this.setState({\n          text: text,\n          characters: characterArray,\n          viewBoxHeight: viewBoxHeight,\n          viewBoxWidth: viewBoxWidth,\n          characterWidth: characterWidth,\n          characterHorizontalScale: characterHorizontalScale,\n          characterVerticalScale: characterVerticalScale,\n          characterVerticalTranslation: characterVerticalTranslation,\n          isInitialized: true\n        });\n        this.letterCountTimer();\n        this.offsetCountTimer();\n      }\n    }\n  }, {\n    key: \"incrementLetterCount\",\n    value: function incrementLetterCount(id) {\n      this.setState({\n        characters: this.state.characters.map(function (character, idx) {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? character.count + 1 : character.count,\n            idx: idx,\n            copies: Math.random() <= 0.5\n          };\n        })\n      });\n      return;\n    }\n  }, {\n    key: \"decrementLetterCount\",\n    value: function decrementLetterCount(id) {\n      this.setState({\n        characters: this.state.characters.map(function (character, idx) {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? character.count - 1 : character.count,\n            idx: idx,\n            copies: Math.random() <= 0.5\n          };\n        })\n      });\n      return;\n    }\n  }, {\n    key: \"resetLetterCount\",\n    value: function resetLetterCount(id) {\n      this.setState({\n        characters: this.state.characters.map(function (character, idx) {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? 1 : character.count,\n            idx: idx,\n            copies: Math.random() <= 0.5\n          };\n        })\n      });\n      return;\n    }\n  }, {\n    key: \"updateLetterCount\",\n    value: function updateLetterCount(id) {\n      if (this.state.characters && this.state.characters.length > 0) {\n        var matchedCharacter = this.state.characters.filter(function (character) {\n          return character.idx == id;\n        })[0];\n        var maxCount = 4;\n\n        if (matchedCharacter) {\n          if (matchedCharacter.count === maxCount) {\n            this.resetLetterCount(id);\n          } else {\n            this.incrementLetterCount(id);\n          }\n        } else {\n          return;\n        }\n      } else {\n        return;\n      }\n\n      return;\n    }\n  }, {\n    key: \"letterCountTimer\",\n    value: function letterCountTimer() {\n      var _this2 = this;\n\n      function generateRandomInteger(min, max) {\n        return Math.floor(min + Math.random() * (max + 1 - min));\n      }\n\n      window.setInterval(function () {\n        return _this2.updateLetterCount(generateRandomInteger(0, _this2.state.characters.length));\n      }, 3000);\n    }\n  }, {\n    key: \"incrementOffsetCount\",\n    value: function incrementOffsetCount() {\n      this.setState({\n        offsetCount: this.state.offsetCount < 15 ? this.state.offsetCount + 1 : 2\n      });\n      return;\n    }\n  }, {\n    key: \"offsetCountTimer\",\n    value: function offsetCountTimer() {\n      var _this3 = this;\n\n      window.setInterval(function () {\n        return _this3.incrementOffsetCount();\n      }, 5000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var offsetCount = this.state.offsetCount;\n      var offsetArr = Array.from(Array(offsetCount).keys());\n      return __jsx(React.Fragment, null, __jsx(DharmaCounterDisplay, _extends({\n        updateLetterCount: this.updateLetterCount\n      }, this.state)), offsetArr.map(function (n, idx) {\n        return __jsx(DharmaCounterDisplay, _extends({\n          outlined: true,\n          offset: n,\n          key: idx,\n          updateLetterCount: _this4.updateLetterCount\n        }, _this4.state));\n      }));\n    }\n  }]);\n\n  return DharmaCounter;\n}(React.PureComponent);\n\nvar DharmaCounterDisplay = function DharmaCounterDisplay(props) {\n  var _ref;\n\n  var viewBoxHeight = props.viewBoxHeight,\n      viewBoxWidth = props.viewBoxWidth,\n      characters = props.characters,\n      characterWidth = props.characterWidth,\n      characterHorizontalScale = props.characterHorizontalScale,\n      characterVerticalScale = props.characterVerticalScale,\n      characterVerticalTranslation = props.characterVerticalTranslation,\n      updateLetterCount = props.updateLetterCount,\n      offset = props.offset,\n      outlined = props.outlined,\n      addClass = props.addClass;\n  return __jsx(DharmaTypeStyle, {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 \".concat(viewBoxWidth, \" \").concat(viewBoxHeight),\n    preserveAspectRatio: \"none\",\n    className: \"\".concat(DharmaTypeClassName, \" \").concat(DharmaTypeClassName, \"--counter \").concat(offset ? \"\".concat(DharmaTypeClassName, \"--offset\") : \"\", \" \").concat(addClass),\n    style: (_ref = {}, _defineProperty(_ref, \"--\".concat(DharmaTypeClassName, \"-font-size\"), \"\".concat(viewBoxHeight, \"px\")), _defineProperty(_ref, \"--\".concat(DharmaTypeClassName, \"-offset\"), \"\".concat(offset ? offset : 0)), _ref)\n  }, __jsx(\"g\", null, characters.map(function (_char, idx) {\n    var countArray = Array.from(Array(_char.count).keys());\n    return countArray.map(function (duplicate, idxx) {\n      var _ref2;\n\n      var adjustedDuplicate = _char.count > 1 ? _char.count : duplicate + 1;\n      var canCopy = Math.random() <= 0.5;\n      var adjustedVerticalTranslation = viewBoxHeight / adjustedDuplicate * (idxx + 1) * characterVerticalTranslation;\n      var adjustedVerticalScale = characterVerticalScale / adjustedDuplicate;\n      return __jsx(\"g\", {\n        className: \"\".concat(DharmaTypeClassName, \"__character-wrapper\"),\n        \"data-char-id\": idx,\n        \"data-char-count\": duplicate,\n        key: idxx,\n        onClick: function onClick() {\n          return updateLetterCount(idx);\n        },\n        style: {\n          display: outlined && _char.copies && canCopy ? \"none\" : \"inherit\"\n        }\n      }, __jsx(\"filter\", {\n        id: \"displacementFilter__\".concat(idx, \"__\").concat(idxx).concat(outlined ? \"__outlined\" : \"\")\n      }, !outlined && __jsx(React.Fragment, null, __jsx(\"feTurbulence\", {\n        type: \"turbulence\" // baseFrequency={0.6 * (idxx * 0.05)}\n        // numOctaves={1 * (idxx + 20)}\n        ,\n        baseFrequency: 0,\n        numOctaves: 0,\n        result: \"turbulence\"\n      }), __jsx(\"feDisplacementMap\", {\n        in2: \"turbulence\",\n        \"in\": \"SourceGraphic\" // scale={3 - idxx * 0.5}\n        ,\n        scale: 0,\n        xChannelSelector: \"R\",\n        yChannelSelector: \"G\"\n      })), outlined && __jsx(React.Fragment, null, __jsx(\"feFlood\", {\n        \"flood-color\": Theme.Color.varBackground,\n        \"flood-opacity\": \"1\",\n        result: \"PINK\"\n      }), __jsx(\"feMorphology\", {\n        \"in\": \"SourceAlpha\",\n        result: \"DILATED\",\n        operator: \"dilate\",\n        radius: \".1\"\n      }), __jsx(\"feComposite\", {\n        \"in\": \"PINK\",\n        in2: \"DILATED\",\n        operator: \"in\",\n        result: \"OUTLINE\"\n      }), __jsx(\"feMerge\", null, __jsx(\"feMergeNode\", {\n        \"in\": \"OUTLINE\"\n      }), __jsx(\"feMergeNode\", {\n        \"in\": \"SourceGraphic\"\n      })))), __jsx(\"text\", {\n        className: \"\".concat(DharmaTypeClassName, \"__character\"),\n        transform: \"translate(\".concat(characterWidth * idx, \" \").concat(adjustedVerticalTranslation, \") scale(\").concat(characterHorizontalScale, \", \").concat(adjustedVerticalScale, \")\"),\n        style: (_ref2 = {}, _defineProperty(_ref2, \"--\".concat(DharmaTypeClassName, \"-key\"), idx), _defineProperty(_ref2, \"filter\", \"url(#displacementFilter__\".concat(idx, \"__\").concat(idxx).concat(outlined ? \"__outlined\" : \"\", \")\")), _ref2)\n      }, __jsx(\"tspan\", {\n        className: \"\".concat(DharmaTypeClassName, \"__letter\")\n      }, _char.letter)));\n    });\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}