{"ast":null,"code":"var _jsxFileName = \"/Users/pflaxalt/Repositories/_pfl/web/components/ThemePicker/ThemePicker.tsx\";\nvar __jsx = React.createElement;\n// Core\nimport React from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { CssUtils } from \"../../constants/styles/CssUtils\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemePickerClassName, ThemePickerStyle } from \"./styles.scss\"; // Begin Types\n// __________________________________________________________________________________________\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemePicker\n * @author Peter Laxalt\n *\n */\nexport class ThemePicker extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      availableThemes: [{\n        name: \"lightcyan\",\n        primary: Theme.Color.Galaxy,\n        secondary: Theme.Color.Galaxy,\n        background: \"lightcyan\",\n        foreground: Theme.Color.Galaxy\n      }, {\n        name: \"goldenrod\",\n        primary: Theme.Color.Galaxy,\n        secondary: Theme.Color.Galaxy,\n        background: \"goldenrod\",\n        foreground: Theme.Color.Galaxy\n      }, {\n        name: \"honeydew\",\n        primary: Theme.Color.Galaxy,\n        secondary: Theme.Color.Galaxy,\n        background: \"honeydew\",\n        foreground: Theme.Color.Galaxy\n      }]\n    }; // this.letterCountTimer = this.letterCountTimer.bind(this);\n  }\n\n  componentDidMount() {}\n\n  incrementLetterCount(id) {// this.setState({\n    //   characters: this.state.characters.map(\n    //     (character: LXLT_DharmaChar, idx: number) => {\n    //       return {\n    //         letter: character.letter,\n    //         count: id == character.idx ? character.count + 1 : character.count,\n    //         idx: idx,\n    //       };\n    //     }\n    //   ),\n    // });\n  }\n\n  render() {\n    let {\n      activeTheme,\n      availableThemes\n    } = this.state;\n    const SetGlobalTheme = createGlobalStyle`\n      ${activeTheme ? CssUtils.CreateTheme(activeTheme.primary, activeTheme.secondary, activeTheme.background, activeTheme.foreground) : \"\"}\n    `;\n    return __jsx(React.Fragment, null, activeTheme ? __jsx(SetGlobalTheme, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }) : null, __jsx(ThemePickerStyle, {\n      className: `${ThemePickerClassName}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, availableThemes ? availableThemes.map((themeItem, idx) => {\n      return __jsx(\"div\", {\n        className: `${ThemePickerClassName}__option ${ThemePickerClassName}__option--${themeItem.name}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      });\n    }) : null));\n  }\n\n}","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/components/ThemePicker/ThemePicker.tsx"],"names":["React","createGlobalStyle","CssUtils","Theme","ThemePickerClassName","ThemePickerStyle","ThemePicker","PureComponent","constructor","props","state","availableThemes","name","primary","Color","Galaxy","secondary","background","foreground","componentDidMount","incrementLetterCount","id","render","activeTheme","SetGlobalTheme","CreateTheme","map","themeItem","idx"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,QAAT,QAAyB,iCAAzB;AACA,SAASC,KAAT,QAAsB,uBAAtB;AACA,SAASC,oBAAT,EAA+BC,gBAA/B,QAAuD,eAAvD,C,CAEA;AACA;;AAiBA;AACA;;AAEA;;;;;AAKA,OAAO,MAAMC,WAAN,SAA0BN,KAAK,CAACO,aAAhC,CAGL;AACAC,EAAAA,WAAW,CAACC,KAAD,EAA0B;AACnC,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,eAAe,EAAE,CACf;AACEC,QAAAA,IAAI,EAAE,WADR;AAEEC,QAAAA,OAAO,EAAEV,KAAK,CAACW,KAAN,CAAYC,MAFvB;AAGEC,QAAAA,SAAS,EAAEb,KAAK,CAACW,KAAN,CAAYC,MAHzB;AAIEE,QAAAA,UAAU,EAAE,WAJd;AAKEC,QAAAA,UAAU,EAAEf,KAAK,CAACW,KAAN,CAAYC;AAL1B,OADe,EAQf;AACEH,QAAAA,IAAI,EAAE,WADR;AAEEC,QAAAA,OAAO,EAAEV,KAAK,CAACW,KAAN,CAAYC,MAFvB;AAGEC,QAAAA,SAAS,EAAEb,KAAK,CAACW,KAAN,CAAYC,MAHzB;AAIEE,QAAAA,UAAU,EAAE,WAJd;AAKEC,QAAAA,UAAU,EAAEf,KAAK,CAACW,KAAN,CAAYC;AAL1B,OARe,EAef;AACEH,QAAAA,IAAI,EAAE,UADR;AAEEC,QAAAA,OAAO,EAAEV,KAAK,CAACW,KAAN,CAAYC,MAFvB;AAGEC,QAAAA,SAAS,EAAEb,KAAK,CAACW,KAAN,CAAYC,MAHzB;AAIEE,QAAAA,UAAU,EAAE,UAJd;AAKEC,QAAAA,UAAU,EAAEf,KAAK,CAACW,KAAN,CAAYC;AAL1B,OAfe;AADN,KAAb,CAHmC,CA6BnC;AACD;;AAEDI,EAAAA,iBAAiB,GAAG,CAAE;;AAEtBC,EAAAA,oBAAoB,CAACC,EAAD,EAAa,CAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAI;AAAEC,MAAAA,WAAF;AAAeZ,MAAAA;AAAf,QAAmC,KAAKD,KAA5C;AAEA,UAAMc,cAAc,GAAGvB,iBAAkB;QAErCsB,WAAW,GACPrB,QAAQ,CAACuB,WAAT,CACEF,WAAW,CAACV,OADd,EAEEU,WAAW,CAACP,SAFd,EAGEO,WAAW,CAACN,UAHd,EAIEM,WAAW,CAACL,UAJd,CADO,GAOP,EACL;KAVH;AAaA,WACE,4BACGK,WAAW,GAAG,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAH,GAAwB,IADtC,EAEE,MAAC,gBAAD;AAAkB,MAAA,SAAS,EAAG,GAAEnB,oBAAqB,EAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGO,eAAe,GACZA,eAAe,CAACe,GAAhB,CAAoB,CAACC,SAAD,EAAwBC,GAAxB,KAAwC;AAC1D,aACE;AACE,QAAA,SAAS,EAAG,GAAExB,oBAAqB,YAAWA,oBAAqB,aAAYuB,SAAS,CAACf,IAAK,EADhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAKD,KAND,CADY,GAQZ,IATN,CAFF,CADF;AAgBD;;AAjFD","sourcesContent":["// Core\nimport React from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { CssUtils } from \"../../constants/styles/CssUtils\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemePickerClassName, ThemePickerStyle } from \"./styles.scss\";\n\n// Begin Types\n// __________________________________________________________________________________________\n\ntype LXLT_ThemePicker = {};\n\ntype LXLT_Theme = {\n  name: string;\n  primary: string;\n  secondary: string;\n  background: string;\n  foreground: string;\n};\n\ntype LXLT_ThemePickerState = {\n  availableThemes: LXLT_Theme[];\n  activeTheme?: LXLT_Theme;\n};\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemePicker\n * @author Peter Laxalt\n *\n */\nexport class ThemePicker extends React.PureComponent<\n  LXLT_ThemePicker,\n  LXLT_ThemePickerState\n> {\n  constructor(props: LXLT_ThemePicker) {\n    super(props);\n\n    this.state = {\n      availableThemes: [\n        {\n          name: \"lightcyan\",\n          primary: Theme.Color.Galaxy,\n          secondary: Theme.Color.Galaxy,\n          background: \"lightcyan\",\n          foreground: Theme.Color.Galaxy,\n        },\n        {\n          name: \"goldenrod\",\n          primary: Theme.Color.Galaxy,\n          secondary: Theme.Color.Galaxy,\n          background: \"goldenrod\",\n          foreground: Theme.Color.Galaxy,\n        },\n        {\n          name: \"honeydew\",\n          primary: Theme.Color.Galaxy,\n          secondary: Theme.Color.Galaxy,\n          background: \"honeydew\",\n          foreground: Theme.Color.Galaxy,\n        },\n      ],\n    };\n\n    // this.letterCountTimer = this.letterCountTimer.bind(this);\n  }\n\n  componentDidMount() {}\n\n  incrementLetterCount(id: number) {\n    // this.setState({\n    //   characters: this.state.characters.map(\n    //     (character: LXLT_DharmaChar, idx: number) => {\n    //       return {\n    //         letter: character.letter,\n    //         count: id == character.idx ? character.count + 1 : character.count,\n    //         idx: idx,\n    //       };\n    //     }\n    //   ),\n    // });\n  }\n\n  render() {\n    let { activeTheme, availableThemes } = this.state;\n\n    const SetGlobalTheme = createGlobalStyle`\n      ${\n        activeTheme\n          ? CssUtils.CreateTheme(\n              activeTheme.primary,\n              activeTheme.secondary,\n              activeTheme.background,\n              activeTheme.foreground\n            )\n          : \"\"\n      }\n    `;\n\n    return (\n      <>\n        {activeTheme ? <SetGlobalTheme /> : null}\n        <ThemePickerStyle className={`${ThemePickerClassName}`}>\n          {availableThemes\n            ? availableThemes.map((themeItem: LXLT_Theme, idx: number) => {\n                return (\n                  <div\n                    className={`${ThemePickerClassName}__option ${ThemePickerClassName}__option--${themeItem.name}`}\n                  />\n                );\n              })\n            : null}\n        </ThemePickerStyle>\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}