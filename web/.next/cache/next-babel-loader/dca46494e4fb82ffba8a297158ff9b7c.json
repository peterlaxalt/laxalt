{"ast":null,"code":"import * as THREE from \"three\";\nimport { __DEBUG__ } from \"../../constants/site/Settings\";\nexport const ThreeCanvas = (container, CanvasElement, CanvasTheme) => {\n  __DEBUG__ && console.log(\"ðŸ¤™ Three.js Canvas received:\", CanvasElement);\n  var renderer, scene, camera, sketch, ctx; // @ts-ignore\n\n  renderer = new THREE.WebGLRenderer({\n    container\n  });\n  sketch = container;\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  sketch.appendChild(renderer.domElement);\n  ctx = CanvasElement.getContext(\"2d\");\n  const fov = 75;\n  const aspect = 2; // the canvas default\n\n  const near = 0.1;\n  const far = 5;\n  camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n  camera.position.z = 2;\n  scene = new THREE.Scene();\n  const boxWidth = 1;\n  const boxHeight = 1;\n  const boxDepth = 1;\n  const geometry = new THREE.BoxGeometry(boxWidth, boxHeight, boxDepth);\n  const cubes = []; // just an array we can use to rotate the cubes\n\n  const texture = new THREE.CanvasTexture(ctx.canvas);\n  const material = new THREE.MeshBasicMaterial({\n    map: texture\n  });\n  const cube = new THREE.Mesh(geometry, material);\n  scene.add(cube);\n  scene.background = new THREE.Color(0x0d132a);\n  cubes.push(cube); // add to our list of cubes to rotate\n\n  function resizeRendererToDisplaySize(renderer) {\n    const canvas = renderer.domElement;\n    const width = canvas.clientWidth;\n    const height = canvas.clientHeight;\n    const needResize = canvas.width !== width || canvas.height !== height;\n\n    if (needResize) {\n      renderer.setSize(width, height, false);\n    }\n\n    return needResize;\n  }\n\n  function render(time) {\n    time *= 0.001;\n\n    if (resizeRendererToDisplaySize(renderer)) {\n      const canvas = renderer.domElement;\n      camera.aspect = canvas.clientWidth / canvas.clientHeight;\n      camera.updateProjectionMatrix();\n    }\n\n    texture.needsUpdate = true;\n    cubes.forEach((cube, ndx) => {\n      const speed = 0.2 + ndx * 0.1;\n      const rot = time * speed;\n      cube.rotation.x = rot;\n      cube.rotation.y = rot;\n    });\n    renderer.render(scene, camera);\n    requestAnimationFrame(render);\n  }\n\n  requestAnimationFrame(render);\n};","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/three/with-canvas-as-texture.ts"],"names":["THREE","__DEBUG__","ThreeCanvas","container","CanvasElement","CanvasTheme","console","log","renderer","scene","camera","sketch","ctx","WebGLRenderer","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","appendChild","domElement","getContext","fov","aspect","near","far","PerspectiveCamera","position","z","Scene","boxWidth","boxHeight","boxDepth","geometry","BoxGeometry","cubes","texture","CanvasTexture","canvas","material","MeshBasicMaterial","map","cube","Mesh","add","background","Color","push","resizeRendererToDisplaySize","width","clientWidth","height","clientHeight","needResize","render","time","updateProjectionMatrix","needsUpdate","forEach","ndx","speed","rot","rotation","x","y","requestAnimationFrame"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,+BAA1B;AAYA,OAAO,MAAMC,WAAoC,GAAG,CAClDC,SADkD,EAElDC,aAFkD,EAGlDC,WAHkD,KAI/C;AACHJ,EAAAA,SAAS,IAAIK,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CH,aAA5C,CAAb;AACA,MAAII,QAAJ,EAAcC,KAAd,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,GAArC,CAFG,CAIH;;AACAJ,EAAAA,QAAQ,GAAG,IAAIR,KAAK,CAACa,aAAV,CAAwB;AAAEV,IAAAA;AAAF,GAAxB,CAAX;AAEAQ,EAAAA,MAAM,GAAGR,SAAT;AACAK,EAAAA,QAAQ,CAACM,aAAT,CAAuBC,MAAM,CAACC,gBAA9B;AACAR,EAAAA,QAAQ,CAACS,OAAT,CAAiBF,MAAM,CAACG,UAAxB,EAAoCH,MAAM,CAACI,WAA3C;AACAR,EAAAA,MAAM,CAACS,WAAP,CAAmBZ,QAAQ,CAACa,UAA5B;AAEAT,EAAAA,GAAG,GAAGR,aAAa,CAACkB,UAAd,CAAyB,IAAzB,CAAN;AAEA,QAAMC,GAAG,GAAG,EAAZ;AACA,QAAMC,MAAM,GAAG,CAAf,CAfG,CAee;;AAClB,QAAMC,IAAI,GAAG,GAAb;AACA,QAAMC,GAAG,GAAG,CAAZ;AACAhB,EAAAA,MAAM,GAAG,IAAIV,KAAK,CAAC2B,iBAAV,CAA4BJ,GAA5B,EAAiCC,MAAjC,EAAyCC,IAAzC,EAA+CC,GAA/C,CAAT;AACAhB,EAAAA,MAAM,CAACkB,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;AACApB,EAAAA,KAAK,GAAG,IAAIT,KAAK,CAAC8B,KAAV,EAAR;AACA,QAAMC,QAAQ,GAAG,CAAjB;AACA,QAAMC,SAAS,GAAG,CAAlB;AACA,QAAMC,QAAQ,GAAG,CAAjB;AAEA,QAAMC,QAAQ,GAAG,IAAIlC,KAAK,CAACmC,WAAV,CAAsBJ,QAAtB,EAAgCC,SAAhC,EAA2CC,QAA3C,CAAjB;AACA,QAAMG,KAAK,GAAG,EAAd,CA1BG,CA0Be;;AAElB,QAAMC,OAAO,GAAG,IAAIrC,KAAK,CAACsC,aAAV,CAAwB1B,GAAG,CAAC2B,MAA5B,CAAhB;AAEA,QAAMC,QAAQ,GAAG,IAAIxC,KAAK,CAACyC,iBAAV,CAA4B;AAC3CC,IAAAA,GAAG,EAAEL;AADsC,GAA5B,CAAjB;AAGA,QAAMM,IAAI,GAAG,IAAI3C,KAAK,CAAC4C,IAAV,CAAeV,QAAf,EAAyBM,QAAzB,CAAb;AAEA/B,EAAAA,KAAK,CAACoC,GAAN,CAAUF,IAAV;AACAlC,EAAAA,KAAK,CAACqC,UAAN,GAAmB,IAAI9C,KAAK,CAAC+C,KAAV,CAAgB,QAAhB,CAAnB;AAEAX,EAAAA,KAAK,CAACY,IAAN,CAAWL,IAAX,EAtCG,CAsCe;;AAClB,WAASM,2BAAT,CAAqCzC,QAArC,EAA+C;AAC7C,UAAM+B,MAAM,GAAG/B,QAAQ,CAACa,UAAxB;AACA,UAAM6B,KAAK,GAAGX,MAAM,CAACY,WAArB;AACA,UAAMC,MAAM,GAAGb,MAAM,CAACc,YAAtB;AACA,UAAMC,UAAU,GAAGf,MAAM,CAACW,KAAP,KAAiBA,KAAjB,IAA0BX,MAAM,CAACa,MAAP,KAAkBA,MAA/D;;AACA,QAAIE,UAAJ,EAAgB;AACd9C,MAAAA,QAAQ,CAACS,OAAT,CAAiBiC,KAAjB,EAAwBE,MAAxB,EAAgC,KAAhC;AACD;;AACD,WAAOE,UAAP;AACD;;AACD,WAASC,MAAT,CAAgBC,IAAhB,EAAsB;AACpBA,IAAAA,IAAI,IAAI,KAAR;;AACA,QAAIP,2BAA2B,CAACzC,QAAD,CAA/B,EAA2C;AACzC,YAAM+B,MAAM,GAAG/B,QAAQ,CAACa,UAAxB;AACAX,MAAAA,MAAM,CAACc,MAAP,GAAgBe,MAAM,CAACY,WAAP,GAAqBZ,MAAM,CAACc,YAA5C;AACA3C,MAAAA,MAAM,CAAC+C,sBAAP;AACD;;AACDpB,IAAAA,OAAO,CAACqB,WAAR,GAAsB,IAAtB;AACAtB,IAAAA,KAAK,CAACuB,OAAN,CAAc,CAAChB,IAAD,EAAOiB,GAAP,KAAe;AAC3B,YAAMC,KAAK,GAAG,MAAMD,GAAG,GAAG,GAA1B;AACA,YAAME,GAAG,GAAGN,IAAI,GAAGK,KAAnB;AACAlB,MAAAA,IAAI,CAACoB,QAAL,CAAcC,CAAd,GAAkBF,GAAlB;AACAnB,MAAAA,IAAI,CAACoB,QAAL,CAAcE,CAAd,GAAkBH,GAAlB;AACD,KALD;AAMAtD,IAAAA,QAAQ,CAAC+C,MAAT,CAAgB9C,KAAhB,EAAuBC,MAAvB;AACAwD,IAAAA,qBAAqB,CAACX,MAAD,CAArB;AACD;;AACDW,EAAAA,qBAAqB,CAACX,MAAD,CAArB;AACD,CAvEM","sourcesContent":["import * as THREE from \"three\";\nimport { __DEBUG__ } from \"../../constants/site/Settings\";\nimport { LXLT_ColorTheme } from \"../../constants/styles/Color\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_ThreeCanvasDisplay = (\n  container: HTMLDivElement,\n  CanvasElement: HTMLCanvasElement,\n  CanvasTheme: LXLT_ColorTheme\n) => void;\n\nexport const ThreeCanvas: LXLT_ThreeCanvasDisplay = (\n  container,\n  CanvasElement,\n  CanvasTheme\n) => {\n  __DEBUG__ && console.log(\"ðŸ¤™ Three.js Canvas received:\", CanvasElement);\n  var renderer, scene, camera, sketch, ctx;\n\n  // @ts-ignore\n  renderer = new THREE.WebGLRenderer({ container });\n\n  sketch = container;\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  sketch.appendChild(renderer.domElement);\n\n  ctx = CanvasElement.getContext(\"2d\");\n\n  const fov = 75;\n  const aspect = 2; // the canvas default\n  const near = 0.1;\n  const far = 5;\n  camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n  camera.position.z = 2;\n  scene = new THREE.Scene();\n  const boxWidth = 1;\n  const boxHeight = 1;\n  const boxDepth = 1;\n\n  const geometry = new THREE.BoxGeometry(boxWidth, boxHeight, boxDepth);\n  const cubes = []; // just an array we can use to rotate the cubes\n\n  const texture = new THREE.CanvasTexture(ctx.canvas);\n\n  const material = new THREE.MeshBasicMaterial({\n    map: texture,\n  });\n  const cube = new THREE.Mesh(geometry, material);\n\n  scene.add(cube);\n  scene.background = new THREE.Color(0x0d132a);\n\n  cubes.push(cube); // add to our list of cubes to rotate\n  function resizeRendererToDisplaySize(renderer) {\n    const canvas = renderer.domElement;\n    const width = canvas.clientWidth;\n    const height = canvas.clientHeight;\n    const needResize = canvas.width !== width || canvas.height !== height;\n    if (needResize) {\n      renderer.setSize(width, height, false);\n    }\n    return needResize;\n  }\n  function render(time) {\n    time *= 0.001;\n    if (resizeRendererToDisplaySize(renderer)) {\n      const canvas = renderer.domElement;\n      camera.aspect = canvas.clientWidth / canvas.clientHeight;\n      camera.updateProjectionMatrix();\n    }\n    texture.needsUpdate = true;\n    cubes.forEach((cube, ndx) => {\n      const speed = 0.2 + ndx * 0.1;\n      const rot = time * speed;\n      cube.rotation.x = rot;\n      cube.rotation.y = rot;\n    });\n    renderer.render(scene, camera);\n    requestAnimationFrame(render);\n  }\n  requestAnimationFrame(render);\n};\n"]},"metadata":{},"sourceType":"module"}