{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// ____________________________________________________________________________________\n\n/**\n *\n * @name WaterTexture\n * @see https://tympanus.net/codrops/2019/10/08/creating-a-water-like-distortion-effect-with-three-js/\n *\n */\nexport class WaterTexture {\n  // _________________________________\n  // Types\n  // _________________________________\n  // Constructor\n  constructor(options) {\n    _defineProperty(this, \"size\", void 0);\n\n    _defineProperty(this, \"radius\", void 0);\n\n    _defineProperty(this, \"width\", void 0);\n\n    _defineProperty(this, \"height\", void 0);\n\n    _defineProperty(this, \"canvas\", void 0);\n\n    _defineProperty(this, \"ctx\", void 0);\n\n    _defineProperty(this, \"debug\", void 0);\n\n    _defineProperty(this, \"points\", void 0);\n\n    _defineProperty(this, \"maxAge\", void 0);\n\n    this.size = 64;\n    this.radius = this.size * 0.1;\n    this.width = this.height = this.size;\n    this.size = 64;\n    this.radius = this.size * 0.1;\n    this.points = [];\n    this.maxAge = 64;\n\n    if (options.debug) {\n      this.width = window.innerWidth;\n      this.height = window.innerHeight;\n      this.radius = this.width * 0.05;\n    }\n\n    this.initTexture();\n    if (options.debug) document.body.append(this.canvas);\n  }\n  /**\n   *\n   * @description Initialize our canvas\n   *\n   */\n\n\n  initTexture() {\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.id = \"WaterTexture\";\n    this.canvas.width = this.width;\n    this.canvas.height = this.height;\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.clear();\n  }\n  /**\n   *\n   * @description Note that addPoint() receives normalized values, from 0 to 1.\n   * If the canvas happens to resize, we can use the normalized points to draw using the correct size.\n   *\n   */\n\n\n  addPoint(point) {\n    this.points.push({\n      x: point.x,\n      y: point.y,\n      age: 0\n    });\n  }\n  /**\n   *\n   * @description Let’s create drawPoint(point) to start drawing the ripples:\n   * Convert the normalized point coordinates into canvas coordinates. Then, draw a happy little circle.\n   *\n   */\n\n\n  drawPoint(point) {\n    // Convert normalized position into canvas coordinates\n    let pos = {\n      x: point.x * this.width,\n      y: point.y * this.height\n    };\n    const radius = this.radius;\n    this.ctx.beginPath();\n    this.ctx.arc(pos.x, pos.y, radius, 0, Math.PI * 2);\n    this.ctx.fill();\n    const ctx = this.ctx; // Lower the opacity as it gets older\n\n    let intensity = 1;\n    intensity = 1 - point.age / this.maxAge;\n    let color = \"255,255,255\";\n    let offset = this.width * 5; // 1. Give the shadow a high offset.\n\n    ctx.shadowOffsetX = offset;\n    ctx.shadowOffsetY = offset;\n    ctx.shadowBlur = radius * 1;\n    ctx.shadowColor = `rgba(${color},${0.2 * intensity})`;\n    this.ctx.beginPath();\n    this.ctx.fillStyle = \"rgba(255,0,0,1)\"; // 2. Move the circle to the other direction of the offset\n\n    this.ctx.arc(pos.x - offset, pos.y - offset, radius, 0, Math.PI * 2);\n    this.ctx.fill();\n  }\n\n  clear() {\n    this.ctx.fillStyle = \"black\";\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  update() {\n    this.clear();\n    this.points.forEach(point => {\n      point.age += 1;\n\n      if (point.age > this.maxAge) {\n        this.points.splice(i, 1);\n      }\n    });\n    this.points.forEach(point => {\n      this.drawPoint(point);\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/three/water-distort/WaterTexture.ts"],"names":["WaterTexture","constructor","options","size","radius","width","height","points","maxAge","debug","window","innerWidth","innerHeight","initTexture","document","body","append","canvas","createElement","id","ctx","getContext","clear","addPoint","point","push","x","y","age","drawPoint","pos","beginPath","arc","Math","PI","fill","intensity","color","offset","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","fillStyle","fillRect","update","forEach","splice","i"],"mappings":"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","sourcesContent":["// ____________________________________________________________________________________\n\nexport type LXLT_WaterTexture = {\n  debug?: boolean;\n  size: number;\n  radius: number;\n  width: number;\n  height: number;\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  points: LXLT_WaterTexturePoint[];\n  maxAge: number;\n};\n\nexport type LXLT_WaterTexturePoint = {\n  x: number;\n  y: number;\n  age: number;\n};\n\n/**\n *\n * @name WaterTexture\n * @see https://tympanus.net/codrops/2019/10/08/creating-a-water-like-distortion-effect-with-three-js/\n *\n */\n\nexport class WaterTexture {\n  // _________________________________\n  // Types\n  size: number;\n  radius: number;\n  width: number;\n  height: number;\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  debug?: boolean;\n  points: LXLT_WaterTexturePoint[];\n  maxAge: number;\n\n  // _________________________________\n  // Constructor\n  constructor(options: any) {\n    this.size = 64;\n    this.radius = this.size * 0.1;\n    this.width = this.height = this.size;\n\n    this.size = 64;\n    this.radius = this.size * 0.1;\n\n    this.points = [];\n    this.maxAge = 64;\n\n    if (options.debug) {\n      this.width = window.innerWidth;\n      this.height = window.innerHeight;\n      this.radius = this.width * 0.05;\n    }\n\n    this.initTexture();\n    if (options.debug) document.body.append(this.canvas);\n  }\n\n  /**\n   *\n   * @description Initialize our canvas\n   *\n   */\n  initTexture() {\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.id = \"WaterTexture\";\n    this.canvas.width = this.width;\n    this.canvas.height = this.height;\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.clear();\n  }\n\n  /**\n   *\n   * @description Note that addPoint() receives normalized values, from 0 to 1.\n   * If the canvas happens to resize, we can use the normalized points to draw using the correct size.\n   *\n   */\n\n  addPoint(point: LXLT_WaterTexturePoint) {\n    this.points.push({ x: point.x, y: point.y, age: 0 });\n  }\n\n  /**\n   *\n   * @description Let’s create drawPoint(point) to start drawing the ripples:\n   * Convert the normalized point coordinates into canvas coordinates. Then, draw a happy little circle.\n   *\n   */\n  drawPoint(point: LXLT_WaterTexturePoint) {\n    // Convert normalized position into canvas coordinates\n    let pos = {\n      x: point.x * this.width,\n      y: point.y * this.height,\n    };\n    const radius = this.radius;\n\n    this.ctx.beginPath();\n    this.ctx.arc(pos.x, pos.y, radius, 0, Math.PI * 2);\n    this.ctx.fill();\n\n    const ctx = this.ctx;\n    // Lower the opacity as it gets older\n    let intensity = 1;\n    intensity = 1 - point.age / this.maxAge;\n\n    let color = \"255,255,255\";\n\n    let offset = this.width * 5;\n    // 1. Give the shadow a high offset.\n    ctx.shadowOffsetX = offset;\n    ctx.shadowOffsetY = offset;\n    ctx.shadowBlur = radius * 1;\n    ctx.shadowColor = `rgba(${color},${0.2 * intensity})`;\n\n    this.ctx.beginPath();\n    this.ctx.fillStyle = \"rgba(255,0,0,1)\";\n    // 2. Move the circle to the other direction of the offset\n    this.ctx.arc(pos.x - offset, pos.y - offset, radius, 0, Math.PI * 2);\n    this.ctx.fill();\n  }\n\n  clear() {\n    this.ctx.fillStyle = \"black\";\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  update() {\n    this.clear();\n    this.points.forEach((point) => {\n      point.age += 1;\n      if (point.age > this.maxAge) {\n        this.points.splice(i, 1);\n      }\n    });\n    this.points.forEach((point) => {\n      this.drawPoint(point);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}