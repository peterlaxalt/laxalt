{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\nimport { Theme } from \"../../constants/Theme\"; // Begin Component\n// __________________________________________________________________________\n\nvar DharmaCanvasDisplay = function DharmaCanvasDisplay(W, H, ID, BG) {\n  return function (p) {\n    // _________________________________________________\n    // Config\n    // ____________________________\n    // Fonts\n    var dharmaFont; // ____________________________\n    // Typography\n\n    var text = \"LAXALT\";\n    var splitCharacterArray = text.split(\"\");\n    var characters = splitCharacterArray.map(function (character, idx) {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n        copies: 5,\n        isIncrementing: true,\n        isDecrementing: false\n      };\n    });\n    var characterCount = splitCharacterArray.length;\n    var characterWidth = W / characterCount;\n    var characterSize = H * 1.25;\n    console.log(characterSize, \"characterSize\"); // ____________________________\n    // Counts\n    // let renderCount: number = 0;\n\n    var previousCountUpdateTime = 0;\n    var previousCopyUpdateTime = 0;\n    previousCopyUpdateTime; // ____________________________\n    // Strokes\n\n    var strokeWidth = 4;\n    var strokeOffset = strokeWidth * 1.5; // ____________________________\n    // Incrementing\n\n    var maxCount = 6;\n    var minCount = 1; // ____________________________\n    // Translation\n    // let previousVerticalTranslation: number = H / 2.25;\n\n    var verticalTranslationWhitespaceCompensation = 2.25;\n\n    var previousHorizontalTranslation = function previousHorizontalTranslation(idx) {\n      return -60 + (characterWidth * idx + characterWidth / 1.5 + strokeOffset);\n    }; // const previousHorizontalTranslation = (idx: number) =>\n    //   characterWidth * idx + characterWidth / 2 + strokeOffset * renderCount;\n    // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n    // let characterVerticalTranslation: number = 0.993; // Multiplied by the viewBoxHeight\n    // let characterHorizontalScale: number = 0.75; // Multiplied by the characterWidth\n    // let characterVerticalScale: number = 1.38; // Multiplied by the characterWidth\n    // _________________________________________________\n    // Preload\n\n\n    p.preload = function () {\n      dharmaFont = p.loadFont(\"/fonts/dharma/dharma_regular.ttf\");\n    }; // _________________________________________________\n    // Setup\n\n\n    p.setup = function () {\n      // Our Canvas\n      p.createCanvas(W, H);\n    }; // _________________________________________________\n    // Update Character\n\n\n    var updateCharacter = function updateCharacter(_char, idx) {\n      if (_char.count < maxCount && _char.isIncrementing) {\n        characters[idx] = _objectSpread({}, _char, {\n          count: _char.count + 1\n        });\n        previousCountUpdateTime = p.millis();\n      } else if (_char.count === maxCount) {\n        characters[idx] = _objectSpread({}, _char, {\n          count: _char.count - 1,\n          isIncrementing: false,\n          isDecrementing: true\n        });\n        previousCountUpdateTime = p.millis();\n      } else if (_char.count > minCount && _char.isDecrementing) {\n        characters[idx] = _objectSpread({}, _char, {\n          count: _char.count - 1,\n          isDecrementing: true\n        });\n        previousCountUpdateTime = p.millis();\n      } else if (_char.count === minCount && _char.isDecrementing) {\n        characters[idx] = _objectSpread({}, _char, {\n          count: _char.count + 1,\n          isIncrementing: true,\n          isDecrementing: false\n        });\n        previousCountUpdateTime = p.millis();\n      }\n    }; // _________________________________________________\n    // Draw\n\n\n    p.draw = function () {\n      p.background(BG);\n      p.textFont(dharmaFont);\n      p.textSize(characterSize);\n      p.textAlign(p.CENTER, p.CENTER);\n      p.fill(\"\".concat(Theme.Color.Galaxy));\n      p.strokeWeight(strokeWidth);\n      p.stroke(BG);\n\n      if (H && W) {\n        // _________________________________________\n        // Loop through our copies\n        characters.map(function (_char2, idx) {\n          p.scale(1, 1);\n          var randomCharPick = Math.random() <= 0.5;\n\n          if (randomCharPick && p.millis() - previousCountUpdateTime > 3000) {\n            updateCharacter(_char2, idx);\n          }\n\n          var countArray = _Array$from(Array(_char2.count).keys());\n\n          countArray = countArray.map(function (countNumber) {\n            return countNumber + 1;\n          }); // _________________________________________\n          // Duplicate positions\n\n          countArray.map(function (countNumber, idxx) {\n            var verticalScale = 1 / (_char2.count * 0.95);\n            var verticalSkewDivisible = 2.75;\n            var characterSkewDivisible = 1.36;\n            var duplicateVerticalPosition = _char2.count == 1 ? H / verticalTranslationWhitespaceCompensation : characterSize / verticalSkewDivisible + characterSize / characterSkewDivisible * idxx; // _________________________________________\n            // Make copies\n\n            var copiesArray = _Array$from(Array(_char2.copies).keys()); // let randomCopyPick = Math.random() <= 0.5;\n\n\n            copiesArray = copiesArray.map(function (copyNumber) {\n              return copyNumber + 1;\n            });\n            var randomCopyPick = Math.random() <= 0.5;\n            copiesArray.map(function (copyNumber, idxxx) {\n              // let centerCoordsX = W / 2;\n              // let centerCoordsY = H / 2;\n              // let horizontalTranslate =\n              //   copyNumber !== 1\n              //     ? (previousHorizontalTranslation(idx) +\n              //         (strokeOffset / (p.mouseX / 100)) * copyNumber)\n              //     : previousHorizontalTranslation(idx) +\n              //       strokeOffset * copyNumber;\n              // let verticalTranslate =\n              //   copyNumber !== 1\n              //     ? (duplicateVerticalPosition - (strokeOffset / (p.mouseX / 100)) * copyNumber)\n              //     : duplicateVerticalPosition - strokeOffset * copyNumber;\n              var horizontalTranslate = previousHorizontalTranslation(idx) + strokeOffset * copyNumber;\n              var verticalTranslate = duplicateVerticalPosition - strokeOffset * copyNumber;\n\n              if (copyNumber === 1) {\n                p.push();\n                p.scale(1, verticalScale);\n                p.text(_char2.letter, horizontalTranslate, verticalTranslate);\n                p.pop();\n                previousCopyUpdateTime = p.millis();\n              } else if (randomCopyPick) {\n                p.push();\n                p.scale(1, verticalScale);\n                p.text(_char2.letter, horizontalTranslate, verticalTranslate);\n                p.pop();\n                previousCopyUpdateTime = p.millis();\n              } else {\n                return null;\n              }\n            });\n          });\n        });\n      }\n    };\n\n    p.windowResized = function () {\n      p.resizeCanvas(W, H);\n    };\n  };\n};\n\nexport default DharmaCanvasDisplay;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/dharma.tsx"],"names":["Theme","DharmaCanvasDisplay","W","H","ID","BG","p","dharmaFont","text","splitCharacterArray","split","characters","map","character","idx","letter","count","copies","isIncrementing","isDecrementing","characterCount","length","characterWidth","characterSize","console","log","previousCountUpdateTime","previousCopyUpdateTime","strokeWidth","strokeOffset","maxCount","minCount","verticalTranslationWhitespaceCompensation","previousHorizontalTranslation","preload","loadFont","setup","createCanvas","updateCharacter","char","millis","draw","background","textFont","textSize","textAlign","CENTER","fill","Color","Galaxy","strokeWeight","stroke","scale","randomCharPick","Math","random","countArray","Array","keys","countNumber","idxx","verticalScale","verticalSkewDivisible","characterSkewDivisible","duplicateVerticalPosition","copiesArray","copyNumber","randomCopyPick","idxxx","horizontalTranslate","verticalTranslate","push","pop","windowResized","resizeCanvas"],"mappings":"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","sourcesContent":["/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n\nimport p5, { Font } from \"p5\";\nimport { Theme } from \"../../constants/Theme\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_DharmaCanvas = {\n  W: number;\n  H: number;\n  ID: number;\n  BG: string;\n};\n\nexport type LXLT_DharmaCanvasDisplay = (\n  W: number,\n  H: number,\n  ID: number,\n  BG: string\n) => (p: p5) => void;\n\ntype LXLT_DharmaCanvasChar = {\n  letter: string;\n  count: number;\n  idx: number;\n\n  copies: number;\n\n  isIncrementing: boolean;\n  isDecrementing: boolean;\n};\n\nconst DharmaCanvasDisplay: LXLT_DharmaCanvasDisplay = (W, H, ID, BG) => (\n  p: p5\n) => {\n  // _________________________________________________\n  // Config\n\n  // ____________________________\n  // Fonts\n  let dharmaFont: Font;\n\n  // ____________________________\n  // Typography\n  let text = \"LAXALT\";\n\n  let splitCharacterArray = text.split(\"\");\n  let characters: LXLT_DharmaCanvasChar[] = splitCharacterArray.map(\n    (character: string, idx: number) => {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n\n        copies: 5,\n\n        isIncrementing: true,\n        isDecrementing: false,\n      };\n    }\n  );\n\n  let characterCount: number = splitCharacterArray.length;\n  let characterWidth: number = W / characterCount;\n  let characterSize: number = H * 1.25;\n\n  console.log(characterSize, \"characterSize\");\n\n  // ____________________________\n  // Counts\n  // let renderCount: number = 0;\n  let previousCountUpdateTime: number = 0;\n  let previousCopyUpdateTime: number = 0;\n  previousCopyUpdateTime;\n\n  // ____________________________\n  // Strokes\n  let strokeWidth: number = 4;\n  let strokeOffset: number = strokeWidth * 1.5;\n\n  // ____________________________\n  // Incrementing\n  let maxCount = 6;\n  let minCount = 1;\n\n  // ____________________________\n  // Translation\n  // let previousVerticalTranslation: number = H / 2.25;\n\n  let verticalTranslationWhitespaceCompensation: number = 2.25;\n  const previousHorizontalTranslation = (idx: number) =>\n    -60 + (characterWidth * idx + characterWidth / 1.5 + strokeOffset);\n\n  // const previousHorizontalTranslation = (idx: number) =>\n  //   characterWidth * idx + characterWidth / 2 + strokeOffset * renderCount;\n\n  // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n  // let characterVerticalTranslation: number = 0.993; // Multiplied by the viewBoxHeight\n  // let characterHorizontalScale: number = 0.75; // Multiplied by the characterWidth\n  // let characterVerticalScale: number = 1.38; // Multiplied by the characterWidth\n\n  // _________________________________________________\n  // Preload\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  };\n\n  // _________________________________________________\n  // Setup\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H);\n  };\n\n  // _________________________________________________\n  // Update Character\n  const updateCharacter = (char: LXLT_DharmaCanvasChar, idx: number) => {\n    if (char.count < maxCount && char.isIncrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count + 1,\n      };\n\n      previousCountUpdateTime = p.millis();\n    } else if (char.count === maxCount) {\n      characters[idx] = {\n        ...char,\n        count: char.count - 1,\n        isIncrementing: false,\n        isDecrementing: true,\n      };\n\n      previousCountUpdateTime = p.millis();\n    } else if (char.count > minCount && char.isDecrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count - 1,\n        isDecrementing: true,\n      };\n\n      previousCountUpdateTime = p.millis();\n    } else if (char.count === minCount && char.isDecrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count + 1,\n        isIncrementing: true,\n        isDecrementing: false,\n      };\n\n      previousCountUpdateTime = p.millis();\n    }\n  };\n\n  // _________________________________________________\n  // Draw\n  p.draw = () => {\n    p.background(BG);\n\n    p.textFont(dharmaFont);\n\n    p.textSize(characterSize);\n\n    p.textAlign(p.CENTER, p.CENTER);\n\n    p.fill(`${Theme.Color.Galaxy}`);\n    p.strokeWeight(strokeWidth);\n    p.stroke(BG);\n\n    if (H && W) {\n      // _________________________________________\n      // Loop through our copies\n      characters.map((char: LXLT_DharmaCanvasChar, idx: number) => {\n        p.scale(1, 1);\n\n        let randomCharPick = Math.random() <= 0.5;\n\n        if (randomCharPick && p.millis() - previousCountUpdateTime > 3000) {\n          updateCharacter(char, idx);\n        }\n\n        let countArray: number[] = Array.from(Array(char.count).keys());\n\n        countArray = countArray.map((countNumber: number) => {\n          return countNumber + 1;\n        });\n\n        // _________________________________________\n        // Duplicate positions\n        countArray.map((countNumber: number, idxx: number) => {\n          let verticalScale = 1 / (char.count * 0.95);\n\n          let verticalSkewDivisible: number = 2.75;\n          let characterSkewDivisible: number = 1.36;\n\n          let duplicateVerticalPosition: number =\n            char.count == 1\n              ? H / verticalTranslationWhitespaceCompensation\n              : characterSize / verticalSkewDivisible +\n                (characterSize / characterSkewDivisible) * idxx;\n\n          // _________________________________________\n          // Make copies\n          let copiesArray: number[] = Array.from(Array(char.copies).keys());\n          // let randomCopyPick = Math.random() <= 0.5;\n\n          copiesArray = copiesArray.map((copyNumber: number) => {\n            return copyNumber + 1;\n          });\n\n          let randomCopyPick = Math.random() <= 0.5;\n\n          copiesArray.map((copyNumber: number, idxxx: number) => {\n            // let centerCoordsX = W / 2;\n            // let centerCoordsY = H / 2;\n\n            // let horizontalTranslate =\n            //   copyNumber !== 1\n            //     ? (previousHorizontalTranslation(idx) +\n            //         (strokeOffset / (p.mouseX / 100)) * copyNumber)\n            //     : previousHorizontalTranslation(idx) +\n            //       strokeOffset * copyNumber;\n\n            // let verticalTranslate =\n            //   copyNumber !== 1\n            //     ? (duplicateVerticalPosition - (strokeOffset / (p.mouseX / 100)) * copyNumber)\n            //     : duplicateVerticalPosition - strokeOffset * copyNumber;\n\n            let horizontalTranslate =\n              previousHorizontalTranslation(idx) + strokeOffset * copyNumber;\n\n            let verticalTranslate =\n              duplicateVerticalPosition - strokeOffset * copyNumber;\n\n            if (copyNumber === 1) {\n              p.push();\n              p.scale(1, verticalScale);\n              p.text(char.letter, horizontalTranslate, verticalTranslate);\n              p.pop();\n\n              previousCopyUpdateTime = p.millis();\n            } else if (randomCopyPick) {\n              p.push();\n              p.scale(1, verticalScale);\n              p.text(char.letter, horizontalTranslate, verticalTranslate);\n              p.pop();\n\n              previousCopyUpdateTime = p.millis();\n            } else {\n              return null;\n            }\n          });\n        });\n      });\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;\n"]},"metadata":{},"sourceType":"module"}