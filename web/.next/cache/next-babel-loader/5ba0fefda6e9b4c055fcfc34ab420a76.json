{"ast":null,"code":"/**\n *\n * Flow Field\n * @author Peter Laxalt\n *\n */\n// Begin Component\n//////////////////////////////////////////////////////////////////////\nvar Sketch = function Sketch(windowWidth, windowHeight) {\n  var canvas;\n  var ctx;\n  var field;\n  var w, h;\n  var size;\n  var columns;\n  var rows;\n  var noiseZ;\n\n  function setup() {\n    size = 20;\n    noiseZ = 0;\n    canvas = document.querySelector(\"#canvas\");\n    ctx = canvas.getContext(\"2d\");\n    reset();\n    window.addEventListener(\"resize\", reset);\n  }\n\n  function initField() {\n    field = new Array(columns);\n\n    for (var x = 0; x < columns; x++) {\n      field[x] = new Array(columns);\n\n      for (var y = 0; y < rows; y++) {\n        field[x][y] = [0, 0];\n      }\n    }\n  }\n\n  function calculateField() {\n    for (var x = 0; x < columns; x++) {\n      for (var y = 0; y < rows; y++) {\n        var angle = noise.simplex3(x / 50, y / 50, noiseZ) * Math.PI * 2;\n        var length = noise.simplex3(x / 100 + 40000, y / 100 + 40000, noiseZ);\n        field[x][y][0] = angle;\n        field[x][y][1] = length;\n      }\n    }\n  }\n\n  function reset() {\n    w = canvas.width = windowWidth;\n    h = canvas.height = windowHeight;\n    noise.seed(Math.random());\n    columns = Math.floor(w / size) + 1;\n    rows = Math.floor(h / size) + 1;\n    initField();\n  }\n\n  function draw() {\n    requestAnimationFrame(draw);\n    calculateField();\n    noiseZ += 0.004;\n    clear();\n    drawField();\n  }\n\n  function clear() {\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(0, 0, w, h);\n  }\n\n  function drawField() {\n    for (var x = 0; x < columns; x++) {\n      for (var y = 0; y < rows; y++) {\n        var angle = field[x][y][0];\n        var length = field[x][y][1];\n        ctx.save();\n        ctx.translate(x * size, y * size);\n        ctx.rotate(angle);\n        ctx.strokeStyle = \"white\";\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(0, size * length);\n        ctx.stroke();\n        ctx.restore();\n      }\n    }\n  }\n\n  setup();\n  draw();\n};\n/*\n * A speed-improved perlin and simplex noise algorithms for 2D.\n *\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n * Converted to Javascript by Joseph Gentle.\n *\n * Version 2012-03-09\n *\n * This code was placed in the public domain by its original author,\n * Stefan Gustavson. You may use it as you see fit, but\n * attribution is appreciated.\n *\n */\n\n\n(function (global) {\n  var module = global.noise = {};\n\n  function Grad(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  Grad.prototype.dot2 = function (x, y) {\n    return this.x * x + this.y * y;\n  };\n\n  Grad.prototype.dot3 = function (x, y, z) {\n    return this.x * x + this.y * y + this.z * z;\n  };\n\n  var grad3 = [new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0), new Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1), new Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)];\n  var p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180]; // To remove the need for index wrapping, double the permutation table length\n\n  var perm = new Array(512);\n  var gradP = new Array(512); // This isn't a very good seeding function, but it works ok. It supports 2^16\n  // different seed values. Write something better if you need more seeds.\n\n  module.seed = function (seed) {\n    if (seed > 0 && seed < 1) {\n      // Scale the seed out\n      seed *= 65536;\n    }\n\n    seed = Math.floor(seed);\n\n    if (seed < 256) {\n      seed |= seed << 8;\n    }\n\n    for (var i = 0; i < 256; i++) {\n      var v;\n\n      if (i & 1) {\n        v = p[i] ^ seed & 255;\n      } else {\n        v = p[i] ^ seed >> 8 & 255;\n      }\n\n      perm[i] = perm[i + 256] = v;\n      gradP[i] = gradP[i + 256] = grad3[v % 12];\n    }\n  };\n\n  module.seed(0);\n  /*\n  for(var i=0; i<256; i++) {\n    perm[i] = perm[i + 256] = p[i];\n    gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n  }*/\n  // Skewing and unskewing factors for 2, 3, and 4 dimensions\n\n  var F2 = 0.5 * (Math.sqrt(3) - 1);\n  var G2 = (3 - Math.sqrt(3)) / 6;\n  var F3 = 1 / 3;\n  var G3 = 1 / 6; // 2D simplex noise\n\n  module.simplex2 = function (xin, yin) {\n    var n0, n1, n2; // Noise contributions from the three corners\n    // Skew the input space to determine which simplex cell we're in\n\n    var s = (xin + yin) * F2; // Hairy factor for 2D\n\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var t = (i + j) * G2;\n    var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n\n    var y0 = yin - j + t; // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n\n    var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n    if (x0 > y0) {\n      // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      i1 = 1;\n      j1 = 0;\n    } else {\n      // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      i1 = 0;\n      j1 = 1;\n    } // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n\n\n    var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\n    var y1 = y0 - j1 + G2;\n    var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n\n    var y2 = y0 - 1 + 2 * G2; // Work out the hashed gradient indices of the three simplex corners\n\n    i &= 255;\n    j &= 255;\n    var gi0 = gradP[i + perm[j]];\n    var gi1 = gradP[i + i1 + perm[j + j1]];\n    var gi2 = gradP[i + 1 + perm[j + 1]]; // Calculate the contribution from the three corners\n\n    var t0 = 0.5 - x0 * x0 - y0 * y0;\n\n    if (t0 < 0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot2(x0, y0); // (x,y) of grad3 used for 2D gradient\n    }\n\n    var t1 = 0.5 - x1 * x1 - y1 * y1;\n\n    if (t1 < 0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot2(x1, y1);\n    }\n\n    var t2 = 0.5 - x2 * x2 - y2 * y2;\n\n    if (t2 < 0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot2(x2, y2);\n    } // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n\n\n    return 70 * (n0 + n1 + n2);\n  }; // 3D simplex noise\n\n\n  module.simplex3 = function (xin, yin, zin) {\n    var n0, n1, n2, n3; // Noise contributions from the four corners\n    // Skew the input space to determine which simplex cell we're in\n\n    var s = (xin + yin + zin) * F3; // Hairy factor for 2D\n\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var k = Math.floor(zin + s);\n    var t = (i + j + k) * G3;\n    var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n\n    var y0 = yin - j + t;\n    var z0 = zin - k + t; // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n\n    var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n\n    var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n\n    if (x0 >= y0) {\n      if (y0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      } else if (x0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      } else {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      }\n    } else {\n      if (y0 < z0) {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } else if (x0 < z0) {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } else {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      }\n    } // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n\n\n    var x1 = x0 - i1 + G3; // Offsets for second corner\n\n    var y1 = y0 - j1 + G3;\n    var z1 = z0 - k1 + G3;\n    var x2 = x0 - i2 + 2 * G3; // Offsets for third corner\n\n    var y2 = y0 - j2 + 2 * G3;\n    var z2 = z0 - k2 + 2 * G3;\n    var x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\n\n    var y3 = y0 - 1 + 3 * G3;\n    var z3 = z0 - 1 + 3 * G3; // Work out the hashed gradient indices of the four simplex corners\n\n    i &= 255;\n    j &= 255;\n    k &= 255;\n    var gi0 = gradP[i + perm[j + perm[k]]];\n    var gi1 = gradP[i + i1 + perm[j + j1 + perm[k + k1]]];\n    var gi2 = gradP[i + i2 + perm[j + j2 + perm[k + k2]]];\n    var gi3 = gradP[i + 1 + perm[j + 1 + perm[k + 1]]]; // Calculate the contribution from the four corners\n\n    var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\n    if (t0 < 0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot3(x0, y0, z0); // (x,y) of grad3 used for 2D gradient\n    }\n\n    var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\n    if (t1 < 0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n    }\n\n    var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\n    if (t2 < 0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n    }\n\n    var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\n    if (t3 < 0) {\n      n3 = 0;\n    } else {\n      t3 *= t3;\n      n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n    } // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n\n\n    return 32 * (n0 + n1 + n2 + n3);\n  }; // ##### Perlin noise stuff\n\n\n  function fade(t) {\n    return t * t * t * (t * (t * 6 - 15) + 10);\n  }\n\n  function lerp(a, b, t) {\n    return (1 - t) * a + t * b;\n  } // 2D Perlin Noise\n\n\n  module.perlin2 = function (x, y) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x),\n        Y = Math.floor(y); // Get relative xy coordinates of point within that cell\n\n    x = x - X;\n    y = y - Y; // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n\n    X = X & 255;\n    Y = Y & 255; // Calculate noise contributions from each of the four corners\n\n    var n00 = gradP[X + perm[Y]].dot2(x, y);\n    var n01 = gradP[X + perm[Y + 1]].dot2(x, y - 1);\n    var n10 = gradP[X + 1 + perm[Y]].dot2(x - 1, y);\n    var n11 = gradP[X + 1 + perm[Y + 1]].dot2(x - 1, y - 1); // Compute the fade curve value for x\n\n    var u = fade(x); // Interpolate the four results\n\n    return lerp(lerp(n00, n10, u), lerp(n01, n11, u), fade(y));\n  }; // 3D Perlin Noise\n\n\n  module.perlin3 = function (x, y, z) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x),\n        Y = Math.floor(y),\n        Z = Math.floor(z); // Get relative xyz coordinates of point within that cell\n\n    x = x - X;\n    y = y - Y;\n    z = z - Z; // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n\n    X = X & 255;\n    Y = Y & 255;\n    Z = Z & 255; // Calculate noise contributions from each of the eight corners\n\n    var n000 = gradP[X + perm[Y + perm[Z]]].dot3(x, y, z);\n    var n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x, y, z - 1);\n    var n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x, y - 1, z);\n    var n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x, y - 1, z - 1);\n    var n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x - 1, y, z);\n    var n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x - 1, y, z - 1);\n    var n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x - 1, y - 1, z);\n    var n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(x - 1, y - 1, z - 1); // Compute the fade curve value for x, y, z\n\n    var u = fade(x);\n    var v = fade(y);\n    var w = fade(z); // Interpolate\n\n    return lerp(lerp(lerp(n000, n100, u), lerp(n001, n101, u), w), lerp(lerp(n010, n110, u), lerp(n011, n111, u), w), v);\n  };\n})(this);\n\nexport default Sketch;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/d8.js"],"names":["Sketch","windowWidth","windowHeight","canvas","ctx","field","w","h","size","columns","rows","noiseZ","setup","document","querySelector","getContext","reset","window","addEventListener","initField","Array","x","y","calculateField","angle","noise","simplex3","Math","PI","length","width","height","seed","random","floor","draw","requestAnimationFrame","clear","drawField","fillStyle","fillRect","save","translate","rotate","strokeStyle","beginPath","moveTo","lineTo","stroke","restore","global","module","Grad","z","prototype","dot2","dot3","grad3","p","perm","gradP","i","v","F2","sqrt","G2","F3","G3","simplex2","xin","yin","n0","n1","n2","s","j","t","x0","y0","i1","j1","x1","y1","x2","y2","gi0","gi1","gi2","t0","t1","t2","zin","n3","k","z0","k1","i2","j2","k2","z1","z2","x3","y3","z3","gi3","t3","fade","lerp","a","b","perlin2","X","Y","n00","n01","n10","n11","u","perlin3","Z","n000","n001","n010","n011","n100","n101","n110","n111"],"mappings":"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","sourcesContent":["/**\n *\n * Flow Field\n * @author Peter Laxalt\n *\n */\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst Sketch = (windowWidth, windowHeight) => {\n  let canvas;\n  let ctx;\n  let field;\n  let w, h;\n  let size;\n  let columns;\n  let rows;\n  let noiseZ;\n\n  function setup() {\n    size = 20;\n    noiseZ = 0;\n    canvas = document.querySelector(\"#canvas\");\n    ctx = canvas.getContext(\"2d\");\n    reset();\n    window.addEventListener(\"resize\", reset);\n  }\n\n  function initField() {\n    field = new Array(columns);\n    for (let x = 0; x < columns; x++) {\n      field[x] = new Array(columns);\n      for (let y = 0; y < rows; y++) {\n        field[x][y] = [0, 0];\n      }\n    }\n  }\n\n  function calculateField() {\n    for (let x = 0; x < columns; x++) {\n      for (let y = 0; y < rows; y++) {\n        let angle = noise.simplex3(x / 50, y / 50, noiseZ) * Math.PI * 2;\n        let length = noise.simplex3(x / 100 + 40000, y / 100 + 40000, noiseZ);\n        field[x][y][0] = angle;\n        field[x][y][1] = length;\n      }\n    }\n  }\n\n  function reset() {\n    w = canvas.width = windowWidth;\n    h = canvas.height = windowHeight;\n    noise.seed(Math.random());\n    columns = Math.floor(w / size) + 1;\n    rows = Math.floor(h / size) + 1;\n    initField();\n  }\n\n  function draw() {\n    requestAnimationFrame(draw);\n    calculateField();\n    noiseZ += 0.004;\n    clear();\n    drawField();\n  }\n\n  function clear() {\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(0, 0, w, h);\n  }\n\n  function drawField() {\n    for (let x = 0; x < columns; x++) {\n      for (let y = 0; y < rows; y++) {\n        let angle = field[x][y][0];\n        let length = field[x][y][1];\n        ctx.save();\n        ctx.translate(x * size, y * size);\n        ctx.rotate(angle);\n        ctx.strokeStyle = \"white\";\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(0, size * length);\n        ctx.stroke();\n        ctx.restore();\n      }\n    }\n  }\n\n  setup();\n  draw();\n};\n\n/*\n * A speed-improved perlin and simplex noise algorithms for 2D.\n *\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n * Converted to Javascript by Joseph Gentle.\n *\n * Version 2012-03-09\n *\n * This code was placed in the public domain by its original author,\n * Stefan Gustavson. You may use it as you see fit, but\n * attribution is appreciated.\n *\n */\n\n(function(global) {\n  var module = (global.noise = {});\n\n  function Grad(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  Grad.prototype.dot2 = function(x, y) {\n    return this.x * x + this.y * y;\n  };\n\n  Grad.prototype.dot3 = function(x, y, z) {\n    return this.x * x + this.y * y + this.z * z;\n  };\n\n  var grad3 = [\n    new Grad(1, 1, 0),\n    new Grad(-1, 1, 0),\n    new Grad(1, -1, 0),\n    new Grad(-1, -1, 0),\n    new Grad(1, 0, 1),\n    new Grad(-1, 0, 1),\n    new Grad(1, 0, -1),\n    new Grad(-1, 0, -1),\n    new Grad(0, 1, 1),\n    new Grad(0, -1, 1),\n    new Grad(0, 1, -1),\n    new Grad(0, -1, -1)\n  ];\n\n  var p = [\n    151,\n    160,\n    137,\n    91,\n    90,\n    15,\n    131,\n    13,\n    201,\n    95,\n    96,\n    53,\n    194,\n    233,\n    7,\n    225,\n    140,\n    36,\n    103,\n    30,\n    69,\n    142,\n    8,\n    99,\n    37,\n    240,\n    21,\n    10,\n    23,\n    190,\n    6,\n    148,\n    247,\n    120,\n    234,\n    75,\n    0,\n    26,\n    197,\n    62,\n    94,\n    252,\n    219,\n    203,\n    117,\n    35,\n    11,\n    32,\n    57,\n    177,\n    33,\n    88,\n    237,\n    149,\n    56,\n    87,\n    174,\n    20,\n    125,\n    136,\n    171,\n    168,\n    68,\n    175,\n    74,\n    165,\n    71,\n    134,\n    139,\n    48,\n    27,\n    166,\n    77,\n    146,\n    158,\n    231,\n    83,\n    111,\n    229,\n    122,\n    60,\n    211,\n    133,\n    230,\n    220,\n    105,\n    92,\n    41,\n    55,\n    46,\n    245,\n    40,\n    244,\n    102,\n    143,\n    54,\n    65,\n    25,\n    63,\n    161,\n    1,\n    216,\n    80,\n    73,\n    209,\n    76,\n    132,\n    187,\n    208,\n    89,\n    18,\n    169,\n    200,\n    196,\n    135,\n    130,\n    116,\n    188,\n    159,\n    86,\n    164,\n    100,\n    109,\n    198,\n    173,\n    186,\n    3,\n    64,\n    52,\n    217,\n    226,\n    250,\n    124,\n    123,\n    5,\n    202,\n    38,\n    147,\n    118,\n    126,\n    255,\n    82,\n    85,\n    212,\n    207,\n    206,\n    59,\n    227,\n    47,\n    16,\n    58,\n    17,\n    182,\n    189,\n    28,\n    42,\n    223,\n    183,\n    170,\n    213,\n    119,\n    248,\n    152,\n    2,\n    44,\n    154,\n    163,\n    70,\n    221,\n    153,\n    101,\n    155,\n    167,\n    43,\n    172,\n    9,\n    129,\n    22,\n    39,\n    253,\n    19,\n    98,\n    108,\n    110,\n    79,\n    113,\n    224,\n    232,\n    178,\n    185,\n    112,\n    104,\n    218,\n    246,\n    97,\n    228,\n    251,\n    34,\n    242,\n    193,\n    238,\n    210,\n    144,\n    12,\n    191,\n    179,\n    162,\n    241,\n    81,\n    51,\n    145,\n    235,\n    249,\n    14,\n    239,\n    107,\n    49,\n    192,\n    214,\n    31,\n    181,\n    199,\n    106,\n    157,\n    184,\n    84,\n    204,\n    176,\n    115,\n    121,\n    50,\n    45,\n    127,\n    4,\n    150,\n    254,\n    138,\n    236,\n    205,\n    93,\n    222,\n    114,\n    67,\n    29,\n    24,\n    72,\n    243,\n    141,\n    128,\n    195,\n    78,\n    66,\n    215,\n    61,\n    156,\n    180\n  ];\n  // To remove the need for index wrapping, double the permutation table length\n  var perm = new Array(512);\n  var gradP = new Array(512);\n\n  // This isn't a very good seeding function, but it works ok. It supports 2^16\n  // different seed values. Write something better if you need more seeds.\n  module.seed = function(seed) {\n    if (seed > 0 && seed < 1) {\n      // Scale the seed out\n      seed *= 65536;\n    }\n\n    seed = Math.floor(seed);\n    if (seed < 256) {\n      seed |= seed << 8;\n    }\n\n    for (var i = 0; i < 256; i++) {\n      var v;\n      if (i & 1) {\n        v = p[i] ^ (seed & 255);\n      } else {\n        v = p[i] ^ ((seed >> 8) & 255);\n      }\n\n      perm[i] = perm[i + 256] = v;\n      gradP[i] = gradP[i + 256] = grad3[v % 12];\n    }\n  };\n\n  module.seed(0);\n\n  /*\n  for(var i=0; i<256; i++) {\n    perm[i] = perm[i + 256] = p[i];\n    gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n  }*/\n\n  // Skewing and unskewing factors for 2, 3, and 4 dimensions\n  var F2 = 0.5 * (Math.sqrt(3) - 1);\n  var G2 = (3 - Math.sqrt(3)) / 6;\n\n  var F3 = 1 / 3;\n  var G3 = 1 / 6;\n\n  // 2D simplex noise\n  module.simplex2 = function(xin, yin) {\n    var n0, n1, n2; // Noise contributions from the three corners\n    // Skew the input space to determine which simplex cell we're in\n    var s = (xin + yin) * F2; // Hairy factor for 2D\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var t = (i + j) * G2;\n    var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n    var y0 = yin - j + t;\n    // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n    var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n    if (x0 > y0) {\n      // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      i1 = 1;\n      j1 = 0;\n    } else {\n      // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      i1 = 0;\n      j1 = 1;\n    }\n    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n    var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n    var y1 = y0 - j1 + G2;\n    var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n    var y2 = y0 - 1 + 2 * G2;\n    // Work out the hashed gradient indices of the three simplex corners\n    i &= 255;\n    j &= 255;\n    var gi0 = gradP[i + perm[j]];\n    var gi1 = gradP[i + i1 + perm[j + j1]];\n    var gi2 = gradP[i + 1 + perm[j + 1]];\n    // Calculate the contribution from the three corners\n    var t0 = 0.5 - x0 * x0 - y0 * y0;\n    if (t0 < 0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot2(x0, y0); // (x,y) of grad3 used for 2D gradient\n    }\n    var t1 = 0.5 - x1 * x1 - y1 * y1;\n    if (t1 < 0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot2(x1, y1);\n    }\n    var t2 = 0.5 - x2 * x2 - y2 * y2;\n    if (t2 < 0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot2(x2, y2);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 70 * (n0 + n1 + n2);\n  };\n\n  // 3D simplex noise\n  module.simplex3 = function(xin, yin, zin) {\n    var n0, n1, n2, n3; // Noise contributions from the four corners\n\n    // Skew the input space to determine which simplex cell we're in\n    var s = (xin + yin + zin) * F3; // Hairy factor for 2D\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var k = Math.floor(zin + s);\n\n    var t = (i + j + k) * G3;\n    var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n    var y0 = yin - j + t;\n    var z0 = zin - k + t;\n\n    // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n    var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n    var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n    if (x0 >= y0) {\n      if (y0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      } else if (x0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      } else {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      }\n    } else {\n      if (y0 < z0) {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } else if (x0 < z0) {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } else {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      }\n    }\n    // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n    var x1 = x0 - i1 + G3; // Offsets for second corner\n    var y1 = y0 - j1 + G3;\n    var z1 = z0 - k1 + G3;\n\n    var x2 = x0 - i2 + 2 * G3; // Offsets for third corner\n    var y2 = y0 - j2 + 2 * G3;\n    var z2 = z0 - k2 + 2 * G3;\n\n    var x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\n    var y3 = y0 - 1 + 3 * G3;\n    var z3 = z0 - 1 + 3 * G3;\n\n    // Work out the hashed gradient indices of the four simplex corners\n    i &= 255;\n    j &= 255;\n    k &= 255;\n    var gi0 = gradP[i + perm[j + perm[k]]];\n    var gi1 = gradP[i + i1 + perm[j + j1 + perm[k + k1]]];\n    var gi2 = gradP[i + i2 + perm[j + j2 + perm[k + k2]]];\n    var gi3 = gradP[i + 1 + perm[j + 1 + perm[k + 1]]];\n\n    // Calculate the contribution from the four corners\n    var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n    if (t0 < 0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot3(x0, y0, z0); // (x,y) of grad3 used for 2D gradient\n    }\n    var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n    if (t1 < 0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n    }\n    var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n    if (t2 < 0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n    }\n    var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n    if (t3 < 0) {\n      n3 = 0;\n    } else {\n      t3 *= t3;\n      n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 32 * (n0 + n1 + n2 + n3);\n  };\n\n  // ##### Perlin noise stuff\n\n  function fade(t) {\n    return t * t * t * (t * (t * 6 - 15) + 10);\n  }\n\n  function lerp(a, b, t) {\n    return (1 - t) * a + t * b;\n  }\n\n  // 2D Perlin Noise\n  module.perlin2 = function(x, y) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x),\n      Y = Math.floor(y);\n    // Get relative xy coordinates of point within that cell\n    x = x - X;\n    y = y - Y;\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n    X = X & 255;\n    Y = Y & 255;\n\n    // Calculate noise contributions from each of the four corners\n    var n00 = gradP[X + perm[Y]].dot2(x, y);\n    var n01 = gradP[X + perm[Y + 1]].dot2(x, y - 1);\n    var n10 = gradP[X + 1 + perm[Y]].dot2(x - 1, y);\n    var n11 = gradP[X + 1 + perm[Y + 1]].dot2(x - 1, y - 1);\n\n    // Compute the fade curve value for x\n    var u = fade(x);\n\n    // Interpolate the four results\n    return lerp(lerp(n00, n10, u), lerp(n01, n11, u), fade(y));\n  };\n\n  // 3D Perlin Noise\n  module.perlin3 = function(x, y, z) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x),\n      Y = Math.floor(y),\n      Z = Math.floor(z);\n    // Get relative xyz coordinates of point within that cell\n    x = x - X;\n    y = y - Y;\n    z = z - Z;\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n    X = X & 255;\n    Y = Y & 255;\n    Z = Z & 255;\n\n    // Calculate noise contributions from each of the eight corners\n    var n000 = gradP[X + perm[Y + perm[Z]]].dot3(x, y, z);\n    var n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x, y, z - 1);\n    var n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x, y - 1, z);\n    var n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x, y - 1, z - 1);\n    var n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x - 1, y, z);\n    var n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x - 1, y, z - 1);\n    var n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x - 1, y - 1, z);\n    var n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(\n      x - 1,\n      y - 1,\n      z - 1\n    );\n\n    // Compute the fade curve value for x, y, z\n    var u = fade(x);\n    var v = fade(y);\n    var w = fade(z);\n\n    // Interpolate\n    return lerp(\n      lerp(lerp(n000, n100, u), lerp(n001, n101, u), w),\n      lerp(lerp(n010, n110, u), lerp(n011, n111, u), w),\n      v\n    );\n  };\n})(this);\n\nexport default Sketch;\n"]},"metadata":{},"sourceType":"module"}