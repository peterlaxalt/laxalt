{"ast":null,"code":"import * as THREE from \"three\";\nexport var ThreeCanvas = function ThreeCanvas(container, CanvasTheme) {\n  var renderer, scene, camera, sketch;\n  var canvas = document.getElementById(\"defaultCanvas0\"); // @ts-ignore\n\n  renderer = new THREE.WebGLRenderer({\n    alpha: true\n  });\n  sketch = container;\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  sketch.appendChild(renderer.domElement);\n  var fov = 75;\n  var aspect = 2; // the canvas default\n\n  var near = 0.1;\n  var far = 5;\n  camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n  camera.position.z = 2;\n  scene = new THREE.Scene();\n  var boxWidth = 1;\n  var boxHeight = 1;\n  var boxDepth = 1;\n  var geometry = new THREE.BoxGeometry(boxWidth, boxHeight, boxDepth);\n  var cubes = []; // just an array we can use to rotate the cubes\n  // @ts-ignore\n\n  var texture = new THREE.CanvasTexture(canvas);\n  var material = new THREE.MeshBasicMaterial({\n    map: texture\n  });\n  var cube = new THREE.Mesh(geometry, material);\n  scene.add(cube);\n  cubes.push(cube); // add to our list of cubes to rotate\n\n  function resizeRendererToDisplaySize(renderer) {\n    var canvas = renderer.domElement;\n    var width = canvas.clientWidth;\n    var height = canvas.clientHeight;\n    var needResize = canvas.width !== width || canvas.height !== height;\n\n    if (needResize) {\n      renderer.setSize(width, height, false);\n    }\n\n    return needResize;\n  }\n\n  function render(time) {\n    time *= 0.001;\n\n    if (resizeRendererToDisplaySize(renderer)) {\n      var _canvas = renderer.domElement;\n      camera.aspect = _canvas.clientWidth / _canvas.clientHeight;\n      camera.updateProjectionMatrix();\n    }\n\n    texture.needsUpdate = true;\n    cubes.forEach(function (cube, ndx) {\n      var speed = 0.2 + ndx * 0.1;\n      var rot = time * speed;\n      cube.rotation.x = rot;\n      cube.rotation.y = rot;\n    });\n    renderer.render(scene, camera);\n    requestAnimationFrame(render);\n  }\n\n  requestAnimationFrame(render);\n};\n_c = ThreeCanvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreeCanvas\");","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/three/with-canvas-as-texture.ts"],"names":["THREE","ThreeCanvas","container","CanvasTheme","renderer","scene","camera","sketch","canvas","document","getElementById","WebGLRenderer","alpha","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","appendChild","domElement","fov","aspect","near","far","PerspectiveCamera","position","z","Scene","boxWidth","boxHeight","boxDepth","geometry","BoxGeometry","cubes","texture","CanvasTexture","material","MeshBasicMaterial","map","cube","Mesh","add","push","resizeRendererToDisplaySize","width","clientWidth","height","clientHeight","needResize","render","time","updateProjectionMatrix","needsUpdate","forEach","ndx","speed","rot","rotation","x","y","requestAnimationFrame"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport { LXLT_ColorTheme } from \"../../constants/styles/Color\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_ThreeCanvasDisplay = (\n  container: HTMLDivElement,\n  CanvasTheme: LXLT_ColorTheme\n) => void;\n\nexport const ThreeCanvas: LXLT_ThreeCanvasDisplay = (\n  container,\n  CanvasTheme\n) => {\n  var renderer, scene, camera, sketch;\n\n  const canvas = document.getElementById(\"defaultCanvas0\");\n\n  // @ts-ignore\n  renderer = new THREE.WebGLRenderer({ alpha: true });\n  sketch = container;\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  sketch.appendChild(renderer.domElement);\n\n  const fov = 75;\n  const aspect = 2; // the canvas default\n  const near = 0.1;\n  const far = 5;\n  camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n  camera.position.z = 2;\n\n  scene = new THREE.Scene();\n\n  const boxWidth = 1;\n  const boxHeight = 1;\n  const boxDepth = 1;\n  const geometry = new THREE.BoxGeometry(boxWidth, boxHeight, boxDepth);\n\n  const cubes = []; // just an array we can use to rotate the cubes\n  // @ts-ignore\n  const texture = new THREE.CanvasTexture(canvas);\n\n  const material = new THREE.MeshBasicMaterial({\n    map: texture,\n  });\n  const cube = new THREE.Mesh(geometry, material);\n  scene.add(cube);\n  cubes.push(cube); // add to our list of cubes to rotate\n\n  function resizeRendererToDisplaySize(renderer) {\n    const canvas = renderer.domElement;\n    const width = canvas.clientWidth;\n    const height = canvas.clientHeight;\n    const needResize = canvas.width !== width || canvas.height !== height;\n    if (needResize) {\n      renderer.setSize(width, height, false);\n    }\n    return needResize;\n  }\n\n  function render(time) {\n    time *= 0.001;\n\n    if (resizeRendererToDisplaySize(renderer)) {\n      const canvas = renderer.domElement;\n      camera.aspect = canvas.clientWidth / canvas.clientHeight;\n      camera.updateProjectionMatrix();\n    }\n\n    texture.needsUpdate = true;\n\n    cubes.forEach((cube, ndx) => {\n      const speed = 0.2 + ndx * 0.1;\n      const rot = time * speed;\n      cube.rotation.x = rot;\n      cube.rotation.y = rot;\n    });\n\n    renderer.render(scene, camera);\n\n    requestAnimationFrame(render);\n  }\n\n  requestAnimationFrame(render);\n};\n"]},"metadata":{},"sourceType":"module"}