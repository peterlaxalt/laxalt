{"ast":null,"code":"let canvas;\nlet ctx;\nlet field;\nlet w, h;\nlet size;\nlet columns;\nlet rows;\nlet noiseZ;\n\nfunction setup() {\n  size = 20;\n  noiseZ = 0;\n  canvas = document.querySelector(\"#canvas\");\n  ctx = canvas.getContext(\"2d\");\n  reset();\n  window.addEventListener(\"resize\", reset);\n}\n\nfunction initField() {\n  field = new Array(columns);\n\n  for (let x = 0; x < columns; x++) {\n    field[x] = new Array(columns);\n\n    for (let y = 0; y < rows; y++) {\n      field[x][y] = [0, 0];\n    }\n  }\n}\n\nfunction calculateField() {\n  for (let x = 0; x < columns; x++) {\n    for (let y = 0; y < rows; y++) {\n      let angle = noise.simplex3(x / 50, y / 50, noiseZ) * Math.PI * 2;\n      let length = noise.simplex3(x / 100 + 40000, y / 100 + 40000, noiseZ);\n      field[x][y][0] = angle;\n      field[x][y][1] = length;\n    }\n  }\n}\n\nfunction reset() {\n  w = canvas.width = window.innerWidth;\n  h = canvas.height = window.innerHeight;\n  noise.seed(Math.random());\n  columns = Math.floor(w / size) + 1;\n  rows = Math.floor(h / size) + 1;\n  initField();\n}\n\nfunction draw() {\n  requestAnimationFrame(draw);\n  calculateField();\n  noiseZ += 0.004;\n  clear();\n  drawField();\n}\n\nfunction clear() {\n  ctx.fillStyle = \"black\";\n  ctx.fillRect(0, 0, w, h);\n}\n\nfunction drawField() {\n  for (let x = 0; x < columns; x++) {\n    for (let y = 0; y < rows; y++) {\n      let angle = field[x][y][0];\n      let length = field[x][y][1];\n      ctx.save();\n      ctx.translate(x * size, y * size);\n      ctx.rotate(angle);\n      ctx.strokeStyle = \"white\";\n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n      ctx.lineTo(0, size * length);\n      ctx.stroke();\n      ctx.restore();\n    }\n  }\n}\n\nsetup();\ndraw();","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/d8.js"],"names":["canvas","ctx","field","w","h","size","columns","rows","noiseZ","setup","document","querySelector","getContext","reset","window","addEventListener","initField","Array","x","y","calculateField","angle","noise","simplex3","Math","PI","length","width","innerWidth","height","innerHeight","seed","random","floor","draw","requestAnimationFrame","clear","drawField","fillStyle","fillRect","save","translate","rotate","strokeStyle","beginPath","moveTo","lineTo","stroke","restore"],"mappings":"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","sourcesContent":["let canvas;\nlet ctx;\nlet field;\nlet w, h;\nlet size;\nlet columns;\nlet rows;\nlet noiseZ;\n\nfunction setup() {\n  size = 20;\n  noiseZ = 0;\n  canvas = document.querySelector(\"#canvas\");\n  ctx = canvas.getContext(\"2d\");\n  reset();\n  window.addEventListener(\"resize\", reset);\n}\n\nfunction initField() {\n  field = new Array(columns);\n  for (let x = 0; x < columns; x++) {\n    field[x] = new Array(columns);\n    for (let y = 0; y < rows; y++) {\n      field[x][y] = [0, 0];\n    }\n  }\n}\n\nfunction calculateField() {\n  for (let x = 0; x < columns; x++) {\n    for (let y = 0; y < rows; y++) {\n      let angle = noise.simplex3(x / 50, y / 50, noiseZ) * Math.PI * 2;\n      let length = noise.simplex3(x / 100 + 40000, y / 100 + 40000, noiseZ);\n      field[x][y][0] = angle;\n      field[x][y][1] = length;\n    }\n  }\n}\n\nfunction reset() {\n  w = canvas.width = window.innerWidth;\n  h = canvas.height = window.innerHeight;\n  noise.seed(Math.random());\n  columns = Math.floor(w / size) + 1;\n  rows = Math.floor(h / size) + 1;\n  initField();\n}\n\nfunction draw() {\n  requestAnimationFrame(draw);\n  calculateField();\n  noiseZ += 0.004;\n  clear();\n  drawField();\n}\n\nfunction clear() {\n  ctx.fillStyle = \"black\";\n  ctx.fillRect(0, 0, w, h);\n}\n\nfunction drawField() {\n  for (let x = 0; x < columns; x++) {\n    for (let y = 0; y < rows; y++) {\n      let angle = field[x][y][0];\n      let length = field[x][y][1];\n      ctx.save();\n      ctx.translate(x * size, y * size);\n      ctx.rotate(angle);\n      ctx.strokeStyle = \"white\";\n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n      ctx.lineTo(0, size * length);\n      ctx.stroke();\n      ctx.restore();\n    }\n  }\n}\n\nsetup();\ndraw();\n"]},"metadata":{},"sourceType":"script"}