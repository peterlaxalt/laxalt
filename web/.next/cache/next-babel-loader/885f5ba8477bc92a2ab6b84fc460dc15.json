{"ast":null,"code":"import _classCallCheck from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n// ____________________________________________________________________________________\n\n/**\n *\n * @name WaterTexture\n * @see https://tympanus.net/codrops/2019/10/08/creating-a-water-like-distortion-effect-with-three-js/\n *\n */\nexport var WaterTexture = /*#__PURE__*/function () {\n  // _________________________________\n  // Types\n  // _________________________________\n  // Constructor\n  function WaterTexture(options) {\n    _classCallCheck(this, WaterTexture);\n\n    _defineProperty(this, \"size\", void 0);\n\n    _defineProperty(this, \"radius\", void 0);\n\n    _defineProperty(this, \"width\", void 0);\n\n    _defineProperty(this, \"height\", void 0);\n\n    _defineProperty(this, \"canvas\", void 0);\n\n    _defineProperty(this, \"ctx\", void 0);\n\n    _defineProperty(this, \"debug\", void 0);\n\n    _defineProperty(this, \"points\", void 0);\n\n    _defineProperty(this, \"maxAge\", void 0);\n\n    this.size = 64;\n    this.radius = this.size * 0.1;\n    this.width = this.height = this.size;\n    this.size = 64;\n    this.radius = this.size * 0.1;\n    this.points = [];\n    this.maxAge = 64;\n\n    if (options.debug) {\n      this.width = window.innerWidth;\n      this.height = window.innerHeight;\n      this.radius = this.width * 0.05;\n    }\n\n    this.initTexture();\n    if (options.debug) document.body.append(this.canvas);\n  }\n  /**\n   *\n   * @description Initialize our canvas\n   *\n   */\n\n\n  _createClass(WaterTexture, [{\n    key: \"initTexture\",\n    value: function initTexture() {\n      this.canvas = document.createElement(\"canvas\");\n      this.canvas.id = \"WaterTexture\";\n      this.canvas.width = this.width;\n      this.canvas.height = this.height;\n      this.ctx = this.canvas.getContext(\"2d\");\n      this.clear();\n    }\n    /**\n     *\n     * @description Note that addPoint() receives normalized values, from 0 to 1.\n     * If the canvas happens to resize, we can use the normalized points to draw using the correct size.\n     *\n     */\n\n  }, {\n    key: \"addPoint\",\n    value: function addPoint(point) {\n      this.points.push({\n        x: point.x,\n        y: point.y,\n        age: 0\n      });\n    }\n    /**\n     *\n     * @description Let’s create drawPoint(point) to start drawing the ripples:\n     * Convert the normalized point coordinates into canvas coordinates. Then, draw a happy little circle.\n     *\n     */\n\n  }, {\n    key: \"drawPoint\",\n    value: function drawPoint(point) {\n      // Convert normalized position into canvas coordinates\n      var pos = {\n        x: point.x * this.width,\n        y: point.y * this.height\n      };\n      var radius = this.radius;\n      this.ctx.beginPath();\n      this.ctx.arc(pos.x, pos.y, radius, 0, Math.PI * 2);\n      this.ctx.fill();\n      var ctx = this.ctx; // Lower the opacity as it gets older\n\n      var intensity = 1;\n      intensity = 1 - point.age / this.maxAge;\n      var color = \"255,255,255\";\n      var offset = this.width * 5; // 1. Give the shadow a high offset.\n\n      ctx.shadowOffsetX = offset;\n      ctx.shadowOffsetY = offset;\n      ctx.shadowBlur = radius * 1;\n      ctx.shadowColor = \"rgba(\".concat(color, \",\").concat(0.2 * intensity, \")\");\n      this.ctx.beginPath();\n      this.ctx.fillStyle = \"rgba(255,0,0,1)\"; // 2. Move the circle to the other direction of the offset\n\n      this.ctx.arc(pos.x - offset, pos.y - offset, radius, 0, Math.PI * 2);\n      this.ctx.fill();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.ctx.fillStyle = \"black\";\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this = this;\n\n      this.clear();\n      this.points.forEach(function (point) {\n        point.age += 1;\n\n        if (point.age > _this.maxAge) {\n          _this.points.splice(i, 1);\n        }\n      });\n      this.points.forEach(function (point) {\n        _this.drawPoint(point);\n      });\n    }\n  }]);\n\n  return WaterTexture;\n}();","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/three/water-distort/WaterTexture.ts"],"names":["WaterTexture","options","size","radius","width","height","points","maxAge","debug","window","innerWidth","innerHeight","initTexture","document","body","append","canvas","createElement","id","ctx","getContext","clear","point","push","x","y","age","pos","beginPath","arc","Math","PI","fill","intensity","color","offset","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","fillStyle","fillRect","forEach","splice","i","drawPoint"],"mappings":"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","sourcesContent":["// ____________________________________________________________________________________\n\nexport type LXLT_WaterTextureOptions = {\n  debug?: boolean;\n};\n\nexport type LXLT_WaterTexturePoint = {\n  x: number;\n  y: number;\n  age?: number;\n};\n\n/**\n *\n * @name WaterTexture\n * @see https://tympanus.net/codrops/2019/10/08/creating-a-water-like-distortion-effect-with-three-js/\n *\n */\n\nexport class WaterTexture {\n  // _________________________________\n  // Types\n  size: number;\n  radius: number;\n  width: number;\n  height: number;\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  debug?: boolean;\n  points: LXLT_WaterTexturePoint[];\n  maxAge: number;\n\n  // _________________________________\n  // Constructor\n  constructor(options: any) {\n    this.size = 64;\n    this.radius = this.size * 0.1;\n    this.width = this.height = this.size;\n\n    this.size = 64;\n    this.radius = this.size * 0.1;\n\n    this.points = [];\n    this.maxAge = 64;\n\n    if (options.debug) {\n      this.width = window.innerWidth;\n      this.height = window.innerHeight;\n      this.radius = this.width * 0.05;\n    }\n\n    this.initTexture();\n    if (options.debug) document.body.append(this.canvas);\n  }\n\n  /**\n   *\n   * @description Initialize our canvas\n   *\n   */\n  initTexture() {\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.id = \"WaterTexture\";\n    this.canvas.width = this.width;\n    this.canvas.height = this.height;\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.clear();\n  }\n\n  /**\n   *\n   * @description Note that addPoint() receives normalized values, from 0 to 1.\n   * If the canvas happens to resize, we can use the normalized points to draw using the correct size.\n   *\n   */\n\n  addPoint(point: LXLT_WaterTexturePoint) {\n    this.points.push({ x: point.x, y: point.y, age: 0 });\n  }\n\n  /**\n   *\n   * @description Let’s create drawPoint(point) to start drawing the ripples:\n   * Convert the normalized point coordinates into canvas coordinates. Then, draw a happy little circle.\n   *\n   */\n  drawPoint(point: LXLT_WaterTexturePoint) {\n    // Convert normalized position into canvas coordinates\n    let pos = {\n      x: point.x * this.width,\n      y: point.y * this.height,\n    };\n    const radius = this.radius;\n\n    this.ctx.beginPath();\n    this.ctx.arc(pos.x, pos.y, radius, 0, Math.PI * 2);\n    this.ctx.fill();\n\n    const ctx = this.ctx;\n    // Lower the opacity as it gets older\n    let intensity = 1;\n    intensity = 1 - point.age / this.maxAge;\n\n    let color = \"255,255,255\";\n\n    let offset = this.width * 5;\n    // 1. Give the shadow a high offset.\n    ctx.shadowOffsetX = offset;\n    ctx.shadowOffsetY = offset;\n    ctx.shadowBlur = radius * 1;\n    ctx.shadowColor = `rgba(${color},${0.2 * intensity})`;\n\n    this.ctx.beginPath();\n    this.ctx.fillStyle = \"rgba(255,0,0,1)\";\n    // 2. Move the circle to the other direction of the offset\n    this.ctx.arc(pos.x - offset, pos.y - offset, radius, 0, Math.PI * 2);\n    this.ctx.fill();\n  }\n\n  clear() {\n    this.ctx.fillStyle = \"black\";\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  update() {\n    this.clear();\n    this.points.forEach((point) => {\n      point.age += 1;\n      if (point.age > this.maxAge) {\n        this.points.splice(i, 1);\n      }\n    });\n    this.points.forEach((point) => {\n      this.drawPoint(point);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}