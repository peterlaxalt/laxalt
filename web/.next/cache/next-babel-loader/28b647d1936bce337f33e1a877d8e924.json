{"ast":null,"code":"import _classCallCheck from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport * as THREE from \"three\";\nimport { __DEBUG__ } from \"../../constants/site/Settings\";\nimport { EffectComposer } from \"./jsm/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./jsm/postprocessing/RenderPass\";\nimport { WaterTexture } from \"./water-distort/WaterTexture\"; // Begin Component\n// __________________________________________________________________________\n\nexport var ThreeWaterCanvasClass = /*#__PURE__*/function () {\n  // ______________________________\n  // Types\n  // ______________________________\n  // Constructor\n  function ThreeWaterCanvasClass(props) {\n    _classCallCheck(this, ThreeWaterCanvasClass);\n\n    _defineProperty(this, \"waterTexture\", void 0);\n\n    _defineProperty(this, \"renderer\", void 0);\n\n    _defineProperty(this, \"camera\", void 0);\n\n    _defineProperty(this, \"scene\", void 0);\n\n    _defineProperty(this, \"composer\", void 0);\n\n    _defineProperty(this, \"clock\", void 0);\n\n    this.waterTexture = new WaterTexture({\n      debug: true\n    });\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: false\n    });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    props.canvasContainer.append(this.renderer.domElement);\n    this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 10000);\n    this.camera.position.z = 50;\n    this.tick = this.tick.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this); // Post Processing\n\n    this.composer = new EffectComposer(this.renderer);\n    this.clock = new THREE.Clock();\n    this.init();\n  }\n\n  _createClass(ThreeWaterCanvasClass, [{\n    key: \"initComposer\",\n    value: function initComposer() {\n      var renderPass = new RenderPass(this.scene, this.camera);\n      this.composer.addPass(renderPass);\n    }\n  }, {\n    key: \"addPlane\",\n    value: function addPlane() {\n      var geometry = new THREE.PlaneBufferGeometry(5, 5, 1, 1);\n      var material = new THREE.MeshNormalMaterial();\n      var mesh = new THREE.Mesh(geometry, material);\n      window.addEventListener(\"mousemove\", this.onMouseMove);\n      this.scene.add(mesh);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      this.initComposer();\n      this.addPlane();\n      this.tick();\n    }\n  }, {\n    key: \"onMouseMove\",\n    value: function onMouseMove(ev) {\n      var point = {\n        x: ev.clientX / window.innerWidth,\n        y: ev.clientY / window.innerHeight\n      };\n      this.waterTexture.addPoint(point);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.composer.render(this.clock.getDelta());\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      this.render();\n      this.waterTexture.update();\n      requestAnimationFrame(this.tick);\n    }\n  }]);\n\n  return ThreeWaterCanvasClass;\n}();\nexport var ThreeWaterCanvas = function ThreeWaterCanvas(_ref) {\n  var canvasContainer = _ref.canvasContainer,\n      canvasElement = _ref.canvasElement,\n      canvasTheme = _ref.canvasTheme;\n  var myWaterCanvas = new ThreeWaterCanvasClass({\n    canvasContainer: canvasContainer,\n    canvasElement: canvasElement,\n    canvasTheme: canvasTheme\n  });\n  return myWaterCanvas;\n}; // ______________________________________________________________________________________________________________\n\n_c = ThreeWaterCanvas;\nexport var ThreeCanvas = function ThreeCanvas(container, CanvasElement, CanvasTheme) {\n  __DEBUG__ && console.log(\"ðŸ¤™ Three.js Canvas received:\", CanvasElement);\n  var camera, scene, renderer, mesh, material, sketch;\n  init();\n  setupCanvasDrawing();\n  animate();\n\n  function init() {\n    camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 6000);\n    camera.position.z = 500;\n    sketch = container;\n    scene = new THREE.Scene();\n    material = new THREE.MeshBasicMaterial();\n    mesh = new THREE.Mesh(new THREE.BoxBufferGeometry(350, 350, 350), material);\n    scene.add(mesh);\n    renderer = new THREE.WebGLRenderer({\n      antialias: false,\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    sketch.appendChild(renderer.domElement);\n    scene.background = new THREE.Color(0x000000);\n    window.addEventListener(\"resize\", onWindowResize, false);\n  }\n\n  function setupCanvasDrawing() {\n    material.map = new THREE.CanvasTexture(CanvasElement);\n  }\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  function animate() {\n    requestAnimationFrame(animate);\n    mesh.rotation.x += 0.01;\n    mesh.rotation.y += 0.01;\n    material.map.needsUpdate = true;\n    renderer.render(scene, camera);\n  }\n};\n_c2 = ThreeCanvas;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ThreeWaterCanvas\");\n$RefreshReg$(_c2, \"ThreeCanvas\");","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/three/three-water-distort.canvas.ts"],"names":["THREE","__DEBUG__","EffectComposer","RenderPass","WaterTexture","ThreeWaterCanvasClass","props","waterTexture","debug","renderer","WebGLRenderer","antialias","setSize","window","innerWidth","innerHeight","setPixelRatio","devicePixelRatio","canvasContainer","append","domElement","camera","PerspectiveCamera","position","z","tick","bind","onMouseMove","composer","clock","Clock","init","renderPass","scene","addPass","geometry","PlaneBufferGeometry","material","MeshNormalMaterial","mesh","Mesh","addEventListener","add","initComposer","addPlane","ev","point","x","clientX","y","clientY","addPoint","render","getDelta","update","requestAnimationFrame","ThreeWaterCanvas","canvasElement","canvasTheme","myWaterCanvas","ThreeCanvas","container","CanvasElement","CanvasTheme","console","log","sketch","setupCanvasDrawing","animate","Scene","MeshBasicMaterial","BoxBufferGeometry","alpha","appendChild","background","Color","onWindowResize","map","CanvasTexture","aspect","updateProjectionMatrix","rotation","needsUpdate"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport { __DEBUG__ } from \"../../constants/site/Settings\";\nimport { LXLT_ColorTheme } from \"../../constants/styles/Color\";\nimport { EffectComposer } from \"./jsm/postprocessing/EffectComposer\";\nimport { RenderPass } from \"./jsm/postprocessing/RenderPass\";\nimport {\n  LXLT_WaterTexturePoint,\n  WaterTexture,\n} from \"./water-distort/WaterTexture\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_ThreeWaterCanvas = {\n  canvasContainer: HTMLDivElement;\n  canvasElement: HTMLCanvasElement;\n  canvasTheme: LXLT_ColorTheme;\n};\n\nexport class ThreeWaterCanvasClass {\n  // ______________________________\n  // Types\n  waterTexture: WaterTexture;\n  renderer: THREE.WebGLRenderer;\n  camera: THREE.PerspectiveCamera;\n  scene: THREE.Scene;\n  composer: EffectComposer;\n  clock: THREE.Clock;\n\n  // ______________________________\n  // Constructor\n  constructor(props: LXLT_ThreeWaterCanvas) {\n    this.waterTexture = new WaterTexture({ debug: true });\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: false,\n    });\n\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n\n    props.canvasContainer.append(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(\n      45,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      10000\n    );\n    this.camera.position.z = 50;\n\n    this.tick = this.tick.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n\n    // Post Processing\n    this.composer = new EffectComposer(this.renderer);\n    this.clock = new THREE.Clock();\n\n    this.init();\n  }\n\n  initComposer() {\n    const renderPass = new RenderPass(this.scene, this.camera);\n\n    this.composer.addPass(renderPass);\n  }\n\n  addPlane() {\n    let geometry = new THREE.PlaneBufferGeometry(5, 5, 1, 1);\n    let material = new THREE.MeshNormalMaterial();\n    let mesh = new THREE.Mesh(geometry, material);\n\n    window.addEventListener(\"mousemove\", this.onMouseMove);\n    this.scene.add(mesh);\n  }\n\n  init() {\n    this.initComposer();\n    this.addPlane();\n    this.tick();\n  }\n\n  onMouseMove(ev: MouseEvent) {\n    const point: LXLT_WaterTexturePoint = {\n      x: ev.clientX / window.innerWidth,\n      y: ev.clientY / window.innerHeight,\n    };\n    this.waterTexture.addPoint(point);\n  }\n\n  render() {\n    this.composer.render(this.clock.getDelta());\n  }\n\n  tick() {\n    this.render();\n    this.waterTexture.update();\n    requestAnimationFrame(this.tick);\n  }\n}\n\nexport const ThreeWaterCanvas = ({\n  canvasContainer,\n  canvasElement,\n  canvasTheme,\n}): ThreeWaterCanvasClass => {\n  const myWaterCanvas = new ThreeWaterCanvasClass({\n    canvasContainer,\n    canvasElement,\n    canvasTheme,\n  });\n\n  return myWaterCanvas;\n};\n\n// ______________________________________________________________________________________________________________\n\nexport type LXLT_ThreeCanvasDisplay = (\n  container: HTMLDivElement,\n  CanvasElement: HTMLCanvasElement,\n  CanvasTheme: LXLT_ColorTheme\n) => void;\n\nexport const ThreeCanvas: LXLT_ThreeCanvasDisplay = (\n  container,\n  CanvasElement,\n  CanvasTheme\n) => {\n  __DEBUG__ && console.log(\"ðŸ¤™ Three.js Canvas received:\", CanvasElement);\n\n  let camera, scene, renderer, mesh, material, sketch;\n\n  init();\n  setupCanvasDrawing();\n  animate();\n\n  function init() {\n    camera = new THREE.PerspectiveCamera(\n      50,\n      window.innerWidth / window.innerHeight,\n      1,\n      6000\n    );\n    camera.position.z = 500;\n\n    sketch = container;\n\n    scene = new THREE.Scene();\n\n    material = new THREE.MeshBasicMaterial();\n\n    mesh = new THREE.Mesh(new THREE.BoxBufferGeometry(350, 350, 350), material);\n    scene.add(mesh);\n\n    renderer = new THREE.WebGLRenderer({ antialias: false, alpha: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    sketch.appendChild(renderer.domElement);\n\n    scene.background = new THREE.Color(0x000000);\n\n    window.addEventListener(\"resize\", onWindowResize, false);\n  }\n\n  function setupCanvasDrawing() {\n    material.map = new THREE.CanvasTexture(CanvasElement);\n  }\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  function animate() {\n    requestAnimationFrame(animate);\n\n    mesh.rotation.x += 0.01;\n    mesh.rotation.y += 0.01;\n\n    material.map.needsUpdate = true;\n\n    renderer.render(scene, camera);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}