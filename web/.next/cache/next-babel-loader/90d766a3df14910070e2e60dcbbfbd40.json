{"ast":null,"code":"/**\n *\n * Flow Field\n * @author Peter Laxalt\n *\n */\nimport noise from \"../../lib/perlin\"; // Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst Sketch = (windowWidth, windowHeight) => {\n  let canvas;\n  let ctx;\n  let field;\n  let w, h;\n  let size;\n  let columns;\n  let rows;\n  let noiseZ;\n\n  function setup() {\n    size = 20;\n    noiseZ = 0;\n    canvas = document.querySelector(\"#canvas\");\n    ctx = canvas.getContext(\"2d\");\n    reset();\n    window.addEventListener(\"resize\", reset);\n  }\n\n  function initField() {\n    field = new Array(columns);\n\n    for (let x = 0; x < columns; x++) {\n      field[x] = new Array(columns);\n\n      for (let y = 0; y < rows; y++) {\n        field[x][y] = [0, 0];\n      }\n    }\n  }\n\n  function calculateField() {\n    for (let x = 0; x < columns; x++) {\n      for (let y = 0; y < rows; y++) {\n        let angle = noise.simplex3(x / 50, y / 50, noiseZ) * Math.PI * 2;\n        let length = noise.simplex3(x / 100 + 40000, y / 100 + 40000, noiseZ);\n        field[x][y][0] = angle;\n        field[x][y][1] = length;\n      }\n    }\n  }\n\n  function reset() {\n    w = canvas.width = windowWidth;\n    h = canvas.height = windowHeight;\n    noise.seed(Math.random());\n    columns = Math.floor(w / size) + 1;\n    rows = Math.floor(h / size) + 1;\n    initField();\n  }\n\n  function draw() {\n    requestAnimationFrame(draw);\n    calculateField();\n    noiseZ += 0.004;\n    clear();\n    drawField();\n  }\n\n  function clear() {\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(0, 0, w, h);\n  }\n\n  function drawField() {\n    for (let x = 0; x < columns; x++) {\n      for (let y = 0; y < rows; y++) {\n        let angle = field[x][y][0];\n        let length = field[x][y][1];\n        ctx.save();\n        ctx.translate(x * size, y * size);\n        ctx.rotate(angle);\n        ctx.strokeStyle = \"white\";\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(0, size * length);\n        ctx.stroke();\n        ctx.restore();\n      }\n    }\n  }\n\n  setup();\n  draw();\n};\n\nexport default Sketch;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/d8.js"],"names":["noise","Sketch","windowWidth","windowHeight","canvas","ctx","field","w","h","size","columns","rows","noiseZ","setup","document","querySelector","getContext","reset","window","addEventListener","initField","Array","x","y","calculateField","angle","simplex3","Math","PI","length","width","height","seed","random","floor","draw","requestAnimationFrame","clear","drawField","fillStyle","fillRect","save","translate","rotate","strokeStyle","beginPath","moveTo","lineTo","stroke","restore"],"mappings":"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","sourcesContent":["/**\n *\n * Flow Field\n * @author Peter Laxalt\n *\n */\n\nimport noise from \"../../lib/perlin\";\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst Sketch = (windowWidth, windowHeight) => {\n  let canvas;\n  let ctx;\n  let field;\n  let w, h;\n  let size;\n  let columns;\n  let rows;\n  let noiseZ;\n\n  function setup() {\n    size = 20;\n    noiseZ = 0;\n    canvas = document.querySelector(\"#canvas\");\n    ctx = canvas.getContext(\"2d\");\n    reset();\n    window.addEventListener(\"resize\", reset);\n  }\n\n  function initField() {\n    field = new Array(columns);\n    for (let x = 0; x < columns; x++) {\n      field[x] = new Array(columns);\n      for (let y = 0; y < rows; y++) {\n        field[x][y] = [0, 0];\n      }\n    }\n  }\n\n  function calculateField() {\n    for (let x = 0; x < columns; x++) {\n      for (let y = 0; y < rows; y++) {\n        let angle = noise.simplex3(x / 50, y / 50, noiseZ) * Math.PI * 2;\n        let length = noise.simplex3(x / 100 + 40000, y / 100 + 40000, noiseZ);\n        field[x][y][0] = angle;\n        field[x][y][1] = length;\n      }\n    }\n  }\n\n  function reset() {\n    w = canvas.width = windowWidth;\n    h = canvas.height = windowHeight;\n    noise.seed(Math.random());\n    columns = Math.floor(w / size) + 1;\n    rows = Math.floor(h / size) + 1;\n    initField();\n  }\n\n  function draw() {\n    requestAnimationFrame(draw);\n    calculateField();\n    noiseZ += 0.004;\n    clear();\n    drawField();\n  }\n\n  function clear() {\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(0, 0, w, h);\n  }\n\n  function drawField() {\n    for (let x = 0; x < columns; x++) {\n      for (let y = 0; y < rows; y++) {\n        let angle = field[x][y][0];\n        let length = field[x][y][1];\n        ctx.save();\n        ctx.translate(x * size, y * size);\n        ctx.rotate(angle);\n        ctx.strokeStyle = \"white\";\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(0, size * length);\n        ctx.stroke();\n        ctx.restore();\n      }\n    }\n  }\n\n  setup();\n  draw();\n};\n\nexport default Sketch;\n"]},"metadata":{},"sourceType":"module"}