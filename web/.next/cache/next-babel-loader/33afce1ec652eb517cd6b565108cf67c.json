{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\n\n/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\nimport { Theme } from \"../../constants/Theme\"; // Begin Component\n// __________________________________________________________________________\n\nconst DharmaCanvasDisplay = (W, H, ID, BG) => p => {\n  // _________________________________________________\n  // Config\n  let dharmaFont;\n  let text = \"LAXALT\";\n  let splitCharacterArray = text.split(\"\");\n  let characters = splitCharacterArray.map((character, idx) => {\n    return {\n      letter: character,\n      count: 1,\n      idx: idx,\n      copies: Math.random() <= 0.5\n    };\n  });\n  let renderCount = 0;\n  let strokeWidth = 2;\n  let characterCount = splitCharacterArray.length;\n  let characterWidth = W / characterCount; // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n  // let characterVerticalTranslation: number = 0.993; // Multiplied by the viewBoxHeight\n  // let characterHorizontalScale: number = 0.75; // Multiplied by the characterWidth\n  // let characterVerticalScale: number = 1.38; // Multiplied by the characterWidth\n  // _________________________________________________\n  // Preload\n\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  }; // _________________________________________________\n  // Setup\n\n\n  p.setup = () => {\n    // Our Canvas\n    // p.createCanvas(W, H, p.WEBGL);\n    p.createCanvas(W, H);\n  }; // _________________________________________________\n  // Draw\n\n\n  p.draw = () => {\n    // rect gives us some geometry on the screen\n    // p.background(BG);\n    p.textFont(dharmaFont);\n    p.textLeading(0);\n    p.textSize(H * 1.25);\n    p.fill(`${Theme.Color.Galaxy}`);\n    p.strokeWeight(strokeWidth);\n    p.stroke(\"white\");\n\n    if (renderCount > 0) {\n      characters.map((char, idx) => {\n        let countArray = _Array$from(Array(char.count).keys());\n\n        return countArray.map((duplicate, idxx) => {\n          p.text(char.letter, // W / -2 + characterWidth / 2 + characterWidth * idx,\n          characterWidth * idx + characterWidth / 2, H / 2.25 + strokeWidth * renderCount);\n        });\n      });\n    }\n\n    p.textAlign(p.CENTER, p.CENTER);\n    renderCount += 1;\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/dharma.tsx"],"names":["Theme","DharmaCanvasDisplay","W","H","ID","BG","p","dharmaFont","text","splitCharacterArray","split","characters","map","character","idx","letter","count","copies","Math","random","renderCount","strokeWidth","characterCount","length","characterWidth","preload","loadFont","setup","createCanvas","draw","textFont","textLeading","textSize","fill","Color","Galaxy","strokeWeight","stroke","char","countArray","Array","keys","duplicate","idxx","textAlign","CENTER","windowResized","resizeCanvas"],"mappings":";;AAAA;;;;;;AAQA,SAASA,KAAT,QAAsB,uBAAtB,C,CAEA;AACA;;AAuBA,MAAMC,mBAA6C,GAAG,CAACC,CAAD,EAAIC,CAAJ,EAAOC,EAAP,EAAWC,EAAX,KACpDC,CADsE,IAEnE;AACH;AACA;AACA,MAAIC,UAAJ;AAEA,MAAIC,IAAI,GAAG,QAAX;AACA,MAAIC,mBAAmB,GAAGD,IAAI,CAACE,KAAL,CAAW,EAAX,CAA1B;AACA,MAAIC,UAAmC,GAAGF,mBAAmB,CAACG,GAApB,CACxC,CAACC,SAAD,EAAoBC,GAApB,KAAoC;AAClC,WAAO;AACLC,MAAAA,MAAM,EAAEF,SADH;AAELG,MAAAA,KAAK,EAAE,CAFF;AAGLF,MAAAA,GAAG,EAAEA,GAHA;AAILG,MAAAA,MAAM,EAAEC,IAAI,CAACC,MAAL,MAAiB;AAJpB,KAAP;AAMD,GARuC,CAA1C;AAWA,MAAIC,WAAmB,GAAG,CAA1B;AACA,MAAIC,WAAmB,GAAG,CAA1B;AAEA,MAAIC,cAAsB,GAAGb,mBAAmB,CAACc,MAAjD;AACA,MAAIC,cAAsB,GAAGtB,CAAC,GAAGoB,cAAjC,CAtBG,CAwBH;AACA;AACA;AACA;AAEA;AACA;;AACAhB,EAAAA,CAAC,CAACmB,OAAF,GAAY,MAAM;AAChBlB,IAAAA,UAAU,GAAGD,CAAC,CAACoB,QAAF,CAAY,kCAAZ,CAAb;AACD,GAFD,CA/BG,CAmCH;AACA;;;AACApB,EAAAA,CAAC,CAACqB,KAAF,GAAU,MAAM;AACd;AACA;AACArB,IAAAA,CAAC,CAACsB,YAAF,CAAe1B,CAAf,EAAkBC,CAAlB;AACD,GAJD,CArCG,CA2CH;AACA;;;AACAG,EAAAA,CAAC,CAACuB,IAAF,GAAS,MAAM;AACb;AAEA;AAEAvB,IAAAA,CAAC,CAACwB,QAAF,CAAWvB,UAAX;AAEAD,IAAAA,CAAC,CAACyB,WAAF,CAAc,CAAd;AACAzB,IAAAA,CAAC,CAAC0B,QAAF,CAAW7B,CAAC,GAAG,IAAf;AAEAG,IAAAA,CAAC,CAAC2B,IAAF,CAAQ,GAAEjC,KAAK,CAACkC,KAAN,CAAYC,MAAO,EAA7B;AACA7B,IAAAA,CAAC,CAAC8B,YAAF,CAAef,WAAf;AACAf,IAAAA,CAAC,CAAC+B,MAAF,CAAS,OAAT;;AAEA,QAAIjB,WAAW,GAAG,CAAlB,EAAqB;AACnBT,MAAAA,UAAU,CAACC,GAAX,CAAe,CAAC0B,IAAD,EAA8BxB,GAA9B,KAA8C;AAC3D,YAAIyB,UAAoB,GAAG,YAAWC,KAAK,CAACF,IAAI,CAACtB,KAAN,CAAL,CAAkByB,IAAlB,EAAX,CAA3B;;AAEA,eAAOF,UAAU,CAAC3B,GAAX,CAAe,CAAC8B,SAAD,EAAoBC,IAApB,KAAqC;AACzDrC,UAAAA,CAAC,CAACE,IAAF,CACE8B,IAAI,CAACvB,MADP,EAEE;AACAS,UAAAA,cAAc,GAAGV,GAAjB,GAAuBU,cAAc,GAAG,CAH1C,EAIErB,CAAC,GAAG,IAAJ,GAAWkB,WAAW,GAAGD,WAJ3B;AAMD,SAPM,CAAP;AAQD,OAXD;AAYD;;AAEDd,IAAAA,CAAC,CAACsC,SAAF,CAAYtC,CAAC,CAACuC,MAAd,EAAsBvC,CAAC,CAACuC,MAAxB;AAEAzB,IAAAA,WAAW,IAAI,CAAf;AACD,GAhCD;;AAkCAd,EAAAA,CAAC,CAACwC,aAAF,GAAkB,MAAM;AACtBxC,IAAAA,CAAC,CAACyC,YAAF,CAAe7C,CAAf,EAAkBC,CAAlB;AACD,GAFD;AAGD,CApFD;;AAsFA,eAAeF,mBAAf","sourcesContent":["/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n\nimport p5, { Font } from \"p5\";\nimport { Theme } from \"../../constants/Theme\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_DharmaCanvas = {\n  W: number;\n  H: number;\n  ID: number;\n  BG: string;\n};\n\nexport type LXLT_DharmaCanvasDisplay = (\n  W: number,\n  H: number,\n  ID: number,\n  BG: string\n) => (p: p5) => void;\n\ntype LXLT_DharmaCanvasChar = {\n  letter: string;\n  count: number;\n  idx: number;\n  copies: boolean;\n};\n\nconst DharmaCanvasDisplay: LXLT_DharmaCanvasDisplay = (W, H, ID, BG) => (\n  p: p5\n) => {\n  // _________________________________________________\n  // Config\n  let dharmaFont: Font;\n\n  let text = \"LAXALT\";\n  let splitCharacterArray = text.split(\"\");\n  let characters: LXLT_DharmaCanvasChar[] = splitCharacterArray.map(\n    (character: string, idx: number) => {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n        copies: Math.random() <= 0.5,\n      };\n    }\n  );\n\n  let renderCount: number = 0;\n  let strokeWidth: number = 2;\n\n  let characterCount: number = splitCharacterArray.length;\n  let characterWidth: number = W / characterCount;\n\n  // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n  // let characterVerticalTranslation: number = 0.993; // Multiplied by the viewBoxHeight\n  // let characterHorizontalScale: number = 0.75; // Multiplied by the characterWidth\n  // let characterVerticalScale: number = 1.38; // Multiplied by the characterWidth\n\n  // _________________________________________________\n  // Preload\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  };\n\n  // _________________________________________________\n  // Setup\n  p.setup = () => {\n    // Our Canvas\n    // p.createCanvas(W, H, p.WEBGL);\n    p.createCanvas(W, H);\n  };\n\n  // _________________________________________________\n  // Draw\n  p.draw = () => {\n    // rect gives us some geometry on the screen\n\n    // p.background(BG);\n\n    p.textFont(dharmaFont);\n\n    p.textLeading(0);\n    p.textSize(H * 1.25);\n\n    p.fill(`${Theme.Color.Galaxy}`);\n    p.strokeWeight(strokeWidth);\n    p.stroke(\"white\");\n\n    if (renderCount > 0) {\n      characters.map((char: LXLT_DharmaCanvasChar, idx: number) => {\n        let countArray: number[] = Array.from(Array(char.count).keys());\n\n        return countArray.map((duplicate: number, idxx: number) => {\n          p.text(\n            char.letter,\n            // W / -2 + characterWidth / 2 + characterWidth * idx,\n            characterWidth * idx + characterWidth / 2,\n            H / 2.25 + strokeWidth * renderCount\n          );\n        });\n      });\n    }\n\n    p.textAlign(p.CENTER, p.CENTER);\n\n    renderCount += 1;\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;\n"]},"metadata":{},"sourceType":"module"}