{"ast":null,"code":"import * as THREE from \"three\";\nimport { __DEBUG__ } from \"../../constants/site/Settings\";\nexport var ThreeCanvas = function ThreeCanvas(container, CanvasElement, CanvasTheme) {\n  __DEBUG__ && console.log(\"ðŸ¤™ Three.js Canvas received:\", CanvasElement);\n  var camera, scene, renderer, mesh, material, sketch;\n  init();\n  setupCanvasDrawing();\n  animate();\n\n  function init() {\n    camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 6000);\n    camera.position.z = 500;\n    sketch = container;\n    scene = new THREE.Scene();\n    material = new THREE.MeshBasicMaterial();\n    mesh = new THREE.Mesh(new THREE.BoxBufferGeometry(350, 350, 350), material);\n    scene.add(mesh);\n    renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    sketch.appendChild(renderer.domElement);\n    scene.background = new THREE.Color(0x000000);\n    window.addEventListener(\"resize\", onWindowResize, false);\n  } // Sets up the drawing canvas and adds it as the material map\n\n\n  function setupCanvasDrawing() {\n    // get canvas and context\n    // const drawingCanvas: HTMLCanvasElement = document.getElementById(\n    //   \"drawing-canvas\"\n    // ) as HTMLCanvasElement;\n    // const drawingContext = drawingCanvas.getContext(\"2d\");\n    // // draw white background\n    // drawingContext.fillStyle = \"blue\";\n    // drawingContext.fillRect(0, 0, 128, 128);\n    // // set canvas as material.map (this could be done to any map, bump, displacement etc.)\n    material.map = new THREE.CanvasTexture(CanvasElement); // // set the variable to keep track of when to draw\n    // let paint = false;\n    // // add canvas event listeners\n    // drawingCanvas.addEventListener(\"pointerdown\", function (e) {\n    //   paint = true;\n    //   drawStartPos.set(e.offsetX, e.offsetY);\n    // });\n    // drawingCanvas.addEventListener(\"pointermove\", function (e) {\n    //   if (paint) draw(drawingContext, e.offsetX, e.offsetY);\n    // });\n    // drawingCanvas.addEventListener(\"pointerup\", function () {\n    //   paint = false;\n    // });\n    // drawingCanvas.addEventListener(\"pointerleave\", function () {\n    //   paint = false;\n    // });\n  } // function draw(drawContext, x, y) {\n  //   drawContext.moveTo(drawStartPos.x, drawStartPos.y);\n  //   drawContext.strokeStyle = \"#000000\";\n  //   drawContext.lineTo(x, y);\n  //   drawContext.stroke();\n  //   // reset drawing start position to current position.\n  //   drawStartPos.set(x, y);\n  //   // need to flag the map as needing updating.\n  //   material.map.needsUpdate = true;\n  // }\n\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  function animate() {\n    requestAnimationFrame(animate);\n    mesh.rotation.x += 0.01;\n    mesh.rotation.y += 0.01;\n    material.map.needsUpdate = true;\n    renderer.render(scene, camera);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}