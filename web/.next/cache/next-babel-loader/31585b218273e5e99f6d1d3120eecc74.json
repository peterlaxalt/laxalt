{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/pflaxalt/Repositories/_pfl/web/components/_interactive/DharmaCounter/DharmaCounter.tsx\";\nvar __jsx = React.createElement;\n// Core\nimport React from \"react\";\nimport { Theme } from \"../../../constants/Theme\";\nimport { DharmaTypeClassName, DharmaTypeStyle } from \"../../_svg/DharmaType/styles.scss\"; // Begin Types\n// __________________________________________________________________________________________\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name DharmaCounter\n * @author Peter Laxalt\n *\n */\nexport class DharmaCounter extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"\",\n      characters: [],\n      viewBoxHeight: 0,\n      viewBoxWidth: 0,\n      characterWidth: 0,\n      characterVerticalTranslation: 0,\n      characterHorizontalScale: 0,\n      characterVerticalScale: 0,\n      isInitialized: false\n    };\n    this.incrementLetterCount = this.incrementLetterCount.bind(this);\n    this.decrementLetterCount = this.decrementLetterCount.bind(this);\n    this.resetLetterCount = this.resetLetterCount.bind(this);\n    this.updateLetterCount = this.updateLetterCount.bind(this);\n    this.letterCountTimer = this.letterCountTimer.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.text) {\n      // ____________________________________________\n      // Get text / create array\n      let {\n        text\n      } = this.props;\n      let splitCharacterArray = text.split(\"\");\n      let characterArray = splitCharacterArray.map((character, idx) => {\n        return {\n          letter: character,\n          count: 1,\n          idx: idx,\n          copies: []\n        };\n      }); // ____________________________________________\n      // USE THESE TO TWEAK YOUR CHARACTERS TO FIT\n\n      let viewBoxHeight = 100;\n      let viewBoxWidth = 100;\n      let characterCount = splitCharacterArray.length;\n      let characterWidth = viewBoxWidth / characterCount; // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n\n      let characterVerticalTranslation = 0.993; // Multiplied by the viewBoxHeight\n\n      let characterHorizontalScale = 0.75; // Multiplied by the characterWidth\n\n      let characterVerticalScale = 1.38; // Multiplied by the characterWidth\n\n      this.setState({\n        text: text,\n        characters: characterArray,\n        viewBoxHeight: viewBoxHeight,\n        viewBoxWidth: viewBoxWidth,\n        characterWidth: characterWidth,\n        characterHorizontalScale: characterHorizontalScale,\n        characterVerticalScale: characterVerticalScale,\n        characterVerticalTranslation: characterVerticalTranslation,\n        isInitialized: true\n      });\n      this.letterCountTimer();\n    }\n  }\n\n  incrementLetterCount(id) {\n    this.setState({\n      characters: this.state.characters.map((character, idx) => {\n        return {\n          letter: character.letter,\n          count: id == character.idx ? character.count + 1 : character.count,\n          idx: idx,\n          copies: []\n        };\n      })\n    });\n    return;\n  }\n\n  decrementLetterCount(id) {\n    this.setState({\n      characters: this.state.characters.map((character, idx) => {\n        return {\n          letter: character.letter,\n          count: id == character.idx ? character.count - 1 : character.count,\n          idx: idx,\n          copies: []\n        };\n      })\n    });\n    return;\n  }\n\n  resetLetterCount(id) {\n    this.setState({\n      characters: this.state.characters.map((character, idx) => {\n        return {\n          letter: character.letter,\n          count: id == character.idx ? 1 : character.count,\n          idx: idx,\n          copies: []\n        };\n      })\n    });\n    return;\n  }\n\n  updateLetterCount(id) {\n    if (this.state.characters && this.state.characters.length > 0) {\n      let matchedCharacter = this.state.characters.filter(character => character.idx == id)[0];\n      let maxCount = 4;\n\n      if (matchedCharacter) {\n        if (matchedCharacter.count === maxCount) {\n          this.resetLetterCount(id);\n        } else {\n          this.incrementLetterCount(id);\n        }\n      } else {\n        return;\n      }\n    } else {\n      return;\n    }\n\n    return;\n  }\n\n  letterCountTimer() {\n    function generateRandomInteger(min, max) {\n      return Math.floor(min + Math.random() * (max + 1 - min));\n    }\n\n    window.setInterval(() => this.updateLetterCount(generateRandomInteger(0, this.state.characters.length)), 3000);\n  }\n\n  render() {\n    let offsetCount = 30;\n    var offsetArr = offsetCount.toString(10).replace(/\\D/g, \"0\").split(\"\").map(Number);\n    return __jsx(React.Fragment, null, __jsx(DharmaCounterDisplay, _extends({\n      updateLetterCount: this.updateLetterCount\n    }, this.state, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    })), offsetArr.map((n, idx) => {\n      return __jsx(DharmaCounterDisplay, _extends({\n        outlined: true,\n        offset: n,\n        updateLetterCount: this.updateLetterCount\n      }, this.state, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }));\n    }));\n  }\n\n}\n\nconst DharmaCounterDisplay = props => {\n  let {\n    viewBoxHeight,\n    viewBoxWidth,\n    characters,\n    characterWidth,\n    characterHorizontalScale,\n    characterVerticalScale,\n    characterVerticalTranslation,\n    updateLetterCount,\n    offset,\n    outlined,\n    addClass\n  } = props;\n  return __jsx(DharmaTypeStyle, {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: `0 0 ${viewBoxWidth} ${viewBoxHeight}`,\n    preserveAspectRatio: \"none\",\n    className: `${DharmaTypeClassName} ${DharmaTypeClassName}--counter ${offset ? `${DharmaTypeClassName}--offset` : \"\"} ${addClass}`,\n    style: {\n      [`--${DharmaTypeClassName}-font-size`]: `${viewBoxHeight}px`,\n      [`--${DharmaTypeClassName}-offset`]: `${offset ? offset : 0}`\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  }, __jsx(\"g\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292\n    },\n    __self: this\n  }, characters.map((char, idx) => {\n    let countArray = _Array$from(Array(char.count).keys());\n\n    return countArray.map((duplicate, idxx) => {\n      let adjustedDuplicate = char.count > 1 ? char.count : duplicate + 1;\n      let adjustedVerticalTranslation = viewBoxHeight / adjustedDuplicate * (idxx + 1) * characterVerticalTranslation;\n      let adjustedVerticalScale = characterVerticalScale / adjustedDuplicate;\n      return __jsx(\"g\", {\n        className: `${DharmaTypeClassName}__character-wrapper`,\n        \"data-char-id\": idx,\n        \"data-char-count\": duplicate,\n        key: idxx,\n        onClick: () => updateLetterCount(idx),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }, __jsx(\"filter\", {\n        id: `displacementFilter__${idx}__${idxx}${outlined ? \"__outlined\" : \"\"}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, !outlined && __jsx(React.Fragment, null, __jsx(\"feTurbulence\", {\n        type: \"turbulence\" // baseFrequency={0.6 * (idxx * 0.05)}\n        // numOctaves={1 * (idxx + 20)}\n        ,\n        baseFrequency: 0,\n        numOctaves: 0,\n        result: \"turbulence\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }), __jsx(\"feDisplacementMap\", {\n        in2: \"turbulence\",\n        in: \"SourceGraphic\" // scale={3 - idxx * 0.5}\n        ,\n        scale: 0,\n        xChannelSelector: \"R\",\n        yChannelSelector: \"G\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      })), outlined && __jsx(React.Fragment, null, __jsx(\"feFlood\", {\n        \"flood-color\": Theme.Color.varBackground,\n        \"flood-opacity\": \"1\",\n        result: \"PINK\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344\n        },\n        __self: this\n      }), __jsx(\"feMorphology\", {\n        in: \"SourceAlpha\",\n        result: \"DILATED\",\n        operator: \"dilate\",\n        radius: \".1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        },\n        __self: this\n      }), __jsx(\"feComposite\", {\n        in: \"PINK\",\n        in2: \"DILATED\",\n        operator: \"in\",\n        result: \"OUTLINE\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      }), __jsx(\"feMerge\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362\n        },\n        __self: this\n      }, __jsx(\"feMergeNode\", {\n        in: \"OUTLINE\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363\n        },\n        __self: this\n      }), __jsx(\"feMergeNode\", {\n        in: \"SourceGraphic\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      })))), __jsx(\"text\", {\n        className: `${DharmaTypeClassName}__character`,\n        transform: `translate(${characterWidth * idx} ${adjustedVerticalTranslation}) scale(${characterHorizontalScale}, ${adjustedVerticalScale})`,\n        style: {\n          [`--${DharmaTypeClassName}-key`]: idx,\n          filter: `url(#displacementFilter__${idx}__${idxx}${outlined ? \"__outlined\" : \"\"})`\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370\n        },\n        __self: this\n      }, __jsx(\"tspan\", {\n        className: `${DharmaTypeClassName}__letter`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382\n        },\n        __self: this\n      }, char.letter)));\n    });\n  })));\n};","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/components/_interactive/DharmaCounter/DharmaCounter.tsx"],"names":["React","Theme","DharmaTypeClassName","DharmaTypeStyle","DharmaCounter","PureComponent","constructor","props","state","text","characters","viewBoxHeight","viewBoxWidth","characterWidth","characterVerticalTranslation","characterHorizontalScale","characterVerticalScale","isInitialized","incrementLetterCount","bind","decrementLetterCount","resetLetterCount","updateLetterCount","letterCountTimer","componentDidMount","splitCharacterArray","split","characterArray","map","character","idx","letter","count","copies","characterCount","length","setState","id","matchedCharacter","filter","maxCount","generateRandomInteger","min","max","Math","floor","random","window","setInterval","render","offsetCount","offsetArr","toString","replace","Number","n","DharmaCounterDisplay","offset","outlined","addClass","char","countArray","Array","keys","duplicate","idxx","adjustedDuplicate","adjustedVerticalTranslation","adjustedVerticalScale","Color","varBackground"],"mappings":"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","sourcesContent":["// Core\nimport React from \"react\";\nimport { Theme } from \"../../../constants/Theme\";\nimport {\n  DharmaTypeClassName,\n  DharmaTypeStyle,\n} from \"../../_svg/DharmaType/styles.scss\";\n\n// Begin Types\n// __________________________________________________________________________________________\n\ntype LXLT_DharmaCounter = {\n  text: string;\n};\n\ntype LXLT_DharmaCounterState = {\n  text: string;\n  characters: LXLT_DharmaChar[];\n\n  viewBoxHeight: number;\n  viewBoxWidth: number;\n\n  characterVerticalTranslation: number;\n  characterHorizontalScale: number;\n  characterVerticalScale: number;\n\n  characterWidth: number;\n\n  isInitialized: boolean;\n};\n\ntype LXLT_DharmaChar = {\n  letter: string;\n  count: number;\n  idx: number;\n  copies: {\n    id: number;\n    count: number;\n  }[];\n};\n\ntype LXLT_DharmaCounterDisplay = LXLT_DharmaCounterState & {\n  updateLetterCount: (id: number) => void;\n\n  outlined?: boolean;\n  offset?: number;\n  addClass?: string;\n};\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name DharmaCounter\n * @author Peter Laxalt\n *\n */\nexport class DharmaCounter extends React.PureComponent<\n  LXLT_DharmaCounter,\n  LXLT_DharmaCounterState\n> {\n  constructor(props: LXLT_DharmaCounter) {\n    super(props);\n\n    this.state = {\n      text: \"\",\n      characters: [],\n\n      viewBoxHeight: 0,\n      viewBoxWidth: 0,\n      characterWidth: 0,\n\n      characterVerticalTranslation: 0,\n      characterHorizontalScale: 0,\n      characterVerticalScale: 0,\n\n      isInitialized: false,\n    };\n\n    this.incrementLetterCount = this.incrementLetterCount.bind(this);\n    this.decrementLetterCount = this.decrementLetterCount.bind(this);\n    this.resetLetterCount = this.resetLetterCount.bind(this);\n    this.updateLetterCount = this.updateLetterCount.bind(this);\n\n    this.letterCountTimer = this.letterCountTimer.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.text) {\n      // ____________________________________________\n      // Get text / create array\n      let { text } = this.props;\n\n      let splitCharacterArray = text.split(\"\");\n      let characterArray: LXLT_DharmaChar[] = splitCharacterArray.map(\n        (character: string, idx: number) => {\n          return {\n            letter: character,\n            count: 1,\n            idx: idx,\n            copies: [],\n          };\n        }\n      );\n\n      // ____________________________________________\n      // USE THESE TO TWEAK YOUR CHARACTERS TO FIT\n      let viewBoxHeight = 100;\n      let viewBoxWidth = 100;\n\n      let characterCount = splitCharacterArray.length;\n      let characterWidth = viewBoxWidth / characterCount;\n\n      // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n      let characterVerticalTranslation = 0.993; // Multiplied by the viewBoxHeight\n      let characterHorizontalScale = 0.75; // Multiplied by the characterWidth\n      let characterVerticalScale = 1.38; // Multiplied by the characterWidth\n\n      this.setState({\n        text: text,\n        characters: characterArray,\n\n        viewBoxHeight: viewBoxHeight,\n        viewBoxWidth: viewBoxWidth,\n\n        characterWidth: characterWidth,\n\n        characterHorizontalScale: characterHorizontalScale,\n        characterVerticalScale: characterVerticalScale,\n        characterVerticalTranslation: characterVerticalTranslation,\n\n        isInitialized: true,\n      });\n\n      this.letterCountTimer();\n    }\n  }\n\n  incrementLetterCount(id: number) {\n    this.setState({\n      characters: this.state.characters.map(\n        (character: LXLT_DharmaChar, idx: number) => {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? character.count + 1 : character.count,\n            idx: idx,\n            copies: [],\n          };\n        }\n      ),\n    });\n\n    return;\n  }\n\n  decrementLetterCount(id: number) {\n    this.setState({\n      characters: this.state.characters.map(\n        (character: LXLT_DharmaChar, idx: number) => {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? character.count - 1 : character.count,\n            idx: idx,\n            copies: [],\n          };\n        }\n      ),\n    });\n\n    return;\n  }\n\n  resetLetterCount(id: number) {\n    this.setState({\n      characters: this.state.characters.map(\n        (character: LXLT_DharmaChar, idx: number) => {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? 1 : character.count,\n            idx: idx,\n            copies: [],\n          };\n        }\n      ),\n    });\n\n    return;\n  }\n\n  updateLetterCount(id: number) {\n    if (this.state.characters && this.state.characters.length > 0) {\n      let matchedCharacter: LXLT_DharmaChar = this.state.characters.filter(\n        (character: LXLT_DharmaChar) => character.idx == id\n      )[0];\n\n      let maxCount = 4;\n\n      if (matchedCharacter) {\n        if (matchedCharacter.count === maxCount) {\n          this.resetLetterCount(id);\n        } else {\n          this.incrementLetterCount(id);\n        }\n      } else {\n        return;\n      }\n    } else {\n      return;\n    }\n\n    return;\n  }\n\n  letterCountTimer() {\n    function generateRandomInteger(min, max) {\n      return Math.floor(min + Math.random() * (max + 1 - min));\n    }\n\n    window.setInterval(\n      () =>\n        this.updateLetterCount(\n          generateRandomInteger(0, this.state.characters.length)\n        ),\n      3000\n    );\n  }\n\n  render() {\n    let offsetCount = 30;\n    var offsetArr = offsetCount\n      .toString(10)\n      .replace(/\\D/g, \"0\")\n      .split(\"\")\n      .map(Number);\n\n    return (\n      <>\n        <DharmaCounterDisplay\n          updateLetterCount={this.updateLetterCount}\n          {...this.state}\n        />\n\n        {offsetArr.map((n: number, idx: number) => {\n          return (\n            <DharmaCounterDisplay\n              outlined={true}\n              offset={n}\n              updateLetterCount={this.updateLetterCount}\n              {...this.state}\n            />\n          );\n        })}\n      </>\n    );\n  }\n}\n\nconst DharmaCounterDisplay: React.FunctionComponent<LXLT_DharmaCounterDisplay> = (\n  props\n) => {\n  let {\n    viewBoxHeight,\n    viewBoxWidth,\n    characters,\n    characterWidth,\n\n    characterHorizontalScale,\n    characterVerticalScale,\n    characterVerticalTranslation,\n\n    updateLetterCount,\n\n    offset,\n    outlined,\n\n    addClass,\n  } = props;\n\n  return (\n    <DharmaTypeStyle\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox={`0 0 ${viewBoxWidth} ${viewBoxHeight}`}\n      preserveAspectRatio=\"none\"\n      className={`${DharmaTypeClassName} ${DharmaTypeClassName}--counter ${\n        offset ? `${DharmaTypeClassName}--offset` : \"\"\n      } ${addClass}`}\n      style={{\n        [`--${DharmaTypeClassName}-font-size` as any]: `${viewBoxHeight}px`,\n        [`--${DharmaTypeClassName}-offset` as any]: `${offset ? offset : 0}`,\n      }}\n    >\n      <g>\n        {characters.map((char: LXLT_DharmaChar, idx: number) => {\n          let countArray = Array.from(Array(char.count).keys());\n\n          return countArray.map((duplicate: number, idxx: number) => {\n            let adjustedDuplicate = char.count > 1 ? char.count : duplicate + 1;\n\n            let adjustedVerticalTranslation =\n              (viewBoxHeight / adjustedDuplicate) *\n              (idxx + 1) *\n              characterVerticalTranslation;\n\n            let adjustedVerticalScale =\n              characterVerticalScale / adjustedDuplicate;\n\n            return (\n              <g\n                className={`${DharmaTypeClassName}__character-wrapper`}\n                data-char-id={idx}\n                data-char-count={duplicate}\n                key={idxx}\n                onClick={() => updateLetterCount(idx)}\n              >\n                <filter\n                  id={`displacementFilter__${idx}__${idxx}${\n                    outlined ? \"__outlined\" : \"\"\n                  }`}\n                >\n                  {!outlined && (\n                    <>\n                      <feTurbulence\n                        type=\"turbulence\"\n                        // baseFrequency={0.6 * (idxx * 0.05)}\n                        // numOctaves={1 * (idxx + 20)}\n                        baseFrequency={0}\n                        numOctaves={0}\n                        result=\"turbulence\"\n                      />\n                      <feDisplacementMap\n                        in2=\"turbulence\"\n                        in=\"SourceGraphic\"\n                        // scale={3 - idxx * 0.5}\n                        scale={0}\n                        xChannelSelector=\"R\"\n                        yChannelSelector=\"G\"\n                      />\n                    </>\n                  )}\n\n                  {/* Outline  */}\n                  {outlined && (\n                    <>\n                      <feFlood\n                        flood-color={Theme.Color.varBackground}\n                        flood-opacity=\"1\"\n                        result=\"PINK\"\n                      />\n                      <feMorphology\n                        in=\"SourceAlpha\"\n                        result=\"DILATED\"\n                        operator=\"dilate\"\n                        radius=\".1\"\n                      />\n                      <feComposite\n                        in=\"PINK\"\n                        in2=\"DILATED\"\n                        operator=\"in\"\n                        result=\"OUTLINE\"\n                      />\n\n                      <feMerge>\n                        <feMergeNode in=\"OUTLINE\" />\n                        <feMergeNode in=\"SourceGraphic\" />\n                      </feMerge>\n                    </>\n                  )}\n                </filter>\n\n                <text\n                  className={`${DharmaTypeClassName}__character`}\n                  transform={`translate(${\n                    characterWidth * idx\n                  } ${adjustedVerticalTranslation}) scale(${characterHorizontalScale}, ${adjustedVerticalScale})`}\n                  style={{\n                    [`--${DharmaTypeClassName}-key` as any]: idx,\n                    filter: `url(#displacementFilter__${idx}__${idxx}${\n                      outlined ? \"__outlined\" : \"\"\n                    })`,\n                  }}\n                >\n                  <tspan className={`${DharmaTypeClassName}__letter`}>\n                    {char.letter}\n                  </tspan>\n                </text>\n              </g>\n            );\n          });\n        })}\n      </g>\n    </DharmaTypeStyle>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}