{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as THREE from \"three\";\nimport { __DEBUG__ } from \"../../constants/site/Settings\";\nimport { WaterTexture } from \"./water-distort/WaterTexture\"; // Begin Component\n// __________________________________________________________________________\n\nexport class ThreeWaterCanvasClass {\n  // ______________________________\n  // Types\n  // ______________________________\n  // Constructor\n  constructor() {\n    _defineProperty(this, \"waterTexture\", void 0);\n\n    _defineProperty(this, \"renderer\", void 0);\n\n    _defineProperty(this, \"camera\", void 0);\n\n    _defineProperty(this, \"scene\", void 0);\n\n    this.waterTexture = new WaterTexture({\n      debug: true\n    });\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: false\n    });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    document.body.append(this.renderer.domElement); // UPDATE ME\n\n    this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 10000);\n    this.camera.position.z = 50;\n    this.tick = this.tick.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.init();\n  }\n\n  addPlane() {\n    let geometry = new THREE.PlaneBufferGeometry(5, 5, 1, 1);\n    let material = new THREE.MeshNormalMaterial();\n    let mesh = new THREE.Mesh(geometry, material);\n    window.addEventListener(\"mousemove\", this.onMouseMove);\n    this.scene.add(mesh);\n  }\n\n  init() {\n    this.addPlane();\n    this.tick();\n  }\n\n  onMouseMove(ev) {\n    const point = {\n      x: ev.clientX / window.innerWidth,\n      y: ev.clientY / window.innerHeight\n    };\n    this.waterTexture.addPoint(point);\n  }\n\n  render() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  tick() {\n    this.render();\n    this.waterTexture.update();\n    requestAnimationFrame(this.tick);\n  }\n\n}\nconst ThreeWaterCanvas = new ThreeWaterCanvasClass(); // ______________________________________________________________________________________________________________\n\nexport const ThreeCanvas = (container, CanvasElement, CanvasTheme) => {\n  __DEBUG__ && console.log(\"ðŸ¤™ Three.js Canvas received:\", CanvasElement);\n  let camera, scene, renderer, mesh, material, sketch;\n  init();\n  setupCanvasDrawing();\n  animate();\n\n  function init() {\n    camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 6000);\n    camera.position.z = 500;\n    sketch = container;\n    scene = new THREE.Scene();\n    material = new THREE.MeshBasicMaterial();\n    mesh = new THREE.Mesh(new THREE.BoxBufferGeometry(350, 350, 350), material);\n    scene.add(mesh);\n    renderer = new THREE.WebGLRenderer({\n      antialias: false,\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    sketch.appendChild(renderer.domElement);\n    scene.background = new THREE.Color(0x000000);\n    window.addEventListener(\"resize\", onWindowResize, false);\n  }\n\n  function setupCanvasDrawing() {\n    material.map = new THREE.CanvasTexture(CanvasElement);\n  }\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  function animate() {\n    requestAnimationFrame(animate);\n    mesh.rotation.x += 0.01;\n    mesh.rotation.y += 0.01;\n    material.map.needsUpdate = true;\n    renderer.render(scene, camera);\n  }\n};","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/three/three-water-distort.canvas.ts"],"names":["THREE","__DEBUG__","WaterTexture","ThreeWaterCanvasClass","constructor","waterTexture","debug","renderer","WebGLRenderer","antialias","setSize","window","innerWidth","innerHeight","setPixelRatio","devicePixelRatio","document","body","append","domElement","camera","PerspectiveCamera","position","z","tick","bind","onMouseMove","init","addPlane","geometry","PlaneBufferGeometry","material","MeshNormalMaterial","mesh","Mesh","addEventListener","scene","add","ev","point","x","clientX","y","clientY","addPoint","render","update","requestAnimationFrame","ThreeWaterCanvas","ThreeCanvas","container","CanvasElement","CanvasTheme","console","log","sketch","setupCanvasDrawing","animate","Scene","MeshBasicMaterial","BoxBufferGeometry","alpha","appendChild","background","Color","onWindowResize","map","CanvasTexture","aspect","updateProjectionMatrix","rotation","needsUpdate"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport { __DEBUG__ } from \"../../constants/site/Settings\";\nimport { LXLT_ColorTheme } from \"../../constants/styles/Color\";\nimport {\n  LXLT_WaterTexturePoint,\n  WaterTexture,\n} from \"./water-distort/WaterTexture\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_ThreeWaterCanvas = {\n  container: HTMLDivElement;\n  CanvasElement: HTMLCanvasElement;\n  CanvasTheme: LXLT_ColorTheme;\n};\n\nexport class ThreeWaterCanvasClass<LXLT_ThreeWaterCanvas> {\n  // ______________________________\n  // Types\n  waterTexture: WaterTexture;\n  renderer: THREE.WebGLRenderer;\n  camera: THREE.PerspectiveCamera;\n  scene: THREE.Scene;\n\n  // ______________________________\n  // Constructor\n  constructor() {\n    this.waterTexture = new WaterTexture({ debug: true });\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: false,\n    });\n\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    document.body.append(this.renderer.domElement); // UPDATE ME\n\n    this.camera = new THREE.PerspectiveCamera(\n      45,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      10000\n    );\n    this.camera.position.z = 50;\n\n    this.tick = this.tick.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n\n    this.init();\n  }\n\n  addPlane() {\n    let geometry = new THREE.PlaneBufferGeometry(5, 5, 1, 1);\n    let material = new THREE.MeshNormalMaterial();\n    let mesh = new THREE.Mesh(geometry, material);\n\n    window.addEventListener(\"mousemove\", this.onMouseMove);\n    this.scene.add(mesh);\n  }\n\n  init() {\n    this.addPlane();\n    this.tick();\n  }\n\n  onMouseMove(ev: MouseEvent) {\n    const point: LXLT_WaterTexturePoint = {\n      x: ev.clientX / window.innerWidth,\n      y: ev.clientY / window.innerHeight,\n    };\n    this.waterTexture.addPoint(point);\n  }\n\n  render() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  tick() {\n    this.render();\n    this.waterTexture.update();\n    requestAnimationFrame(this.tick);\n  }\n}\n\nconst ThreeWaterCanvas = new ThreeWaterCanvasClass();\n\n// ______________________________________________________________________________________________________________\n\nexport type LXLT_ThreeCanvasDisplay = (\n  container: HTMLDivElement,\n  CanvasElement: HTMLCanvasElement,\n  CanvasTheme: LXLT_ColorTheme\n) => void;\n\nexport const ThreeCanvas: LXLT_ThreeCanvasDisplay = (\n  container,\n  CanvasElement,\n  CanvasTheme\n) => {\n  __DEBUG__ && console.log(\"ðŸ¤™ Three.js Canvas received:\", CanvasElement);\n\n  let camera, scene, renderer, mesh, material, sketch;\n\n  init();\n  setupCanvasDrawing();\n  animate();\n\n  function init() {\n    camera = new THREE.PerspectiveCamera(\n      50,\n      window.innerWidth / window.innerHeight,\n      1,\n      6000\n    );\n    camera.position.z = 500;\n\n    sketch = container;\n\n    scene = new THREE.Scene();\n\n    material = new THREE.MeshBasicMaterial();\n\n    mesh = new THREE.Mesh(new THREE.BoxBufferGeometry(350, 350, 350), material);\n    scene.add(mesh);\n\n    renderer = new THREE.WebGLRenderer({ antialias: false, alpha: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    sketch.appendChild(renderer.domElement);\n\n    scene.background = new THREE.Color(0x000000);\n\n    window.addEventListener(\"resize\", onWindowResize, false);\n  }\n\n  function setupCanvasDrawing() {\n    material.map = new THREE.CanvasTexture(CanvasElement);\n  }\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  function animate() {\n    requestAnimationFrame(animate);\n\n    mesh.rotation.x += 0.01;\n    mesh.rotation.y += 0.01;\n\n    material.map.needsUpdate = true;\n\n    renderer.render(scene, camera);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}