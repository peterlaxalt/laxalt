{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\n\n/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\nimport { Theme } from \"../../constants/Theme\"; // Begin Component\n// __________________________________________________________________________\n\nvar DharmaCanvasDisplay = function DharmaCanvasDisplay(W, H, ID, BG) {\n  return function (p) {\n    // _________________________________________________\n    // Config\n    // ____________________________\n    // Fonts\n    var dharmaFont; // ____________________________\n    // Typography\n\n    var text = \"LAXALT\";\n    var splitCharacterArray = text.split(\"\");\n    var characters = splitCharacterArray.map(function (character, idx) {\n      return {\n        letter: character,\n        count: 2,\n        idx: idx,\n        copies: 1\n      };\n    });\n    var characterCount = splitCharacterArray.length;\n    var characterWidth = W / characterCount;\n    var characterSize = H * 1.25; // ____________________________\n    // Counts\n\n    var renderCount = 0; // ____________________________\n    // Strokes\n\n    var strokeWidth = 2;\n    var strokeOffset = strokeWidth * 3; // ____________________________\n    // Incrementing\n    // let maxCopies = 30;\n    // let minCopies = 1;\n\n    var isIncrementing = true;\n    isIncrementing; // ____________________________\n    // Translation\n\n    var previousVerticalTranslation = H / 2.25;\n\n    var previousHorizontalTranslation = function previousHorizontalTranslation(idx) {\n      return characterWidth * idx + characterWidth / 2 + strokeOffset;\n    }; // const previousHorizontalTranslation = (idx: number) =>\n    //   characterWidth * idx + characterWidth / 2 + strokeOffset * renderCount;\n    // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n    // let characterVerticalTranslation: number = 0.993; // Multiplied by the viewBoxHeight\n    // let characterHorizontalScale: number = 0.75; // Multiplied by the characterWidth\n    // let characterVerticalScale: number = 1.38; // Multiplied by the characterWidth\n    // _________________________________________________\n    // Preload\n\n\n    p.preload = function () {\n      dharmaFont = p.loadFont(\"/fonts/dharma/dharma_regular.ttf\");\n    }; // _________________________________________________\n    // Setup\n\n\n    p.setup = function () {\n      // Our Canvas\n      p.createCanvas(W, H);\n    }; // _________________________________________________\n    // Draw\n\n\n    p.draw = function () {\n      // p.background(BG);\n      p.textFont(dharmaFont);\n      p.textLeading(0);\n      p.textSize(characterSize);\n      p.textAlign(p.CENTER, p.CENTER);\n      p.fill(\"\".concat(Theme.Color.Galaxy));\n      p.strokeWeight(strokeWidth);\n      p.stroke(BG);\n      p.mouseIsPressed ? renderCount = renderCount + 1 : renderCount = renderCount;\n\n      if (H && W) {\n        characters.map(function (_char, idx) {\n          var countArray = _Array$from(Array(_char.count).keys()); // p.scale(1, 0.5);\n\n\n          countArray.map(function (duplicate, idxx) {\n            // let adjustedDuplicate = char.count > 1 ? char.count : duplicate + 1;\n            previousVerticalTranslation = H / 2.25;\n            p.scale(1, 1 / idxx);\n            p.text(_char.letter, previousHorizontalTranslation(idx), previousVerticalTranslation);\n          });\n          p.scale(1, 1);\n        });\n      }\n    };\n\n    p.windowResized = function () {\n      p.resizeCanvas(W, H);\n    };\n  };\n};\n\nexport default DharmaCanvasDisplay;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/dharma.tsx"],"names":["Theme","DharmaCanvasDisplay","W","H","ID","BG","p","dharmaFont","text","splitCharacterArray","split","characters","map","character","idx","letter","count","copies","characterCount","length","characterWidth","characterSize","renderCount","strokeWidth","strokeOffset","isIncrementing","previousVerticalTranslation","previousHorizontalTranslation","preload","loadFont","setup","createCanvas","draw","textFont","textLeading","textSize","textAlign","CENTER","fill","Color","Galaxy","strokeWeight","stroke","mouseIsPressed","char","countArray","Array","keys","duplicate","idxx","scale","windowResized","resizeCanvas"],"mappings":"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","sourcesContent":["/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n\nimport p5, { Font } from \"p5\";\nimport { Theme } from \"../../constants/Theme\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_DharmaCanvas = {\n  W: number;\n  H: number;\n  ID: number;\n  BG: string;\n};\n\nexport type LXLT_DharmaCanvasDisplay = (\n  W: number,\n  H: number,\n  ID: number,\n  BG: string\n) => (p: p5) => void;\n\ntype LXLT_DharmaCanvasChar = {\n  letter: string;\n  count: number;\n  idx: number;\n  copies: number;\n};\n\nconst DharmaCanvasDisplay: LXLT_DharmaCanvasDisplay = (W, H, ID, BG) => (\n  p: p5\n) => {\n  // _________________________________________________\n  // Config\n\n  // ____________________________\n  // Fonts\n  let dharmaFont: Font;\n\n  // ____________________________\n  // Typography\n  let text = \"LAXALT\";\n\n  let splitCharacterArray = text.split(\"\");\n  let characters: LXLT_DharmaCanvasChar[] = splitCharacterArray.map(\n    (character: string, idx: number) => {\n      return {\n        letter: character,\n        count: 2,\n        idx: idx,\n        copies: 1,\n      };\n    }\n  );\n\n  let characterCount: number = splitCharacterArray.length;\n  let characterWidth: number = W / characterCount;\n  let characterSize: number = H * 1.25;\n\n  // ____________________________\n  // Counts\n  let renderCount: number = 0;\n\n  // ____________________________\n  // Strokes\n  let strokeWidth: number = 2;\n  let strokeOffset: number = strokeWidth * 3;\n\n  // ____________________________\n  // Incrementing\n  // let maxCopies = 30;\n  // let minCopies = 1;\n\n  let isIncrementing: boolean = true;\n  isIncrementing;\n\n  // ____________________________\n  // Translation\n  let previousVerticalTranslation: number = H / 2.25;\n  const previousHorizontalTranslation = (idx: number) =>\n    characterWidth * idx + characterWidth / 2 + strokeOffset;\n\n  // const previousHorizontalTranslation = (idx: number) =>\n  //   characterWidth * idx + characterWidth / 2 + strokeOffset * renderCount;\n\n  // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n  // let characterVerticalTranslation: number = 0.993; // Multiplied by the viewBoxHeight\n  // let characterHorizontalScale: number = 0.75; // Multiplied by the characterWidth\n  // let characterVerticalScale: number = 1.38; // Multiplied by the characterWidth\n\n  // _________________________________________________\n  // Preload\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  };\n\n  // _________________________________________________\n  // Setup\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H);\n  };\n\n  // _________________________________________________\n  // Draw\n  p.draw = () => {\n    // p.background(BG);\n\n    p.textFont(dharmaFont);\n\n    p.textLeading(0);\n    p.textSize(characterSize);\n\n    p.textAlign(p.CENTER, p.CENTER);\n\n    p.fill(`${Theme.Color.Galaxy}`);\n    p.strokeWeight(strokeWidth);\n    p.stroke(BG);\n\n    p.mouseIsPressed\n      ? (renderCount = renderCount + 1)\n      : (renderCount = renderCount);\n\n    if (H && W) {\n      characters.map((char: LXLT_DharmaCanvasChar, idx: number) => {\n        let countArray: number[] = Array.from(Array(char.count).keys());\n\n        // p.scale(1, 0.5);\n\n        countArray.map((duplicate: number, idxx: number) => {\n          // let adjustedDuplicate = char.count > 1 ? char.count : duplicate + 1;\n\n          previousVerticalTranslation = H / 2.25;\n\n          p.scale(1, 1 / idxx);\n          p.text(\n            char.letter,\n            previousHorizontalTranslation(idx),\n            previousVerticalTranslation\n          );\n        });\n\n        p.scale(1, 1);\n      });\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;\n"]},"metadata":{},"sourceType":"module"}