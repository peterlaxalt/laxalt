{"ast":null,"code":"import * as THREE from \"three\";\nexport var ThreeCanvas = function ThreeCanvas(container, CanvasTheme) {\n  var renderer, scene, camera, sketch;\n  var canvas = document.getElementById(\"defaultCanvas0\");\n\n  canvas.onload = function () {\n    // @ts-ignore\n    renderer = new THREE.WebGLRenderer({\n      alpha: true\n    });\n    sketch = container;\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    sketch.appendChild(renderer.domElement);\n    var fov = 75;\n    var aspect = 2; // the canvas default\n\n    var near = 0.1;\n    var far = 5;\n    camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n    camera.position.z = 2;\n    scene = new THREE.Scene();\n    var boxWidth = 1;\n    var boxHeight = 1;\n    var boxDepth = 1;\n    var geometry = new THREE.BoxGeometry(boxWidth, boxHeight, boxDepth);\n    var cubes = []; // just an array we can use to rotate the cubes\n    // @ts-ignore\n\n    var texture = new THREE.CanvasTexture(canvas);\n    var material = new THREE.MeshBasicMaterial({\n      map: texture\n    });\n    var cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    cubes.push(cube); // add to our list of cubes to rotate\n\n    function resizeRendererToDisplaySize(renderer) {\n      var canvas = renderer.domElement;\n      var width = canvas.clientWidth;\n      var height = canvas.clientHeight;\n      var needResize = canvas.width !== width || canvas.height !== height;\n\n      if (needResize) {\n        renderer.setSize(width, height, false);\n      }\n\n      return needResize;\n    }\n\n    function render(time) {\n      time *= 0.001;\n\n      if (resizeRendererToDisplaySize(renderer)) {\n        var _canvas = renderer.domElement;\n        camera.aspect = _canvas.clientWidth / _canvas.clientHeight;\n        camera.updateProjectionMatrix();\n      }\n\n      texture.needsUpdate = true;\n      cubes.forEach(function (cube, ndx) {\n        var speed = 0.2 + ndx * 0.1;\n        var rot = time * speed;\n        cube.rotation.x = rot;\n        cube.rotation.y = rot;\n      });\n      renderer.render(scene, camera);\n      requestAnimationFrame(render);\n    }\n\n    requestAnimationFrame(render);\n  };\n};\n_c = ThreeCanvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreeCanvas\");","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/three/with-canvas-as-texture.ts"],"names":["THREE","ThreeCanvas","container","CanvasTheme","renderer","scene","camera","sketch","canvas","document","getElementById","onload","WebGLRenderer","alpha","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","appendChild","domElement","fov","aspect","near","far","PerspectiveCamera","position","z","Scene","boxWidth","boxHeight","boxDepth","geometry","BoxGeometry","cubes","texture","CanvasTexture","material","MeshBasicMaterial","map","cube","Mesh","add","push","resizeRendererToDisplaySize","width","clientWidth","height","clientHeight","needResize","render","time","updateProjectionMatrix","needsUpdate","forEach","ndx","speed","rot","rotation","x","y","requestAnimationFrame"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport { LXLT_ColorTheme } from \"../../constants/styles/Color\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_ThreeCanvasDisplay = (\n  container: HTMLDivElement,\n  CanvasTheme: LXLT_ColorTheme\n) => void;\n\nexport const ThreeCanvas: LXLT_ThreeCanvasDisplay = (\n  container,\n  CanvasTheme\n) => {\n  var renderer, scene, camera, sketch;\n\n  const canvas = document.getElementById(\"defaultCanvas0\");\n\n  canvas.onload = function () {\n    // @ts-ignore\n    renderer = new THREE.WebGLRenderer({ alpha: true });\n    sketch = container;\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    sketch.appendChild(renderer.domElement);\n\n    const fov = 75;\n    const aspect = 2; // the canvas default\n    const near = 0.1;\n    const far = 5;\n    camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n    camera.position.z = 2;\n\n    scene = new THREE.Scene();\n\n    const boxWidth = 1;\n    const boxHeight = 1;\n    const boxDepth = 1;\n    const geometry = new THREE.BoxGeometry(boxWidth, boxHeight, boxDepth);\n\n    const cubes = []; // just an array we can use to rotate the cubes\n    // @ts-ignore\n    const texture = new THREE.CanvasTexture(canvas);\n\n    const material = new THREE.MeshBasicMaterial({\n      map: texture,\n    });\n    const cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    cubes.push(cube); // add to our list of cubes to rotate\n\n    function resizeRendererToDisplaySize(renderer) {\n      const canvas = renderer.domElement;\n      const width = canvas.clientWidth;\n      const height = canvas.clientHeight;\n      const needResize = canvas.width !== width || canvas.height !== height;\n      if (needResize) {\n        renderer.setSize(width, height, false);\n      }\n      return needResize;\n    }\n\n    function render(time) {\n      time *= 0.001;\n\n      if (resizeRendererToDisplaySize(renderer)) {\n        const canvas = renderer.domElement;\n        camera.aspect = canvas.clientWidth / canvas.clientHeight;\n        camera.updateProjectionMatrix();\n      }\n\n      texture.needsUpdate = true;\n\n      cubes.forEach((cube, ndx) => {\n        const speed = 0.2 + ndx * 0.1;\n        const rot = time * speed;\n        cube.rotation.x = rot;\n        cube.rotation.y = rot;\n      });\n\n      renderer.render(scene, camera);\n\n      requestAnimationFrame(render);\n    }\n\n    requestAnimationFrame(render);\n  };\n};\n"]},"metadata":{},"sourceType":"module"}