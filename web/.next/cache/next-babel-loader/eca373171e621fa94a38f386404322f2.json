{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\nimport { Theme } from \"../../constants/Theme\"; // Begin Component\n// __________________________________________________________________________\n\nconst DharmaCanvasDisplay = (W, H, ID, BG) => p => {\n  // _________________________________________________\n  // Config\n  // ____________________________\n  // Fonts\n  let dharmaFont; // ____________________________\n  // Typography\n\n  let text = \"LAXALT\";\n  let splitCharacterArray = text.split(\"\");\n  let characters = splitCharacterArray.map((character, idx) => {\n    return {\n      letter: character,\n      count: 1,\n      idx: idx,\n      isIncrementing: true,\n      isDecrementing: false\n    };\n  });\n  let characterCount = splitCharacterArray.length;\n  let characterWidth = W / characterCount;\n  let characterSize = H * 1.25;\n  console.log(characterSize, \"characterSize\"); // ____________________________\n  // Counts\n  // let renderCount: number = 0;\n  // ____________________________\n  // Strokes\n\n  let strokeWidth = 4;\n  let strokeOffset = strokeWidth * 3; // ____________________________\n  // Incrementing\n\n  let maxCopies = 30;\n  let minCopies = 1; // ____________________________\n  // Translation\n  // let previousVerticalTranslation: number = H / 2.25;\n\n  let verticalTranslationWhitespaceCompensation = 2.25;\n\n  const previousHorizontalTranslation = idx => characterWidth * idx + characterWidth / 2 + strokeOffset; // const previousHorizontalTranslation = (idx: number) =>\n  //   characterWidth * idx + characterWidth / 2 + strokeOffset * renderCount;\n  // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n  // let characterVerticalTranslation: number = 0.993; // Multiplied by the viewBoxHeight\n  // let characterHorizontalScale: number = 0.75; // Multiplied by the characterWidth\n  // let characterVerticalScale: number = 1.38; // Multiplied by the characterWidth\n  // _________________________________________________\n  // Preload\n\n\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  }; // _________________________________________________\n  // Setup\n\n\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H);\n  }; // _________________________________________________\n  // Draw\n\n\n  p.draw = () => {\n    p.background(BG);\n    p.textFont(dharmaFont);\n    p.textSize(characterSize);\n    p.textAlign(p.CENTER, p.CENTER);\n    p.fill(`${Theme.Color.Galaxy}`);\n    p.strokeWeight(strokeWidth);\n    p.stroke(BG);\n\n    if (H && W) {\n      characters.map((char, idx) => {\n        p.scale(1, 1);\n        let randomPick = Math.random() <= 0.5;\n\n        if (randomPick) {\n          characters[idx] = _objectSpread({}, char, {\n            count: char.isIncrementing ? char.count + 1 : char.count - 1\n          });\n\n          if (char.count === maxCopies) {\n            characters[idx] = _objectSpread({}, char, {\n              isIncrementing: false\n            });\n          }\n\n          if (char.count === minCopies) {\n            characters[idx] = _objectSpread({}, char, {\n              isIncrementing: true\n            });\n          }\n        }\n\n        let countArray = _Array$from(Array(char.count).keys());\n\n        countArray = countArray.map(countNumber => {\n          return countNumber + 1;\n        });\n        countArray.map((countNumber, idxx) => {\n          let verticalScale = 1 / char.count;\n          let verticalSkewDivisible = 2.75;\n          let characterSkewDivisible = 1.3;\n          let duplicateVerticalPosition = char.count == 1 ? H / verticalTranslationWhitespaceCompensation : characterSize / verticalSkewDivisible + characterSize / characterSkewDivisible * idxx;\n          p.push();\n          p.scale(1, verticalScale);\n          p.text(char.letter, previousHorizontalTranslation(idx), duplicateVerticalPosition);\n          p.pop();\n        });\n      });\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/dharma.tsx"],"names":["Theme","DharmaCanvasDisplay","W","H","ID","BG","p","dharmaFont","text","splitCharacterArray","split","characters","map","character","idx","letter","count","isIncrementing","isDecrementing","characterCount","length","characterWidth","characterSize","console","log","strokeWidth","strokeOffset","maxCopies","minCopies","verticalTranslationWhitespaceCompensation","previousHorizontalTranslation","preload","loadFont","setup","createCanvas","draw","background","textFont","textSize","textAlign","CENTER","fill","Color","Galaxy","strokeWeight","stroke","char","scale","randomPick","Math","random","countArray","Array","keys","countNumber","idxx","verticalScale","verticalSkewDivisible","characterSkewDivisible","duplicateVerticalPosition","push","pop","windowResized","resizeCanvas"],"mappings":"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","sourcesContent":["/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n\nimport p5, { Font } from \"p5\";\nimport { Theme } from \"../../constants/Theme\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_DharmaCanvas = {\n  W: number;\n  H: number;\n  ID: number;\n  BG: string;\n};\n\nexport type LXLT_DharmaCanvasDisplay = (\n  W: number,\n  H: number,\n  ID: number,\n  BG: string\n) => (p: p5) => void;\n\ntype LXLT_DharmaCanvasChar = {\n  letter: string;\n  count: number;\n  idx: number;\n  isIncrementing: boolean;\n  isDecrementing: boolean;\n};\n\nconst DharmaCanvasDisplay: LXLT_DharmaCanvasDisplay = (W, H, ID, BG) => (\n  p: p5\n) => {\n  // _________________________________________________\n  // Config\n\n  // ____________________________\n  // Fonts\n  let dharmaFont: Font;\n\n  // ____________________________\n  // Typography\n  let text = \"LAXALT\";\n\n  let splitCharacterArray = text.split(\"\");\n  let characters: LXLT_DharmaCanvasChar[] = splitCharacterArray.map(\n    (character: string, idx: number) => {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n        isIncrementing: true,\n        isDecrementing: false,\n      };\n    }\n  );\n\n  let characterCount: number = splitCharacterArray.length;\n  let characterWidth: number = W / characterCount;\n  let characterSize: number = H * 1.25;\n\n  console.log(characterSize, \"characterSize\");\n\n  // ____________________________\n  // Counts\n  // let renderCount: number = 0;\n\n  // ____________________________\n  // Strokes\n  let strokeWidth: number = 4;\n  let strokeOffset: number = strokeWidth * 3;\n\n  // ____________________________\n  // Incrementing\n  let maxCopies = 30;\n  let minCopies = 1;\n\n  // ____________________________\n  // Translation\n  // let previousVerticalTranslation: number = H / 2.25;\n\n  let verticalTranslationWhitespaceCompensation: number = 2.25;\n  const previousHorizontalTranslation = (idx: number) =>\n    characterWidth * idx + characterWidth / 2 + strokeOffset;\n\n  // const previousHorizontalTranslation = (idx: number) =>\n  //   characterWidth * idx + characterWidth / 2 + strokeOffset * renderCount;\n\n  // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n  // let characterVerticalTranslation: number = 0.993; // Multiplied by the viewBoxHeight\n  // let characterHorizontalScale: number = 0.75; // Multiplied by the characterWidth\n  // let characterVerticalScale: number = 1.38; // Multiplied by the characterWidth\n\n  // _________________________________________________\n  // Preload\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  };\n\n  // _________________________________________________\n  // Setup\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H);\n  };\n\n  // _________________________________________________\n  // Draw\n  p.draw = () => {\n    p.background(BG);\n\n    p.textFont(dharmaFont);\n\n    p.textSize(characterSize);\n\n    p.textAlign(p.CENTER, p.CENTER);\n\n    p.fill(`${Theme.Color.Galaxy}`);\n    p.strokeWeight(strokeWidth);\n    p.stroke(BG);\n\n    if (H && W) {\n      characters.map((char: LXLT_DharmaCanvasChar, idx: number) => {\n        p.scale(1, 1);\n\n        let randomPick = Math.random() <= 0.5;\n\n        if (randomPick) {\n          characters[idx] = {\n            ...char,\n            count: char.isIncrementing ? char.count + 1 : char.count - 1,\n          };\n\n          if (char.count === maxCopies) {\n            characters[idx] = {\n              ...char,\n              isIncrementing: false,\n            };\n          }\n\n          if (char.count === minCopies) {\n            characters[idx] = {\n              ...char,\n              isIncrementing: true,\n            };\n          }\n\n\n        }\n\n        let countArray: number[] = Array.from(Array(char.count).keys());\n\n        countArray = countArray.map((countNumber: number) => {\n          return countNumber + 1;\n        });\n\n        countArray.map((countNumber: number, idxx: number) => {\n          let verticalScale = 1 / char.count;\n\n          let verticalSkewDivisible: number = 2.75;\n          let characterSkewDivisible: number = 1.3;\n\n          let duplicateVerticalPosition: number =\n            char.count == 1\n              ? H / verticalTranslationWhitespaceCompensation\n              : characterSize / verticalSkewDivisible +\n                (characterSize / characterSkewDivisible) * idxx;\n\n          p.push();\n          p.scale(1, verticalScale);\n          p.text(\n            char.letter,\n            previousHorizontalTranslation(idx),\n            duplicateVerticalPosition\n          );\n          p.pop();\n        });\n      });\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;\n"]},"metadata":{},"sourceType":"module"}