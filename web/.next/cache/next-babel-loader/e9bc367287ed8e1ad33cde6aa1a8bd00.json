{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Color.js:\n// This is the sitewide palette.\n// Imports\n// _______________________________________________________\nimport React from \"react\";\nimport { createGlobalStyle } from \"styled-components\"; // Begin Component\n// _______________________________________________________\n\nexport const Color = {\n  // Color Variables\n  varPrimary: \"var(--clrPrimary)\",\n  varSecondary: \"var(--clrSecondary)\",\n  varBackground: \"var(--clrBackground)\",\n  varForeground: \"var(--clrForeground)\",\n  // Core Colors\n  Primary: \"#000000\",\n  Secondary: \"#000000\",\n  Background: \"#FFF8DC\",\n  Text: \"#000000\",\n  // Grayscale Palette\n  Black: \"#000000\",\n  Nightsky: \"#151313\",\n  Warmsky: \"#34281D\",\n  Gravel: \"#4E4135\",\n  Slate: \"#928070\",\n  Tan: \"#C4AC97\",\n  Gray: \"#DAC9BA\",\n  Blush: \"#F6E7D9\",\n  Cream: \"#FFF6EE\",\n  White: \"#FFF6EE\",\n  // Warm Palette\n  Clay: \"#A33609\",\n  Nova: \"#E24809\",\n  Sunlight: \"#E9A200\",\n  Sunset: \"#ED9158\",\n  // Cool Palette\n  Galaxy: \"#111b24\",\n  Deepsea: \"#002F9E\",\n  Ocean: \"#269FE2\",\n  Sky: \"#7AC0E6\",\n  Dino: \"#23023B\",\n  Eggplant: \"#520589\",\n  Lilac: \"#874BB4\",\n  // Feedback Palette\n  Warning: \"#FF8760\",\n  Success: \"#40DA33\"\n};\n/**\n *\n * @name ColorContext_Defaults\n * @description Defaults for our theming context\n *\n */\n\nexport const ColorContext_Defaults = {\n  primary: Color.Primary,\n  secondary: Color.Secondary,\n  foreground: Color.Text,\n  background: Color.Background,\n  setTheme: () => {}\n};\n/**\n *\n * @name useColorContext\n * @description Our hook to update our color context\n * @see https://medium.com/@0n3z3r0n3/react-usecontext-how-to-update-context-from-child-component-8fa2894eee3d\n *\n */\n\nexport const useColorContext = () => {\n  const [colorTheme, setColorTheme] = React.useState(ColorContext_Defaults);\n  const setTheme = React.useCallback(currentColorTheme => {\n    setColorTheme(currentColorTheme);\n  }, []);\n  return _objectSpread(_objectSpread({}, colorTheme), {}, {\n    setTheme\n  });\n};\n/**\n *\n * @name ColorContext\n * @description Our context to provide color themes\n * @see https://medium.com/@0n3z3r0n3/react-usecontext-how-to-update-context-from-child-component-8fa2894eee3d\n *\n */\n\nexport const ColorContext = /*#__PURE__*/React.createContext(ColorContext_Defaults);\n/**\n *\n * @name Palette\n * @description Global CSS Variables for palette\n *\n */\n\nexport const Palette = createGlobalStyle`\n  ::-moz-selection { background: ${Color.varForeground}; color: ${Color.varBackground} }\n  ::selection { background: ${Color.varForeground}; color: ${Color.varBackground} }\n\n  :root {\n    --clrPrimary: ${Color.Primary};\n    --clrSecondary: ${Color.Secondary};\n    --clrBackground: ${Color.Background};\n    --clrForeground: ${Color.Text};\n  }\n`; //////////////////////////////////////////////////////////////////////\n// End Component","map":null,"metadata":{},"sourceType":"module"}