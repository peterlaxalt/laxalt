{"ast":null,"code":"/**\n *\n * hexToRGB.tsx\n * @author Peter Laxalt\n * @description Convert #HEXCODES to RGBA\n * @example hexToRGB('#FF0000', 0.5);\n *\n */\nexport const hexToRGB = (hex, alpha) => {\n  var r = parseInt(hex.slice(1, 3), 16),\n      g = parseInt(hex.slice(3, 5), 16),\n      b = parseInt(hex.slice(5, 7), 16);\n\n  if (alpha !== undefined) {\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + alpha + \")\";\n  } else {\n    return \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\n  }\n};","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/utils/hexToRGB.tsx"],"names":["hexToRGB","hex","alpha","r","parseInt","slice","g","b","undefined"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,MAAMA,QAAQ,GAAG,CAACC,GAAD,EAAcC,KAAd,KAAgC;AACtD,MAAIC,CAAC,GAAGC,QAAQ,CAACH,GAAG,CAACI,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAD,EAAkB,EAAlB,CAAhB;AAAA,MACEC,CAAC,GAAGF,QAAQ,CAACH,GAAG,CAACI,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAD,EAAkB,EAAlB,CADd;AAAA,MAEEE,CAAC,GAAGH,QAAQ,CAACH,GAAG,CAACI,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAD,EAAkB,EAAlB,CAFd;;AAIA,MAAIH,KAAK,KAAKM,SAAd,EAAyB;AACvB,WAAO,UAAUL,CAAV,GAAc,IAAd,GAAqBG,CAArB,GAAyB,IAAzB,GAAgCC,CAAhC,GAAoC,IAApC,GAA2CL,KAA3C,GAAmD,GAA1D;AACD,GAFD,MAEO;AACL,WAAO,SAASC,CAAT,GAAa,IAAb,GAAoBG,CAApB,GAAwB,IAAxB,GAA+BC,CAA/B,GAAmC,GAA1C;AACD;AACF,CAVM","sourcesContent":["/**\n *\n * hexToRGB.tsx\n * @author Peter Laxalt\n * @description Convert #HEXCODES to RGBA\n * @example hexToRGB('#FF0000', 0.5);\n *\n */\n\nexport const hexToRGB = (hex: string, alpha: number) => {\n  var r = parseInt(hex.slice(1, 3), 16),\n    g = parseInt(hex.slice(3, 5), 16),\n    b = parseInt(hex.slice(5, 7), 16);\n\n  if (alpha !== undefined) {\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + alpha + \")\";\n  } else {\n    return \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\n  }\n};\n"]},"metadata":{},"sourceType":"module"}