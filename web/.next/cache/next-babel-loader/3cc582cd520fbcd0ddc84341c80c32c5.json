{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\n\n/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\nimport { Theme } from \"../../constants/Theme\"; // Begin Component\n// __________________________________________________________________________\n\nconst DharmaCanvasDisplay = (W, H, ID, BG) => p => {\n  // _________________________________________________\n  // Config\n  // ____________________________\n  // Fonts\n  let dharmaFont; // ____________________________\n  // Typography\n\n  let text = \"LAXALT\";\n  let splitCharacterArray = text.split(\"\");\n  let characters = splitCharacterArray.map((character, idx) => {\n    return {\n      letter: character,\n      count: 1,\n      idx: idx,\n      copies: 1\n    };\n  });\n  let characterCount = splitCharacterArray.length;\n  let characterWidth = W / characterCount;\n  let characterSize = H * 1.25; // ____________________________\n  // Counts\n\n  let renderCount = 0; // ____________________________\n  // Strokes\n\n  let strokeWidth = 4;\n  let strokeOffset = strokeWidth * 3; // ____________________________\n  // Incrementing\n  // let maxCopies = 30;\n  // let minCopies = 1;\n\n  let isIncrementing = true;\n  isIncrementing; // ____________________________\n  // Translation\n  // let previousVerticalTranslation: number = H / 2.25;\n\n  const previousHorizontalTranslation = idx => characterWidth * idx + characterWidth / 2 + strokeOffset; // const previousHorizontalTranslation = (idx: number) =>\n  //   characterWidth * idx + characterWidth / 2 + strokeOffset * renderCount;\n  // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n  // let characterVerticalTranslation: number = 0.993; // Multiplied by the viewBoxHeight\n  // let characterHorizontalScale: number = 0.75; // Multiplied by the characterWidth\n  // let characterVerticalScale: number = 1.38; // Multiplied by the characterWidth\n  // _________________________________________________\n  // Preload\n\n\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  }; // _________________________________________________\n  // Setup\n\n\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H);\n  }; // _________________________________________________\n  // Draw\n\n\n  p.draw = () => {\n    // p.background(BG);\n    p.textFont(dharmaFont);\n    p.textLeading(0);\n    p.textSize(characterSize);\n    p.textAlign(p.CENTER, p.CENTER);\n    p.fill(`${Theme.Color.Galaxy}`);\n    p.strokeWeight(strokeWidth);\n    p.stroke(BG);\n    p.mouseIsPressed ? renderCount = renderCount + 1 : renderCount = renderCount;\n\n    if (H && W) {\n      characters.map((char, idx) => {\n        p.scale(1, 1);\n\n        let countArray = _Array$from(Array(char.count).keys()); // let verticalDivisble: number = 10;\n        // let verticalPosition: number = H / verticalDivisble;\n        // p.scale(1, 0.5);\n\n\n        countArray.map((duplicate, idxx) => {\n          // let adjustedDuplicate = char.count > 1 ? char.count : duplicate + 1;\n          // let verticalScale = char.count > 0 ? H / char.count / H : 1;\n          let verticalScale = .5; // let duplicateVerticalPosition = (characterSize * verticalScale * idxx) * char.count;\n\n          let duplicateVerticalPosition = H / 2.25 + characterSize * .5;\n          p.push();\n          p.scale(1, verticalScale);\n          p.text(char.letter, previousHorizontalTranslation(idx), duplicateVerticalPosition);\n          p.pop();\n        });\n      });\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/dharma.tsx"],"names":["Theme","DharmaCanvasDisplay","W","H","ID","BG","p","dharmaFont","text","splitCharacterArray","split","characters","map","character","idx","letter","count","copies","characterCount","length","characterWidth","characterSize","renderCount","strokeWidth","strokeOffset","isIncrementing","previousHorizontalTranslation","preload","loadFont","setup","createCanvas","draw","textFont","textLeading","textSize","textAlign","CENTER","fill","Color","Galaxy","strokeWeight","stroke","mouseIsPressed","char","scale","countArray","Array","keys","duplicate","idxx","verticalScale","duplicateVerticalPosition","push","pop","windowResized","resizeCanvas"],"mappings":"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","sourcesContent":["/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n\nimport p5, { Font } from \"p5\";\nimport { Theme } from \"../../constants/Theme\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_DharmaCanvas = {\n  W: number;\n  H: number;\n  ID: number;\n  BG: string;\n};\n\nexport type LXLT_DharmaCanvasDisplay = (\n  W: number,\n  H: number,\n  ID: number,\n  BG: string\n) => (p: p5) => void;\n\ntype LXLT_DharmaCanvasChar = {\n  letter: string;\n  count: number;\n  idx: number;\n  copies: number;\n};\n\nconst DharmaCanvasDisplay: LXLT_DharmaCanvasDisplay = (W, H, ID, BG) => (\n  p: p5\n) => {\n  // _________________________________________________\n  // Config\n\n  // ____________________________\n  // Fonts\n  let dharmaFont: Font;\n\n  // ____________________________\n  // Typography\n  let text = \"LAXALT\";\n\n  let splitCharacterArray = text.split(\"\");\n  let characters: LXLT_DharmaCanvasChar[] = splitCharacterArray.map(\n    (character: string, idx: number) => {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n        copies: 1,\n      };\n    }\n  );\n\n  let characterCount: number = splitCharacterArray.length;\n  let characterWidth: number = W / characterCount;\n  let characterSize: number = H * 1.25;\n\n  // ____________________________\n  // Counts\n  let renderCount: number = 0;\n\n  // ____________________________\n  // Strokes\n  let strokeWidth: number = 4;\n  let strokeOffset: number = strokeWidth * 3;\n\n  // ____________________________\n  // Incrementing\n  // let maxCopies = 30;\n  // let minCopies = 1;\n\n  let isIncrementing: boolean = true;\n  isIncrementing;\n\n  // ____________________________\n  // Translation\n  // let previousVerticalTranslation: number = H / 2.25;\n  const previousHorizontalTranslation = (idx: number) =>\n    characterWidth * idx + characterWidth / 2 + strokeOffset;\n\n  // const previousHorizontalTranslation = (idx: number) =>\n  //   characterWidth * idx + characterWidth / 2 + strokeOffset * renderCount;\n\n  // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n  // let characterVerticalTranslation: number = 0.993; // Multiplied by the viewBoxHeight\n  // let characterHorizontalScale: number = 0.75; // Multiplied by the characterWidth\n  // let characterVerticalScale: number = 1.38; // Multiplied by the characterWidth\n\n  // _________________________________________________\n  // Preload\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  };\n\n  // _________________________________________________\n  // Setup\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H);\n  };\n\n  // _________________________________________________\n  // Draw\n  p.draw = () => {\n    // p.background(BG);\n\n    p.textFont(dharmaFont);\n\n    p.textLeading(0);\n    p.textSize(characterSize);\n\n    p.textAlign(p.CENTER, p.CENTER);\n\n    p.fill(`${Theme.Color.Galaxy}`);\n    p.strokeWeight(strokeWidth);\n    p.stroke(BG);\n\n    p.mouseIsPressed\n      ? (renderCount = renderCount + 1)\n      : (renderCount = renderCount);\n\n    if (H && W) {\n      characters.map((char: LXLT_DharmaCanvasChar, idx: number) => {\n        p.scale(1, 1);\n\n        let countArray: number[] = Array.from(Array(char.count).keys());\n        // let verticalDivisble: number = 10;\n        // let verticalPosition: number = H / verticalDivisble;\n\n        // p.scale(1, 0.5);\n\n        countArray.map((duplicate: number, idxx: number) => {\n          // let adjustedDuplicate = char.count > 1 ? char.count : duplicate + 1;\n\n          // let verticalScale = char.count > 0 ? H / char.count / H : 1;\n          let verticalScale = .5;\n          // let duplicateVerticalPosition = (characterSize * verticalScale * idxx) * char.count;\n          let duplicateVerticalPosition = (H / 2.25) + (characterSize * .5);\n\n          p.push();\n          p.scale(1, verticalScale);\n          p.text(\n            char.letter,\n            previousHorizontalTranslation(idx),\n            duplicateVerticalPosition\n          );\n          p.pop();\n        });\n      });\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;\n"]},"metadata":{},"sourceType":"module"}