{"ast":null,"code":"/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n// Begin Component\n// __________________________________________________________________________\nvar DharmaCanvasDisplay = function DharmaCanvasDisplay(W, H, ID, BG) {\n  return function (p) {\n    // _________________________________________________\n    // Config\n    var dharmaFont;\n    var text = \"LAXALT\";\n    var splitCharacterArray = text.split(\"\");\n    var characters = splitCharacterArray.map(function (character, idx) {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n        copies: Math.random() <= 0.5\n      };\n    });\n    var viewBoxHeight = H;\n    var viewBoxWidth = W;\n    var characterCount = splitCharacterArray.length;\n    var characterWidth = viewBoxWidth / characterCount; // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n\n    var characterVerticalTranslation = 0.993; // Multiplied by the viewBoxHeight\n\n    var characterHorizontalScale = 0.75; // Multiplied by the characterWidth\n\n    var characterVerticalScale = 1.38; // Multiplied by the characterWidth\n    // let countArray: number[] = Array.from(Array(characters.count).keys());\n    // _________________________________________________\n    // Preload\n\n    p.preload = function () {\n      dharmaFont = p.loadFont(\"/fonts/dharma/dharma_regular.ttf\");\n    }; // _________________________________________________\n    // Setup\n\n\n    p.setup = function () {\n      // Our Canvas\n      p.createCanvas(W, H, p.WEBGL);\n      p.noStroke();\n    }; // _________________________________________________\n    // Draw\n\n\n    p.draw = function () {\n      // rect gives us some geometry on the screen\n      p.background(BG);\n      p.textFont(dharmaFont);\n      p.textLeading(0);\n      p.textSize(H * 1.25);\n      characters.map(function (_char) {\n        p.text(_char, 0, -40);\n        p.fill(\"black\");\n      });\n      p.textAlign(p.CENTER, p.CENTER);\n    };\n\n    p.windowResized = function () {\n      p.resizeCanvas(W, H);\n    };\n  };\n};\n\nexport default DharmaCanvasDisplay;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/dharma.tsx"],"names":["DharmaCanvasDisplay","W","H","ID","BG","p","dharmaFont","text","splitCharacterArray","split","characters","map","character","idx","letter","count","copies","Math","random","viewBoxHeight","viewBoxWidth","characterCount","length","characterWidth","characterVerticalTranslation","characterHorizontalScale","characterVerticalScale","preload","loadFont","setup","createCanvas","WEBGL","noStroke","draw","background","textFont","textLeading","textSize","char","fill","textAlign","CENTER","windowResized","resizeCanvas"],"mappings":"AAAA;;;;;;AASA;AACA;AAuBA,IAAMA,mBAA6C,GAAG,SAAhDA,mBAAgD,CAACC,CAAD,EAAIC,CAAJ,EAAOC,EAAP,EAAWC,EAAX;AAAA,SAAkB,UACtEC,CADsE,EAEnE;AACH;AACA;AACA,QAAIC,UAAJ;AAEA,QAAIC,IAAI,GAAG,QAAX;AACA,QAAIC,mBAAmB,GAAGD,IAAI,CAACE,KAAL,CAAW,EAAX,CAA1B;AACA,QAAIC,UAAmC,GAAGF,mBAAmB,CAACG,GAApB,CACxC,UAACC,SAAD,EAAoBC,GAApB,EAAoC;AAClC,aAAO;AACLC,QAAAA,MAAM,EAAEF,SADH;AAELG,QAAAA,KAAK,EAAE,CAFF;AAGLF,QAAAA,GAAG,EAAEA,GAHA;AAILG,QAAAA,MAAM,EAAEC,IAAI,CAACC,MAAL,MAAiB;AAJpB,OAAP;AAMD,KARuC,CAA1C;AAWA,QAAIC,aAAqB,GAAGjB,CAA5B;AACA,QAAIkB,YAAoB,GAAGnB,CAA3B;AAEA,QAAIoB,cAAsB,GAAGb,mBAAmB,CAACc,MAAjD;AACA,QAAIC,cAAsB,GAAGH,YAAY,GAAGC,cAA5C,CAtBG,CAwBH;;AACA,QAAIG,4BAAoC,GAAG,KAA3C,CAzBG,CAyB+C;;AAClD,QAAIC,wBAAgC,GAAG,IAAvC,CA1BG,CA0B0C;;AAC7C,QAAIC,sBAA8B,GAAG,IAArC,CA3BG,CA2BwC;AAE3C;AAEA;AACA;;AACArB,IAAAA,CAAC,CAACsB,OAAF,GAAY,YAAM;AAChBrB,MAAAA,UAAU,GAAGD,CAAC,CAACuB,QAAF,oCAAb;AACD,KAFD,CAjCG,CAqCH;AACA;;;AACAvB,IAAAA,CAAC,CAACwB,KAAF,GAAU,YAAM;AACd;AACAxB,MAAAA,CAAC,CAACyB,YAAF,CAAe7B,CAAf,EAAkBC,CAAlB,EAAqBG,CAAC,CAAC0B,KAAvB;AACA1B,MAAAA,CAAC,CAAC2B,QAAF;AACD,KAJD,CAvCG,CA6CH;AACA;;;AACA3B,IAAAA,CAAC,CAAC4B,IAAF,GAAS,YAAM;AACb;AAEA5B,MAAAA,CAAC,CAAC6B,UAAF,CAAa9B,EAAb;AACAC,MAAAA,CAAC,CAAC8B,QAAF,CAAW7B,UAAX;AACAD,MAAAA,CAAC,CAAC+B,WAAF,CAAc,CAAd;AACA/B,MAAAA,CAAC,CAACgC,QAAF,CAAWnC,CAAC,GAAG,IAAf;AAEAQ,MAAAA,UAAU,CAACC,GAAX,CAAe,UAAC2B,KAAD,EAAiC;AAC9CjC,QAAAA,CAAC,CAACE,IAAF,CAAO+B,KAAP,EAAa,CAAb,EAAgB,CAAC,EAAjB;AACAjC,QAAAA,CAAC,CAACkC,IAAF,CAAO,OAAP;AACD,OAHD;AAKAlC,MAAAA,CAAC,CAACmC,SAAF,CAAYnC,CAAC,CAACoC,MAAd,EAAsBpC,CAAC,CAACoC,MAAxB;AACD,KAdD;;AAgBApC,IAAAA,CAAC,CAACqC,aAAF,GAAkB,YAAM;AACtBrC,MAAAA,CAAC,CAACsC,YAAF,CAAe1C,CAAf,EAAkBC,CAAlB;AACD,KAFD;AAGD,GApEqD;AAAA,CAAtD;;AAsEA,eAAeF,mBAAf","sourcesContent":["/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n\nimport p5, { Font } from \"p5\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_DharmaCanvas = {\n  W: number;\n  H: number;\n  ID: number;\n  BG: string;\n};\n\nexport type LXLT_DharmaCanvasDisplay = (\n  W: number,\n  H: number,\n  ID: number,\n  BG: string\n) => (p: p5) => void;\n\ntype LXLT_DharmaCanvasChar = {\n  letter: string;\n  count: number;\n  idx: number;\n  copies: boolean;\n};\n\nconst DharmaCanvasDisplay: LXLT_DharmaCanvasDisplay = (W, H, ID, BG) => (\n  p: p5\n) => {\n  // _________________________________________________\n  // Config\n  let dharmaFont: Font;\n\n  let text = \"LAXALT\";\n  let splitCharacterArray = text.split(\"\");\n  let characters: LXLT_DharmaCanvasChar[] = splitCharacterArray.map(\n    (character: string, idx: number) => {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n        copies: Math.random() <= 0.5,\n      };\n    }\n  );\n\n  let viewBoxHeight: number = H;\n  let viewBoxWidth: number = W;\n\n  let characterCount: number = splitCharacterArray.length;\n  let characterWidth: number = viewBoxWidth / characterCount;\n\n  // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n  let characterVerticalTranslation: number = 0.993; // Multiplied by the viewBoxHeight\n  let characterHorizontalScale: number = 0.75; // Multiplied by the characterWidth\n  let characterVerticalScale: number = 1.38; // Multiplied by the characterWidth\n\n  // let countArray: number[] = Array.from(Array(characters.count).keys());\n\n  // _________________________________________________\n  // Preload\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  };\n\n  // _________________________________________________\n  // Setup\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H, p.WEBGL);\n    p.noStroke();\n  };\n\n  // _________________________________________________\n  // Draw\n  p.draw = () => {\n    // rect gives us some geometry on the screen\n\n    p.background(BG);\n    p.textFont(dharmaFont);\n    p.textLeading(0);\n    p.textSize(H * 1.25);\n\n    characters.map((char: LXLT_DharmaCanvasChar) => {\n      p.text(char, 0, -40);\n      p.fill(\"black\");\n    });\n\n    p.textAlign(p.CENTER, p.CENTER);\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;\n"]},"metadata":{},"sourceType":"module"}