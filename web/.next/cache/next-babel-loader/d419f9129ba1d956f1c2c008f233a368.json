{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nvar __jsx = React.createElement;\n// Core\nimport React from \"react\";\nimport { Theme } from \"../../../constants/Theme\";\nimport { DharmaTypeClassName, DharmaTypeStyle } from \"../../_svg/DharmaType/styles.scss\"; // Begin Types\n// __________________________________________________________________________________________\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name DharmaCounter\n * @author Peter Laxalt\n *\n */\nexport class DharmaCounter extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"\",\n      characters: [],\n      viewBoxHeight: 0,\n      viewBoxWidth: 0,\n      characterWidth: 0,\n      offsetCount: 3,\n      characterVerticalTranslation: 0,\n      characterHorizontalScale: 0,\n      characterVerticalScale: 0,\n      isInitialized: false\n    };\n    this.incrementLetterCount = this.incrementLetterCount.bind(this);\n    this.decrementLetterCount = this.decrementLetterCount.bind(this);\n    this.resetLetterCount = this.resetLetterCount.bind(this);\n    this.updateLetterCount = this.updateLetterCount.bind(this);\n    this.letterCountTimer = this.letterCountTimer.bind(this);\n    this.offsetCountTimer = this.offsetCountTimer.bind(this);\n    this.incrementOffsetCount = this.incrementOffsetCount.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.text) {\n      // ____________________________________________\n      // Get text / create array\n      let {\n        text\n      } = this.props;\n      let splitCharacterArray = text.split(\"\");\n      let characterArray = splitCharacterArray.map((character, idx) => {\n        return {\n          letter: character,\n          count: 1,\n          idx: idx,\n          copies: Math.random() <= 0.5\n        };\n      }); // ____________________________________________\n      // USE THESE TO TWEAK YOUR CHARACTERS TO FIT\n\n      let viewBoxHeight = 100;\n      let viewBoxWidth = 100;\n      let characterCount = splitCharacterArray.length;\n      let characterWidth = viewBoxWidth / characterCount; // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n\n      let characterVerticalTranslation = 0.993; // Multiplied by the viewBoxHeight\n\n      let characterHorizontalScale = 0.75; // Multiplied by the characterWidth\n\n      let characterVerticalScale = 1.38; // Multiplied by the characterWidth\n\n      this.setState({\n        text: text,\n        characters: characterArray,\n        viewBoxHeight: viewBoxHeight,\n        viewBoxWidth: viewBoxWidth,\n        characterWidth: characterWidth,\n        characterHorizontalScale: characterHorizontalScale,\n        characterVerticalScale: characterVerticalScale,\n        characterVerticalTranslation: characterVerticalTranslation,\n        isInitialized: true\n      });\n      this.letterCountTimer();\n      this.offsetCountTimer();\n    }\n  }\n\n  incrementLetterCount(id) {\n    this.setState({\n      characters: this.state.characters.map((character, idx) => {\n        return {\n          letter: character.letter,\n          count: id == character.idx ? character.count + 1 : character.count,\n          idx: idx,\n          copies: Math.random() <= 0.5\n        };\n      })\n    });\n    return;\n  }\n\n  decrementLetterCount(id) {\n    this.setState({\n      characters: this.state.characters.map((character, idx) => {\n        return {\n          letter: character.letter,\n          count: id == character.idx ? character.count - 1 : character.count,\n          idx: idx,\n          copies: Math.random() <= 0.5\n        };\n      })\n    });\n    return;\n  }\n\n  resetLetterCount(id) {\n    this.setState({\n      characters: this.state.characters.map((character, idx) => {\n        return {\n          letter: character.letter,\n          count: id == character.idx ? 1 : character.count,\n          idx: idx,\n          copies: Math.random() <= 0.5\n        };\n      })\n    });\n    return;\n  }\n\n  updateLetterCount(id) {\n    if (this.state.characters && this.state.characters.length > 0) {\n      let matchedCharacter = this.state.characters.filter(character => character.idx == id)[0];\n      let maxCount = 4;\n\n      if (matchedCharacter) {\n        if (matchedCharacter.count === maxCount) {\n          this.resetLetterCount(id);\n        } else {\n          this.incrementLetterCount(id);\n        }\n      } else {\n        return;\n      }\n    } else {\n      return;\n    }\n\n    return;\n  }\n\n  letterCountTimer() {\n    function generateRandomInteger(min, max) {\n      return Math.floor(min + Math.random() * (max + 1 - min));\n    }\n\n    window.setInterval(() => this.updateLetterCount(generateRandomInteger(0, this.state.characters.length)), 3000);\n  }\n\n  incrementOffsetCount() {\n    this.setState({\n      offsetCount: this.state.offsetCount < 15 ? this.state.offsetCount + 1 : 2\n    });\n    return;\n  }\n\n  offsetCountTimer() {\n    window.setInterval(() => this.incrementOffsetCount(), 5000);\n  }\n\n  render() {\n    let offsetCount = this.state.offsetCount;\n\n    var offsetArr = _Array$from(Array(offsetCount).keys());\n\n    return __jsx(React.Fragment, null, __jsx(DharmaCounterDisplay, _extends({\n      updateLetterCount: this.updateLetterCount\n    }, this.state)), offsetArr.map((n, idx) => {\n      return __jsx(DharmaCounterDisplay, _extends({\n        outlined: true,\n        offset: n,\n        key: idx,\n        updateLetterCount: this.updateLetterCount\n      }, this.state));\n    }));\n  }\n\n}\n\nconst DharmaCounterDisplay = props => {\n  let {\n    viewBoxHeight,\n    viewBoxWidth,\n    characters,\n    characterWidth,\n    characterHorizontalScale,\n    characterVerticalScale,\n    characterVerticalTranslation,\n    updateLetterCount,\n    offset,\n    outlined,\n    addClass\n  } = props;\n  return __jsx(DharmaTypeStyle, {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: `0 0 ${viewBoxWidth} ${viewBoxHeight}`,\n    preserveAspectRatio: \"none\",\n    className: `${DharmaTypeClassName} ${DharmaTypeClassName}--counter ${offset ? `${DharmaTypeClassName}--offset` : \"\"} ${addClass}`,\n    style: {\n      [`--${DharmaTypeClassName}-font-size`]: `${viewBoxHeight}px`,\n      [`--${DharmaTypeClassName}-offset`]: `${offset ? offset : 0}`\n    }\n  }, __jsx(\"g\", null, characters.map((char, idx) => {\n    let countArray = _Array$from(Array(char.count).keys());\n\n    return countArray.map((duplicate, idxx) => {\n      let adjustedDuplicate = char.count > 1 ? char.count : duplicate + 1;\n      let canCopy = Math.random() <= 0.5;\n      let adjustedVerticalTranslation = viewBoxHeight / adjustedDuplicate * (idxx + 1) * characterVerticalTranslation;\n      let adjustedVerticalScale = characterVerticalScale / adjustedDuplicate;\n      return __jsx(\"g\", {\n        className: `${DharmaTypeClassName}__character-wrapper`,\n        \"data-char-id\": idx,\n        \"data-char-count\": duplicate,\n        key: idxx,\n        onClick: () => updateLetterCount(idx),\n        style: {\n          display: outlined && char.copies && canCopy ? \"none\" : \"inherit\"\n        }\n      }, __jsx(\"filter\", {\n        id: `displacementFilter__${idx}__${idxx}${outlined ? \"__outlined\" : \"\"}`\n      }, !outlined && __jsx(React.Fragment, null, __jsx(\"feTurbulence\", {\n        type: \"turbulence\" // baseFrequency={0.6 * (idxx * 0.05)}\n        // numOctaves={1 * (idxx + 20)}\n        ,\n        baseFrequency: 0,\n        numOctaves: 0,\n        result: \"turbulence\"\n      }), __jsx(\"feDisplacementMap\", {\n        in2: \"turbulence\",\n        in: \"SourceGraphic\" // scale={3 - idxx * 0.5}\n        ,\n        scale: 0,\n        xChannelSelector: \"R\",\n        yChannelSelector: \"G\"\n      })), outlined && __jsx(React.Fragment, null, __jsx(\"feFlood\", {\n        \"flood-color\": Theme.Color.varBackground,\n        \"flood-opacity\": \"1\",\n        result: \"PINK\"\n      }), __jsx(\"feMorphology\", {\n        in: \"SourceAlpha\",\n        result: \"DILATED\",\n        operator: \"dilate\",\n        radius: \".1\"\n      }), __jsx(\"feComposite\", {\n        in: \"PINK\",\n        in2: \"DILATED\",\n        operator: \"in\",\n        result: \"OUTLINE\"\n      }), __jsx(\"feMerge\", null, __jsx(\"feMergeNode\", {\n        in: \"OUTLINE\"\n      }), __jsx(\"feMergeNode\", {\n        in: \"SourceGraphic\"\n      })))), __jsx(\"text\", {\n        className: `${DharmaTypeClassName}__character`,\n        transform: `translate(${characterWidth * idx} ${adjustedVerticalTranslation}) scale(${characterHorizontalScale}, ${adjustedVerticalScale})`,\n        style: {\n          [`--${DharmaTypeClassName}-key`]: idx,\n          filter: `url(#displacementFilter__${idx}__${idxx}${outlined ? \"__outlined\" : \"\"})`\n        }\n      }, __jsx(\"tspan\", {\n        className: `${DharmaTypeClassName}__letter`\n      }, char.letter)));\n    });\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}