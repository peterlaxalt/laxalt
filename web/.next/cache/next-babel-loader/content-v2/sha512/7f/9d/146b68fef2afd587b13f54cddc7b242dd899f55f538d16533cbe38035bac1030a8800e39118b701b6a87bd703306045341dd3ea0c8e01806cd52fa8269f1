{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/manzanita/Repositories/laxalt/web/components/ThemePicker/ThemePicker.tsx\";\n// Core\nimport React, { useContext } from \"react\";\nimport { __DEBUG__ } from \"../../constants/site/Settings\";\nimport { ColorContext } from \"../../constants/styles/Color\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemePickerClassName, ThemePickerStyle } from \"./styles.scss\"; // Begin Types\n// __________________________________________________________________________________________\n\nexport const ColorThemes = [{\n  name: \"default\",\n  primary: Theme.Color.Primary,\n  secondary: Theme.Color.Secondary,\n  background: Theme.Color.Background,\n  foreground: Theme.Color.Primary\n}, {\n  name: \"galaxy\",\n  primary: \"#FFF8DC\",\n  secondary: \"#FFF8DC\",\n  background: Theme.Color.Primary,\n  foreground: \"#FFF8DC\"\n}, {\n  name: \"salmon\",\n  primary: \"#000000\",\n  secondary: \"#000000\",\n  background: \"#FF8760\",\n  foreground: \"#000000\"\n}, {\n  name: \"lemon\",\n  primary: \"#003eff\",\n  secondary: \"#003eff\",\n  background: \"#F4FF5E\",\n  foreground: \"#003eff\"\n}, {\n  name: \"goldenrod\",\n  primary: \"#393349\",\n  secondary: \"#393349\",\n  background: \"#DAA520\",\n  foreground: \"#393349\"\n}, {\n  name: \"cadetblue\",\n  primary: \"#003eff\",\n  secondary: \"#003eff\",\n  background: \"#ffb5f9\",\n  foreground: \"#003eff\"\n}, {\n  name: \"orangered\",\n  primary: \"#FFF8DC\",\n  secondary: \"#FFF8DC\",\n  background: \"#FF4500\",\n  foreground: \"#FFF8DC\"\n}]; // Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemePickerWithHook\n * @author Peter Laxalt\n *\n */\n\nexport class ThemePickerWithHook extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTheme: {\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Text\n      },\n      availableThemes: ColorThemes\n    };\n    this.setNewTheme = this.setNewTheme.bind(this);\n  }\n\n  componentDidMount() {\n    if (\"undefined\") {\n      window.laxaltUniversalTheme = this.state.activeTheme;\n      let nextBodyElement = document.getElementById(\"__next\");\n\n      if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", this.state.activeTheme.name);\n      } // _________________________\n      // Change if dark mode detected\n\n\n      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        this.setNewTheme(this.state.availableThemes[1]);\n      }\n\n      __DEBUG__ && console.log(\"ðŸŽ¨ theme set\", window.laxaltUniversalTheme);\n    }\n  }\n\n  setNewTheme(theme) {\n    const {\n      setTheme\n    } = this.props;\n    this.setState({\n      activeTheme: theme\n    });\n\n    if (\"undefined\") {\n      window.laxaltUniversalTheme = theme;\n      let nextBodyElement = document.getElementById(\"__next\");\n\n      if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", theme.name);\n      }\n    }\n\n    setTheme(theme);\n  }\n\n  render() {\n    let {\n      activeTheme,\n      availableThemes\n    } = this.state; // const SetGlobalTheme = createGlobalStyle`\n    //   ${\n    //     activeTheme\n    //       ? CssUtils.CreateTheme(\n    //           activeTheme.primary,\n    //           activeTheme.secondary,\n    //           activeTheme.background,\n    //           activeTheme.foreground\n    //         )\n    //       : \"\"\n    //   }\n    // `;\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(ThemePickerStyle, {\n        className: `${ThemePickerClassName}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${ThemePickerClassName}__label`,\n          children: \"Change Theme\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), availableThemes ? availableThemes.map((themeItem, idx) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `${ThemePickerClassName}__option ${ThemePickerClassName}__option--${themeItem.name === activeTheme.name ? \"active\" : \"inactive\"}`,\n            onClick: () => this.setNewTheme(themeItem),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: `${ThemePickerClassName}__option__el ${ThemePickerClassName}__option__el--primary`,\n              style: {\n                backgroundColor: themeItem.background,\n                border: `1px solid ${themeItem.foreground}`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `${ThemePickerClassName}__option__el ${ThemePickerClassName}__option__el--secondary`,\n              style: {\n                backgroundColor: themeItem.foreground\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 21\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 19\n          }, this);\n        }) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\nexport const ThemePicker = () => {\n  const {\n    setTheme\n  } = useContext(ColorContext);\n  return /*#__PURE__*/_jsxDEV(ThemePickerWithHook, {\n    setTheme: setTheme\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 10\n  }, this);\n};","map":{"version":3,"sources":["/Users/manzanita/Repositories/laxalt/web/components/ThemePicker/ThemePicker.tsx"],"names":["React","useContext","__DEBUG__","ColorContext","Theme","ThemePickerClassName","ThemePickerStyle","ColorThemes","name","primary","Color","Primary","secondary","Secondary","background","Background","foreground","ThemePickerWithHook","PureComponent","constructor","props","state","activeTheme","Text","availableThemes","setNewTheme","bind","componentDidMount","window","laxaltUniversalTheme","nextBodyElement","document","getElementById","setAttribute","matchMedia","matches","console","log","theme","setTheme","setState","render","map","themeItem","idx","backgroundColor","border","ThemePicker"],"mappings":"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","sourcesContent":["// Core\nimport React, { useContext } from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { __DEBUG__ } from \"../../constants/site/Settings\";\nimport {\n  ColorContext,\n  LXLT_ColorTheme,\n} from \"../../constants/styles/Color\";\nimport { CssUtils } from \"../../constants/styles/CssUtils\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemePickerClassName, ThemePickerStyle } from \"./styles.scss\";\n\n// Begin Types\n// __________________________________________________________________________________________\n\ntype LXLT_ThemePicker = {\n  setTheme: (theme: LXLT_ColorTheme) => void;\n};\n\n// type LXLT_Theme = {\n// name: \"default\" | \"white\" | \"goldenrod\" | \"cadetblue\" | \"orangered\" | \"galaxy\";\n//   primary: string;\n//   secondary: string;\n//   background: string;\n//   foreground: string;\n// };\n\ntype LXLT_ThemePickerState = {\n  availableThemes: LXLT_ColorTheme[];\n  activeTheme?: LXLT_ColorTheme;\n};\n\n\nexport const ColorThemes: LXLT_ColorTheme[] = [\n  {\n    name: \"default\",\n    primary: Theme.Color.Primary,\n    secondary: Theme.Color.Secondary,\n    background: Theme.Color.Background,\n    foreground: Theme.Color.Primary,\n  },\n  {\n    name: \"galaxy\",\n    primary: \"#FFF8DC\",\n    secondary: \"#FFF8DC\",\n    background: Theme.Color.Primary,\n    foreground: \"#FFF8DC\",\n  },\n  {\n    name: \"salmon\",\n    primary: \"#000000\",\n    secondary: \"#000000\",\n    background: \"#FF8760\",\n    foreground: \"#000000\",\n  },\n  {\n    name: \"lemon\",\n    primary: \"#003eff\",\n    secondary: \"#003eff\",\n    background: \"#F4FF5E\",\n    foreground: \"#003eff\",\n  },\n  {\n    name: \"goldenrod\",\n    primary: \"#393349\",\n    secondary: \"#393349\",\n    background: \"#DAA520\",\n    foreground: \"#393349\",\n  },\n  {\n    name: \"cadetblue\",\n    primary: \"#003eff\",\n    secondary: \"#003eff\",\n    background: \"#ffb5f9\",\n    foreground: \"#003eff\",\n  },\n  {\n    name: \"orangered\",\n    primary: \"#FFF8DC\",\n    secondary: \"#FFF8DC\",\n    background: \"#FF4500\",\n    foreground: \"#FFF8DC\",\n  },\n];\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemePickerWithHook\n * @author Peter Laxalt\n *\n */\nexport class ThemePickerWithHook extends React.PureComponent<\n  LXLT_ThemePicker,\n  LXLT_ThemePickerState\n> {\n  constructor(props: LXLT_ThemePicker) {\n    super(props);\n\n    this.state = {\n      activeTheme: {\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Text,\n      },\n      availableThemes: ColorThemes,\n    };\n\n    this.setNewTheme = this.setNewTheme.bind(this);\n  }\n\n  componentDidMount() {\n    if (typeof window) {\n      window.laxaltUniversalTheme = this.state.activeTheme;\n\n      let nextBodyElement = document.getElementById(\"__next\");\n\n      if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", this.state.activeTheme.name);\n      }\n\n      // _________________________\n      // Change if dark mode detected\n      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        this.setNewTheme(this.state.availableThemes[1]);\n      }\n\n      __DEBUG__ && console.log(\"ðŸŽ¨ theme set\", window.laxaltUniversalTheme);\n    }\n  }\n\n  setNewTheme(theme: LXLT_ColorTheme) {\n    const { setTheme } = this.props;\n\n    this.setState({\n      activeTheme: theme,\n    });\n\n    if (typeof window) {\n      window.laxaltUniversalTheme = theme;\n\n      let nextBodyElement = document.getElementById(\"__next\");\n\n      if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", theme.name);\n      }\n    }\n\n    setTheme(theme);\n  }\n\n  render() {\n    let { activeTheme, availableThemes } = this.state;\n\n    // const SetGlobalTheme = createGlobalStyle`\n    //   ${\n    //     activeTheme\n    //       ? CssUtils.CreateTheme(\n    //           activeTheme.primary,\n    //           activeTheme.secondary,\n    //           activeTheme.background,\n    //           activeTheme.foreground\n    //         )\n    //       : \"\"\n    //   }\n    // `;\n\n    return (\n      <>\n        {/* {activeTheme && activeTheme.name !== \"default\" ? (\n          <SetGlobalTheme />\n        ) : null} */}\n        <ThemePickerStyle className={`${ThemePickerClassName}`}>\n          <div className={`${ThemePickerClassName}__label`}>Change Theme</div>\n\n          {availableThemes\n            ? availableThemes.map((themeItem: LXLT_ColorTheme, idx: number) => {\n                return (\n                  <div\n                    className={`${ThemePickerClassName}__option ${ThemePickerClassName}__option--${\n                      themeItem.name === activeTheme.name\n                        ? \"active\"\n                        : \"inactive\"\n                    }`}\n                    onClick={() => this.setNewTheme(themeItem)}\n                    key={idx}\n                  >\n                    <span\n                      className={`${ThemePickerClassName}__option__el ${ThemePickerClassName}__option__el--primary`}\n                      style={{\n                        backgroundColor: themeItem.background,\n                        border: `1px solid ${themeItem.foreground}`,\n                      }}\n                    />\n                    <span\n                      className={`${ThemePickerClassName}__option__el ${ThemePickerClassName}__option__el--secondary`}\n                      style={{ backgroundColor: themeItem.foreground }}\n                    />\n                  </div>\n                );\n              })\n            : null}\n        </ThemePickerStyle>\n      </>\n    );\n  }\n}\n\nexport const ThemePicker: React.FunctionComponent = () => {\n  const { setTheme } = useContext(ColorContext);\n\n  return <ThemePickerWithHook setTheme={setTheme} />;\n};\n"]},"metadata":{},"sourceType":"module"}