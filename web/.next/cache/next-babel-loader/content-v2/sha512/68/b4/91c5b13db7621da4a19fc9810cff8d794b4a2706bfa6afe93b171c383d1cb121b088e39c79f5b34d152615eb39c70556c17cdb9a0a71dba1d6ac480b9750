{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"/Users/manzanita/Repositories/laxalt/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/manzanita/Repositories/laxalt/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/manzanita/Repositories/laxalt/web/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/manzanita/Repositories/laxalt/web/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/manzanita/Repositories/laxalt/web/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/manzanita/Repositories/laxalt/web/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/manzanita/Repositories/laxalt/web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/manzanita/Repositories/laxalt/web/components/CanvasCursor/CanvasCursor.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n *\n * Cursor.js\n * @author Peter Laxalt\n * @description The website Cursor.\n *\n */\n// Core\nimport React, { createRef, PureComponent } from \"react\"; // Styles\n\nimport { CanvasCursorStyle, CanvasCursorClassName, CanvasCursorGlobalStyles } from \"./styles.scss\"; // Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Cursor\nexport var CanvasCursor = /*#__PURE__*/function (_PureComponent) {\n  _inherits(CanvasCursor, _PureComponent);\n\n  var _super = _createSuper(CanvasCursor);\n\n  function CanvasCursor(props) {\n    var _this;\n\n    _classCallCheck(this, CanvasCursor);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"canvasRef\", /*#__PURE__*/createRef());\n\n    _this.state = {\n      mouseX: 0,\n      mouseY: 0,\n      mouseIsPressed: false,\n      mouseCursor: {\n        radius: 10,\n        lastX: 0,\n        lastY: 0\n      },\n      drawing: {\n        x: 0,\n        y: 0,\n        coordinates: []\n      },\n      helper: {\n        text: \"\",\n        lastOpacity: 0,\n        opacity: 0\n      },\n      vw: 0,\n      vh: 0\n    };\n    _this.calculateSize = _this.calculateSize.bind(_assertThisInitialized(_this));\n    _this.renderCanvas = _this.renderCanvas.bind(_assertThisInitialized(_this));\n    _this.startDrawing = _this.startDrawing.bind(_assertThisInitialized(_this));\n    _this.drawLines = _this.drawLines.bind(_assertThisInitialized(_this));\n    _this.stopDrawing = _this.stopDrawing.bind(_assertThisInitialized(_this));\n    _this.storeLineCoordinates = _this.storeLineCoordinates.bind(_assertThisInitialized(_this));\n    _this.clearCanvas = _this.clearCanvas.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(CanvasCursor, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.init();\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      // _____________________\n      // Setup our sizes\n      this.calculateSize();\n      this.setState({\n        mouseX: window.innerWidth / 2,\n        mouseY: window.innerHeight / 2,\n        mouseCursor: {\n          radius: 10,\n          lastX: window.innerWidth / 2,\n          lastY: window.innerHeight / 2\n        }\n      }); // _____________________\n      // Update initial coordinates\n\n      this.updateMouseCoords(); // _____________________\n      // Add event listeners\n\n      window.addEventListener(\"mousemove\", function (e) {\n        _this2.storeLineCoordinates(e);\n\n        _this2.setState({\n          mouseX: e.clientX,\n          mouseY: e.clientY\n        });\n      });\n      window.addEventListener(\"resize\", this.calculateSize, false);\n      window.addEventListener(\"mousedown\", this.startDrawing);\n      window.addEventListener(\"mouseup\", this.stopDrawing);\n      window.addEventListener(\"keydown\", this.clearCanvas);\n    } // ______________________________\n    // Calculate Sizes\n\n  }, {\n    key: \"calculateSize\",\n    value: function calculateSize() {\n      this.setState({\n        vw: window.innerWidth,\n        vh: window.innerHeight\n      });\n\n      if (this.canvasRef.current) {\n        this.canvasRef.current.width = window.innerWidth;\n        this.canvasRef.current.height = window.innerHeight;\n      }\n    } // ______________________________\n    // Canvas Reference\n\n  }, {\n    key: \"updateMouseCoords\",\n    // ______________________________\n    // Update Mouse Coordinates\n    value: function updateMouseCoords() {\n      requestAnimationFrame(this.renderCanvas);\n    } // ______________________________\n    // Render to canvas\n\n  }, {\n    key: \"renderCanvas\",\n    value: function renderCanvas() {\n      if (this.canvasRef.current) {\n        var ctx = this.canvasRef.current.getContext(\"2d\");\n        this.setState({\n          mouseCursor: {\n            radius: 10,\n            lastX: this.lerp(this.state.mouseCursor.lastX, this.state.mouseX, 0.25),\n            lastY: this.lerp(this.state.mouseCursor.lastY, this.state.mouseY, 0.25)\n          }\n        });\n        ctx.clearRect(0, 0, this.state.vw, this.state.vh);\n        ctx.beginPath();\n        ctx.arc(this.state.mouseCursor.lastX, this.state.mouseCursor.lastY, this.state.mouseCursor.radius, 0, Math.PI * 2, false);\n        ctx.fillStyle = \"#ffffff\";\n        ctx.fill();\n        ctx.closePath(); // _____________________________\n        // Cursor Helpers\n\n        var ifNotOverNavigation = this.state.mouseY > 100 && this.state.mouseY < window.innerHeight - 100;\n\n        if (this.state.drawing.coordinates.length > 5 && this.state.drawing.coordinates.length < 25 && ifNotOverNavigation) {\n          this.setState({\n            helper: {\n              text: \"Press 'C' to clear drawing\",\n              lastOpacity: this.lerp(this.state.helper.lastOpacity, 1, 0.15),\n              opacity: 1\n            }\n          });\n          ctx.font = \"18px Neue Haas Grotesk Text Pro\";\n          ctx.fillStyle = \"rgba(255,255,255, \".concat(this.state.helper.lastOpacity, \")\");\n          ctx.fillText(this.state.helper.text, this.state.mouseCursor.lastX + 15, this.state.mouseCursor.lastY + -15);\n        } else if (window.scrollY < 100 && ifNotOverNavigation) {\n          this.setState({\n            helper: {\n              text: \"Scroll down\",\n              lastOpacity: this.lerp(this.state.helper.lastOpacity, 1, 0.15),\n              opacity: 1\n            }\n          });\n          ctx.font = \"18px Neue Haas Grotesk Text Pro\";\n          ctx.fillStyle = \"rgba(255,255,255, \".concat(this.state.helper.lastOpacity, \")\");\n          ctx.fillText(this.state.helper.text, this.state.mouseCursor.lastX + 15, this.state.mouseCursor.lastY + -15);\n        } else {\n          if (window.scrollY < 300 && ifNotOverNavigation) {\n            this.setState({\n              helper: {\n                text: \"Click and drag to draw anywhere\",\n                lastOpacity: this.lerp(this.state.helper.lastOpacity, this.state.helper.opacity, 0.15),\n                opacity: 1\n              }\n            });\n            ctx.font = \"18px Neue Haas Grotesk Text Pro\";\n            ctx.fillStyle = \"rgba(255,255,255, \".concat(this.state.helper.lastOpacity, \")\");\n            ctx.fillText(this.state.helper.text, this.state.mouseCursor.lastX + 15, this.state.mouseCursor.lastY + -15);\n          } else {\n            this.setState({\n              helper: {\n                text: this.state.helper.text,\n                lastOpacity: this.lerp(this.state.helper.lastOpacity, this.state.helper.opacity, 0.15),\n                opacity: 0\n              }\n            });\n            ctx.font = \"18px Neue Haas Grotesk Text Pro\";\n            ctx.fillStyle = \"rgba(255,255,255, \".concat(this.state.helper.lastOpacity, \")\");\n            ctx.fillText(this.state.helper.text, this.state.mouseCursor.lastX + 15, this.state.mouseCursor.lastY + -15);\n          }\n        } // ____________________________\n        // Check for drawing\n\n\n        this.drawLines(); // ____________________________\n        // Recursively animate\n\n        requestAnimationFrame(this.renderCanvas);\n      }\n    } // ______________________________\n    // LERP Helper Function\n\n  }, {\n    key: \"lerp\",\n    value: function lerp(a, b, n) {\n      return (1 - n) * a + n * b;\n    } // ____________________________\n    // Drawing Functions\n\n  }, {\n    key: \"startDrawing\",\n    value: function startDrawing(e) {\n      this.setState({\n        mouseIsPressed: true\n      }); // console.log(\"START DRAWING\", this.state.mouseIsPressed);\n    }\n  }, {\n    key: \"storeLineCoordinates\",\n    value: function storeLineCoordinates(e) {\n      if (this.state.mouseIsPressed) {\n        var updatedCoordinates = this.state.drawing.coordinates;\n        var newCoordinates = {\n          // startX: this.state.mouseCursor.lastX,\n          // startY: this.state.mouseCursor.lastY,\n          startX: this.state.mouseX,\n          startY: this.state.mouseY,\n          endX: e.clientX,\n          endY: e.clientY\n        };\n        updatedCoordinates.push(newCoordinates);\n        this.setState({\n          drawing: _objectSpread(_objectSpread({}, this.state.drawing), {}, {\n            coordinates: updatedCoordinates\n          })\n        });\n      }\n    }\n  }, {\n    key: \"drawLines\",\n    value: function drawLines() {\n      var ctx = this.canvasRef.current.getContext(\"2d\");\n      this.state.drawing.coordinates.map(function (coord) {\n        ctx.beginPath(); // begin\n\n        ctx.lineWidth = 2;\n        ctx.lineCap = \"round\";\n        ctx.strokeStyle = \"#ffffff\";\n        ctx.moveTo(coord.startX, coord.startY); // from\n\n        ctx.lineTo(coord.endX, coord.endY); // to\n\n        ctx.stroke(); // draw it!\n        // console.log(\"LINE DRAWN\", coord);\n      });\n    }\n  }, {\n    key: \"stopDrawing\",\n    value: function stopDrawing() {\n      this.setState({\n        mouseIsPressed: false\n      }); // console.log(\"STOP DRAWING\", this.state.mouseIsPressed);\n    }\n  }, {\n    key: \"clearCanvas\",\n    value: function clearCanvas(e) {\n      console.log(e);\n\n      if (e.key === \"c\" || e.key === \"C\") {\n        var previousDrawingState = this.state.drawing;\n        this.setState({\n          drawing: _objectSpread(_objectSpread({}, previousDrawingState), {}, {\n            coordinates: []\n          })\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(CanvasCursorGlobalStyles, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CanvasCursorStyle, {\n          ref: this.canvasRef,\n          className: \"\".concat(CanvasCursorClassName)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true);\n    }\n  }]);\n\n  return CanvasCursor;\n}(PureComponent);","map":{"version":3,"sources":["/Users/manzanita/Repositories/laxalt/web/components/CanvasCursor/CanvasCursor.tsx"],"names":["React","createRef","PureComponent","CanvasCursorStyle","CanvasCursorClassName","CanvasCursorGlobalStyles","CanvasCursor","props","state","mouseX","mouseY","mouseIsPressed","mouseCursor","radius","lastX","lastY","drawing","x","y","coordinates","helper","text","lastOpacity","opacity","vw","vh","calculateSize","bind","renderCanvas","startDrawing","drawLines","stopDrawing","storeLineCoordinates","clearCanvas","init","setState","window","innerWidth","innerHeight","updateMouseCoords","addEventListener","e","clientX","clientY","canvasRef","current","width","height","requestAnimationFrame","ctx","getContext","lerp","clearRect","beginPath","arc","Math","PI","fillStyle","fill","closePath","ifNotOverNavigation","length","font","fillText","scrollY","a","b","n","updatedCoordinates","newCoordinates","startX","startY","endX","endY","push","map","coord","lineWidth","lineCap","strokeStyle","moveTo","lineTo","stroke","console","log","key","previousDrawingState"],"mappings":"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","sourcesContent":["/**\n *\n * Cursor.js\n * @author Peter Laxalt\n * @description The website Cursor.\n *\n */\n\n// Core\nimport React, { createRef, PureComponent } from \"react\";\n\n// Styles\nimport {\n  CanvasCursorStyle,\n  CanvasCursorClassName,\n  CanvasCursorGlobalStyles,\n} from \"./styles.scss\";\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport type LXLT_CanvasCursor = {};\n\nexport type LXLT_CanvasDrawing_Coords = {\n  startX: number;\n  startY: number;\n\n  endX: number;\n  endY: number;\n};\n\nexport type LXLT_CanvasCursor_State = {\n  mouseX: number;\n  mouseY: number;\n  mouseIsPressed: boolean;\n\n  mouseCursor: {\n    radius: number;\n    lastX: number;\n    lastY: number;\n  };\n\n  helper: {\n    text: string;\n    lastOpacity: number;\n    opacity: number;\n  };\n\n  drawing: {\n    x: number;\n    y: number;\n\n    coordinates: LXLT_CanvasDrawing_Coords[];\n  };\n\n  vw: number;\n  vh: number;\n};\n\n// Cursor\nexport class CanvasCursor extends PureComponent<\n  LXLT_CanvasCursor,\n  LXLT_CanvasCursor_State\n> {\n\n  constructor(props: LXLT_CanvasCursor) {\n    super(props);\n\n    this.state = {\n      mouseX: 0,\n      mouseY: 0,\n      mouseIsPressed: false,\n\n      mouseCursor: {\n        radius: 10,\n        lastX: 0,\n        lastY: 0,\n      },\n\n      drawing: {\n        x: 0,\n        y: 0,\n\n        coordinates: [],\n      },\n\n      helper: {\n        text: \"\",\n        lastOpacity: 0,\n        opacity: 0,\n      },\n\n      vw: 0,\n      vh: 0,\n    };\n\n    this.calculateSize = this.calculateSize.bind(this);\n    this.renderCanvas = this.renderCanvas.bind(this);\n    this.startDrawing = this.startDrawing.bind(this);\n    this.drawLines = this.drawLines.bind(this);\n    this.stopDrawing = this.stopDrawing.bind(this);\n    this.storeLineCoordinates = this.storeLineCoordinates.bind(this);\n    this.clearCanvas = this.clearCanvas.bind(this);\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  init() {\n    // _____________________\n    // Setup our sizes\n    this.calculateSize();\n\n    this.setState({\n      mouseX: window.innerWidth / 2,\n      mouseY: window.innerHeight / 2,\n\n      mouseCursor: {\n        radius: 10,\n        lastX: window.innerWidth / 2,\n        lastY: window.innerHeight / 2,\n      },\n    });\n\n    // _____________________\n    // Update initial coordinates\n    this.updateMouseCoords();\n\n    // _____________________\n    // Add event listeners\n    window.addEventListener(\"mousemove\", (e) => {\n      this.storeLineCoordinates(e);\n\n      this.setState({\n        mouseX: e.clientX,\n        mouseY: e.clientY,\n      });\n    });\n    window.addEventListener(\"resize\", this.calculateSize, false);\n    window.addEventListener(\"mousedown\", this.startDrawing);\n    window.addEventListener(\"mouseup\", this.stopDrawing);\n    window.addEventListener(\"keydown\", this.clearCanvas);\n  }\n\n  // ______________________________\n  // Calculate Sizes\n  calculateSize() {\n    this.setState({\n      vw: window.innerWidth,\n      vh: window.innerHeight,\n    });\n\n    if (this.canvasRef.current) {\n      this.canvasRef.current.width = window.innerWidth;\n      this.canvasRef.current.height = window.innerHeight;\n    }\n  }\n\n  // ______________________________\n  // Canvas Reference\n  canvasRef: React.RefObject<HTMLCanvasElement> = createRef<HTMLCanvasElement>();\n\n  // ______________________________\n  // Update Mouse Coordinates\n  updateMouseCoords() {\n    requestAnimationFrame(this.renderCanvas);\n  }\n\n  // ______________________________\n  // Render to canvas\n  renderCanvas() {\n    if (this.canvasRef.current) {\n      let ctx = this.canvasRef.current.getContext(\"2d\");\n\n      this.setState({\n        mouseCursor: {\n          radius: 10,\n          lastX: this.lerp(\n            this.state.mouseCursor.lastX,\n            this.state.mouseX,\n            0.25\n          ),\n          lastY: this.lerp(\n            this.state.mouseCursor.lastY,\n            this.state.mouseY,\n            0.25\n          ),\n        },\n      });\n\n      ctx.clearRect(0, 0, this.state.vw, this.state.vh);\n      ctx.beginPath();\n      ctx.arc(\n        this.state.mouseCursor.lastX,\n        this.state.mouseCursor.lastY,\n        this.state.mouseCursor.radius,\n        0,\n        Math.PI * 2,\n        false\n      );\n      ctx.fillStyle = \"#ffffff\";\n      ctx.fill();\n      ctx.closePath();\n\n      // _____________________________\n      // Cursor Helpers\n      let ifNotOverNavigation =\n        this.state.mouseY > 100 && this.state.mouseY < window.innerHeight - 100;\n\n      if (this.state.drawing.coordinates.length > 5 && this.state.drawing.coordinates.length < 25 && ifNotOverNavigation) {\n        this.setState({\n          helper: {\n            text: \"Press 'C' to clear drawing\",\n            lastOpacity: this.lerp(this.state.helper.lastOpacity, 1, 0.15),\n            opacity: 1,\n          },\n        });\n\n        ctx.font = \"18px Neue Haas Grotesk Text Pro\";\n        ctx.fillStyle = `rgba(255,255,255, ${this.state.helper.lastOpacity})`;\n        ctx.fillText(\n          this.state.helper.text,\n          this.state.mouseCursor.lastX + 15,\n          this.state.mouseCursor.lastY + -15\n        );\n      } else if (window.scrollY < 100 && ifNotOverNavigation) {\n        this.setState({\n          helper: {\n            text: \"Scroll down\",\n            lastOpacity: this.lerp(this.state.helper.lastOpacity, 1, 0.15),\n            opacity: 1,\n          },\n        });\n\n        ctx.font = \"18px Neue Haas Grotesk Text Pro\";\n        ctx.fillStyle = `rgba(255,255,255, ${this.state.helper.lastOpacity})`;\n        ctx.fillText(\n          this.state.helper.text,\n          this.state.mouseCursor.lastX + 15,\n          this.state.mouseCursor.lastY + -15\n        );\n      } else {\n        if (window.scrollY < 300 && ifNotOverNavigation) {\n          this.setState({\n            helper: {\n              text: \"Click and drag to draw anywhere\",\n              lastOpacity: this.lerp(\n                this.state.helper.lastOpacity,\n                this.state.helper.opacity,\n                0.15\n              ),\n              opacity: 1,\n            },\n          });\n\n          ctx.font = \"18px Neue Haas Grotesk Text Pro\";\n          ctx.fillStyle = `rgba(255,255,255, ${this.state.helper.lastOpacity})`;\n          ctx.fillText(\n            this.state.helper.text,\n            this.state.mouseCursor.lastX + 15,\n            this.state.mouseCursor.lastY + -15\n          );\n        } else {\n          this.setState({\n            helper: {\n              text: this.state.helper.text,\n              lastOpacity: this.lerp(\n                this.state.helper.lastOpacity,\n                this.state.helper.opacity,\n                0.15\n              ),\n              opacity: 0,\n            },\n          });\n\n          ctx.font = \"18px Neue Haas Grotesk Text Pro\";\n          ctx.fillStyle = `rgba(255,255,255, ${this.state.helper.lastOpacity})`;\n          ctx.fillText(\n            this.state.helper.text,\n            this.state.mouseCursor.lastX + 15,\n            this.state.mouseCursor.lastY + -15\n          );\n        }\n      }\n\n      // ____________________________\n      // Check for drawing\n      this.drawLines();\n\n      // ____________________________\n      // Recursively animate\n\n      requestAnimationFrame(this.renderCanvas);\n    }\n  }\n\n  // ______________________________\n  // LERP Helper Function\n  lerp(a: number, b: number, n: number) {\n    return (1 - n) * a + n * b;\n  }\n\n  // ____________________________\n  // Drawing Functions\n  startDrawing(e: MouseEvent) {\n    this.setState({\n      mouseIsPressed: true,\n    });\n\n    // console.log(\"START DRAWING\", this.state.mouseIsPressed);\n  }\n\n  storeLineCoordinates(e: MouseEvent) {\n    if (this.state.mouseIsPressed) {\n      let updatedCoordinates = this.state.drawing.coordinates;\n      let newCoordinates: LXLT_CanvasDrawing_Coords = {\n        // startX: this.state.mouseCursor.lastX,\n        // startY: this.state.mouseCursor.lastY,\n        startX: this.state.mouseX,\n        startY: this.state.mouseY,\n        endX: e.clientX,\n        endY: e.clientY,\n      };\n\n      updatedCoordinates.push(newCoordinates);\n\n      this.setState({\n        drawing: {\n          ...this.state.drawing,\n          coordinates: updatedCoordinates,\n        },\n      });\n    }\n  }\n\n  drawLines() {\n    let ctx = this.canvasRef.current.getContext(\"2d\");\n\n    this.state.drawing.coordinates.map((coord: LXLT_CanvasDrawing_Coords) => {\n      ctx.beginPath(); // begin\n      ctx.lineWidth = 2;\n      ctx.lineCap = \"round\";\n      ctx.strokeStyle = \"#ffffff\";\n      ctx.moveTo(coord.startX, coord.startY); // from\n      ctx.lineTo(coord.endX, coord.endY); // to\n      ctx.stroke(); // draw it!\n\n      // console.log(\"LINE DRAWN\", coord);\n    });\n  }\n\n  stopDrawing() {\n    this.setState({\n      mouseIsPressed: false,\n    });\n\n    // console.log(\"STOP DRAWING\", this.state.mouseIsPressed);\n  }\n\n  clearCanvas(e: KeyboardEvent) {\n    console.log(e);\n\n    if (e.key === \"c\" || e.key === \"C\") {\n      let previousDrawingState = this.state.drawing;\n\n      this.setState({\n        drawing: {\n          ...previousDrawingState,\n          coordinates: [],\n        },\n      });\n    }\n  }\n\n  render() {\n    return (\n      <>\n        {/* <UniversallyHideCursor /> */}\n        <CanvasCursorGlobalStyles />\n        <CanvasCursorStyle\n          ref={this.canvasRef}\n          className={`${CanvasCursorClassName}`}\n        />\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}