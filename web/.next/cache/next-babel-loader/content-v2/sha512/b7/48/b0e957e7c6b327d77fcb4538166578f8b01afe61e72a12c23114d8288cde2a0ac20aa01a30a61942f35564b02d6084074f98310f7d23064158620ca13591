{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Core\nimport React, { useEffect, useState } from \"react\"; // Constants\n\n// Components\n// Styles\nimport { HeadlineWrapperClassName, HeadlineWrapperStyle } from \"./styles.scss\"; // Begin Types\n// __________________________________________________________________________________________\n\n// Begin Data\n// __________________________________________________________________________________________\nexport const HeadlineTransitionThreshold = 200;\nexport const HeadlineWrapper = ({\n  addClass,\n  children,\n  style\n}) => {\n  const {\n    0: isScrolled,\n    1: toggleScroll\n  } = useState(false);\n  let scrollModifier = `${HeadlineWrapperClassName}--${isScrolled ? `is-scrolled` : `is-not-scrolled`}`;\n\n  const listenToScroll = () => {\n    if (window.scrollY > HeadlineTransitionThreshold) {\n      toggleScroll(true);\n      return;\n    } else {\n      toggleScroll(false);\n      return;\n    }\n  };\n\n  useEffect(() => {\n    if (\"undefined\") {\n      window.addEventListener(\"scroll\", listenToScroll);\n    }\n\n    return () => {\n      window.removeEventListener(\"scroll\", listenToScroll);\n    };\n  });\n  return /*#__PURE__*/_jsx(HeadlineWrapperStyle, {\n    className: `${HeadlineWrapperClassName} ${scrollModifier} ${addClass && addClass} `,\n    style: _objectSpread({}, style),\n    children: children\n  });\n};\nexport const AfterHeadlineWrapper = ({\n  addClass,\n  children,\n  style\n}) => {\n  const {\n    0: isScrolled,\n    1: toggleScroll\n  } = useState(false);\n  let scrollModifier = `${HeadlineWrapperClassName}__after--${isScrolled ? `is-scrolled` : `is-not-scrolled`}`;\n\n  const listenToScroll = () => {\n    if (window.scrollY > HeadlineTransitionThreshold) {\n      toggleScroll(true);\n      return;\n    } else {\n      toggleScroll(false);\n      return;\n    }\n  };\n\n  useEffect(() => {\n    if (\"undefined\") {\n      window.addEventListener(\"scroll\", listenToScroll);\n    }\n\n    return () => {\n      window.removeEventListener(\"scroll\", listenToScroll);\n    };\n  });\n  return /*#__PURE__*/_jsx(HeadlineWrapperStyle, {\n    className: `${HeadlineWrapperClassName}__after ${scrollModifier} ${addClass && addClass} `,\n    style: _objectSpread({}, style),\n    children: children\n  });\n}; // End Component\n// ______________________________________________________________________________","map":null,"metadata":{},"sourceType":"module"}