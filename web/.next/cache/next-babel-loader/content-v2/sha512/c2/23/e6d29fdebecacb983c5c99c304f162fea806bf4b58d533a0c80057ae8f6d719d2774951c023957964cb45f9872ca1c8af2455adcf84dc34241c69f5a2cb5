{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _classCallCheck from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n *\n * Cursor.js\n * @author Peter Laxalt\n * @description The website Cursor.\n *\n */\n// Core\nimport React, { createRef, PureComponent } from \"react\"; // Styles\n\nimport { CanvasCursorStyle, CanvasCursorClassName, CanvasCursorGlobalStyles } from \"./styles.scss\"; // Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Cursor\nexport var CanvasCursor = /*#__PURE__*/function (_PureComponent) {\n  _inherits(CanvasCursor, _PureComponent);\n\n  var _super = _createSuper(CanvasCursor);\n\n  function CanvasCursor(props) {\n    var _this;\n\n    _classCallCheck(this, CanvasCursor);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"canvasRef\", /*#__PURE__*/createRef());\n\n    _this.state = {\n      mouseX: 0,\n      mouseY: 0,\n      mouseIsPressed: false,\n      mouseCursor: {\n        radius: 10,\n        lastX: 0,\n        lastY: 0\n      },\n      drawing: {\n        x: 0,\n        y: 0,\n        coordinates: []\n      },\n      helper: {\n        text: \"\",\n        lastOpacity: 0,\n        opacity: 0\n      },\n      vw: 0,\n      vh: 0\n    };\n    _this.calculateSize = _this.calculateSize.bind(_assertThisInitialized(_this));\n    _this.renderCanvas = _this.renderCanvas.bind(_assertThisInitialized(_this));\n    _this.startDrawing = _this.startDrawing.bind(_assertThisInitialized(_this));\n    _this.drawLines = _this.drawLines.bind(_assertThisInitialized(_this));\n    _this.stopDrawing = _this.stopDrawing.bind(_assertThisInitialized(_this));\n    _this.storeLineCoordinates = _this.storeLineCoordinates.bind(_assertThisInitialized(_this));\n    _this.clearCanvas = _this.clearCanvas.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(CanvasCursor, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.init();\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      // _____________________\n      // Setup our sizes\n      this.calculateSize();\n      this.setState({\n        mouseX: window.innerWidth / 2,\n        mouseY: window.innerHeight / 2,\n        mouseCursor: {\n          radius: 10,\n          lastX: window.innerWidth / 2,\n          lastY: window.innerHeight / 2\n        }\n      }); // _____________________\n      // Update initial coordinates\n\n      this.updateMouseCoords(); // _____________________\n      // Add event listeners\n\n      window.addEventListener(\"mousemove\", function (e) {\n        _this2.storeLineCoordinates(e);\n\n        _this2.setState({\n          mouseX: e.clientX,\n          mouseY: e.clientY\n        });\n      });\n      window.addEventListener(\"resize\", this.calculateSize, false);\n      window.addEventListener(\"mousedown\", this.startDrawing);\n      window.addEventListener(\"mouseup\", this.stopDrawing);\n      window.addEventListener(\"keydown\", this.clearCanvas);\n    } // ______________________________\n    // Calculate Sizes\n\n  }, {\n    key: \"calculateSize\",\n    value: function calculateSize() {\n      this.setState({\n        vw: window.innerWidth,\n        vh: window.innerHeight\n      });\n\n      if (this.canvasRef.current) {\n        this.canvasRef.current.width = window.innerWidth;\n        this.canvasRef.current.height = window.innerHeight;\n      }\n    } // ______________________________\n    // Canvas Reference\n\n  }, {\n    key: \"updateMouseCoords\",\n    // ______________________________\n    // Update Mouse Coordinates\n    value: function updateMouseCoords() {\n      requestAnimationFrame(this.renderCanvas);\n    } // ______________________________\n    // Render to canvas\n\n  }, {\n    key: \"renderCanvas\",\n    value: function renderCanvas() {\n      if (this.canvasRef.current) {\n        var ctx = this.canvasRef.current.getContext(\"2d\");\n        this.setState({\n          mouseCursor: {\n            radius: 10,\n            lastX: this.lerp(this.state.mouseCursor.lastX, this.state.mouseX, 0.25),\n            lastY: this.lerp(this.state.mouseCursor.lastY, this.state.mouseY, 0.25)\n          }\n        });\n        ctx.clearRect(0, 0, this.state.vw, this.state.vh);\n        ctx.beginPath();\n        ctx.arc(this.state.mouseCursor.lastX, this.state.mouseCursor.lastY, this.state.mouseCursor.radius, 0, Math.PI * 2, false);\n        ctx.fillStyle = \"#ffffff\";\n        ctx.fill();\n        ctx.closePath(); // _____________________________\n        // Cursor Helpers\n\n        var ifNotOverNavigation = this.state.mouseY > 100 && this.state.mouseY < window.innerHeight - 100;\n\n        if (this.state.drawing.coordinates.length > 5 && this.state.drawing.coordinates.length < 25 && ifNotOverNavigation) {\n          this.setState({\n            helper: {\n              text: \"Press 'C' to clear drawing\",\n              lastOpacity: this.lerp(this.state.helper.lastOpacity, 1, 0.15),\n              opacity: 1\n            }\n          });\n          ctx.font = \"18px Neue Haas Grotesk Text Pro\";\n          ctx.fillStyle = \"rgba(255,255,255, \".concat(this.state.helper.lastOpacity, \")\");\n          ctx.fillText(this.state.helper.text, this.state.mouseCursor.lastX + 15, this.state.mouseCursor.lastY + -15);\n        } else if (window.scrollY < 100 && ifNotOverNavigation) {\n          this.setState({\n            helper: {\n              text: \"Scroll down\",\n              lastOpacity: this.lerp(this.state.helper.lastOpacity, 1, 0.15),\n              opacity: 1\n            }\n          });\n          ctx.font = \"18px Neue Haas Grotesk Text Pro\";\n          ctx.fillStyle = \"rgba(255,255,255, \".concat(this.state.helper.lastOpacity, \")\");\n          ctx.fillText(this.state.helper.text, this.state.mouseCursor.lastX + 15, this.state.mouseCursor.lastY + -15);\n        } else {\n          if (window.scrollY < 300 && ifNotOverNavigation) {\n            this.setState({\n              helper: {\n                text: \"Click and drag to draw anywhere\",\n                lastOpacity: this.lerp(this.state.helper.lastOpacity, this.state.helper.opacity, 0.15),\n                opacity: 1\n              }\n            });\n            ctx.font = \"18px Neue Haas Grotesk Text Pro\";\n            ctx.fillStyle = \"rgba(255,255,255, \".concat(this.state.helper.lastOpacity, \")\");\n            ctx.fillText(this.state.helper.text, this.state.mouseCursor.lastX + 15, this.state.mouseCursor.lastY + -15);\n          } else {\n            this.setState({\n              helper: {\n                text: this.state.helper.text,\n                lastOpacity: this.lerp(this.state.helper.lastOpacity, this.state.helper.opacity, 0.15),\n                opacity: 0\n              }\n            });\n            ctx.font = \"18px Neue Haas Grotesk Text Pro\";\n            ctx.fillStyle = \"rgba(255,255,255, \".concat(this.state.helper.lastOpacity, \")\");\n            ctx.fillText(this.state.helper.text, this.state.mouseCursor.lastX + 15, this.state.mouseCursor.lastY + -15);\n          }\n        } // ____________________________\n        // Check for drawing\n\n\n        this.drawLines(); // ____________________________\n        // Recursively animate\n\n        requestAnimationFrame(this.renderCanvas);\n      }\n    } // ______________________________\n    // LERP Helper Function\n\n  }, {\n    key: \"lerp\",\n    value: function lerp(a, b, n) {\n      return (1 - n) * a + n * b;\n    } // ____________________________\n    // Drawing Functions\n\n  }, {\n    key: \"startDrawing\",\n    value: function startDrawing(e) {\n      this.setState({\n        mouseIsPressed: true\n      }); // console.log(\"START DRAWING\", this.state.mouseIsPressed);\n    }\n  }, {\n    key: \"storeLineCoordinates\",\n    value: function storeLineCoordinates(e) {\n      if (this.state.mouseIsPressed) {\n        var updatedCoordinates = this.state.drawing.coordinates;\n        var newCoordinates = {\n          // startX: this.state.mouseCursor.lastX,\n          // startY: this.state.mouseCursor.lastY,\n          startX: this.state.mouseX,\n          startY: this.state.mouseY,\n          endX: e.clientX,\n          endY: e.clientY\n        };\n        updatedCoordinates.push(newCoordinates);\n        this.setState({\n          drawing: _objectSpread(_objectSpread({}, this.state.drawing), {}, {\n            coordinates: updatedCoordinates\n          })\n        });\n      }\n    }\n  }, {\n    key: \"drawLines\",\n    value: function drawLines() {\n      var ctx = this.canvasRef.current.getContext(\"2d\");\n      this.state.drawing.coordinates.map(function (coord) {\n        ctx.beginPath(); // begin\n\n        ctx.lineWidth = 2;\n        ctx.lineCap = \"round\";\n        ctx.strokeStyle = \"#ffffff\";\n        ctx.moveTo(coord.startX, coord.startY); // from\n\n        ctx.lineTo(coord.endX, coord.endY); // to\n\n        ctx.stroke(); // draw it!\n        // console.log(\"LINE DRAWN\", coord);\n      });\n    }\n  }, {\n    key: \"stopDrawing\",\n    value: function stopDrawing() {\n      this.setState({\n        mouseIsPressed: false\n      }); // console.log(\"STOP DRAWING\", this.state.mouseIsPressed);\n    }\n  }, {\n    key: \"clearCanvas\",\n    value: function clearCanvas(e) {\n      console.log(e);\n\n      if (e.key === \"c\" || e.key === \"C\") {\n        var previousDrawingState = this.state.drawing;\n        this.setState({\n          drawing: _objectSpread(_objectSpread({}, previousDrawingState), {}, {\n            coordinates: []\n          })\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(CanvasCursorGlobalStyles, {}), /*#__PURE__*/_jsx(CanvasCursorStyle, {\n          ref: this.canvasRef,\n          className: \"\".concat(CanvasCursorClassName)\n        })]\n      });\n    }\n  }]);\n\n  return CanvasCursor;\n}(PureComponent);","map":null,"metadata":{},"sourceType":"module"}