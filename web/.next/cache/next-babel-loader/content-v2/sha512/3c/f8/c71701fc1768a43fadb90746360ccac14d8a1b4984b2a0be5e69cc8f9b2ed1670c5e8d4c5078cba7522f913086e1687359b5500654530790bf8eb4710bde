{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// Core\nimport Link from \"next/link\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { HeadlineTransitionThreshold } from \"../HeadlineWrapper\"; // Styles\n\nimport { GlobalSidebarPaneOffsetVariables, LayeredSidebarClassName, LayeredSidebarStyle } from \"./styles.scss\"; // Begin Types\n// __________________________________________________________________________________________\n\n// Begin Data\n// __________________________________________________________________________________________\nexport const LayeredSidebar = ({\n  addClass,\n  panes\n}) => {\n  if (panes) {\n    const {\n      0: isHovered,\n      1: setHover\n    } = useState(false);\n    const {\n      0: isScrolled,\n      1: toggleScroll\n    } = useState(false);\n    let scrollModifier = `${LayeredSidebarClassName}--${isScrolled ? `is-scrolled` : `is-not-scrolled`}`;\n\n    const listenToScroll = () => {\n      if (window.scrollY > HeadlineTransitionThreshold) {\n        toggleScroll(true);\n        return;\n      } else {\n        toggleScroll(false);\n        return;\n      }\n    };\n\n    useEffect(() => {\n      if (\"undefined\") {\n        window.addEventListener(\"scroll\", listenToScroll);\n      }\n\n      return () => {\n        window.removeEventListener(\"scroll\", listenToScroll);\n      };\n    });\n    return /*#__PURE__*/_jsxs(LayeredSidebarStyle, {\n      className: `${LayeredSidebarClassName} ${scrollModifier} ${addClass && addClass}`,\n      children: [/*#__PURE__*/_jsx(GlobalSidebarPaneOffsetVariables, {\n        panes: panes.length,\n        isHovered: isHovered\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: `${LayeredSidebarClassName}__inner`,\n        children: panes.map((pane, idx) => {\n          let paneItemsMajor = pane.items ? pane.items.filter(item => item.isMajor) : [];\n          let paneItemsMinor = pane.items ? pane.items.filter(item => !item.isMajor) : [];\n          return /*#__PURE__*/_jsx(Fragment, {\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              className: `${LayeredSidebarClassName}__pane`,\n              onMouseEnter: () => idx == panes.length - 1 ? null : setHover(true),\n              onMouseLeave: () => idx == panes.length - 1 ? null : setHover(false),\n              children: [pane.header && !pane.headerBadge ? /*#__PURE__*/_jsx(\"div\", {\n                className: `${LayeredSidebarClassName}__pane__header`,\n                children: pane.header\n              }) : pane.headerBadge ? /*#__PURE__*/_jsx(\"div\", {\n                className: `${LayeredSidebarClassName}__pane__header ${LayeredSidebarClassName}__pane__header--badge`,\n                children: /*#__PURE__*/_jsx(pane.headerBadge, {})\n              }) : null, pane.items && /*#__PURE__*/_jsxs(_Fragment, {\n                children: [paneItemsMajor.length > 0 && /*#__PURE__*/_jsx(\"ul\", {\n                  className: `${LayeredSidebarClassName}__pane__list ${LayeredSidebarClassName}__pane__list--major`,\n                  style: {\n                    opacity: idx === 2 ? 0 : 1\n                  } // TEMPORARY\n                  ,\n                  children: paneItemsMajor.map((paneItem, idxx) => {\n                    return /*#__PURE__*/_jsx(\"li\", {\n                      className: `${LayeredSidebarClassName}__pane__list__item ${LayeredSidebarClassName}__pane__list__item--${paneItem.isActive ? \"is-active\" : \"is-not-active\"}  ${LayeredSidebarClassName}__pane__list__item--${paneItem.isMajor ? \"major\" : \"minor\"}`,\n                      children: /*#__PURE__*/_jsx(Link, {\n                        href: paneItem.href,\n                        children: /*#__PURE__*/_jsx(\"a\", {\n                          children: paneItem.label\n                        })\n                      })\n                    }, idxx + idx);\n                  })\n                }), paneItemsMinor.length > 0 && /*#__PURE__*/_jsx(\"ul\", {\n                  className: `${LayeredSidebarClassName}__pane__list ${LayeredSidebarClassName}__pane__list--minor`,\n                  style: {\n                    opacity: idx === 2 ? 0 : 1\n                  } // TEMPORARY\n                  ,\n                  children: paneItemsMinor.map((paneItem, idxx) => {\n                    return /*#__PURE__*/_jsx(\"li\", {\n                      className: `${LayeredSidebarClassName}__pane__list__item ${LayeredSidebarClassName}__pane__list__item--${paneItem.isActive ? \"is-active\" : \"is-not-active\"} ${LayeredSidebarClassName}__pane__list__item--${paneItem.isMajor ? \"major\" : \"minor\"}`,\n                      children: /*#__PURE__*/_jsx(Link, {\n                        href: paneItem.href,\n                        children: /*#__PURE__*/_jsx(\"a\", {\n                          children: paneItem.label\n                        })\n                      })\n                    }, idxx + idx);\n                  })\n                })]\n              })]\n            })\n          }, idx);\n        })\n      })]\n    });\n  } else {\n    return null;\n  }\n}; // End Component\n// ______________________________________________________________________________","map":null,"metadata":{},"sourceType":"module"}