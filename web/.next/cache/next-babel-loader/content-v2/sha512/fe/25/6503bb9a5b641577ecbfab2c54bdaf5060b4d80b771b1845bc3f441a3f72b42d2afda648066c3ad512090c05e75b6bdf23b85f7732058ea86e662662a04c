{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\nimport { Base } from \"../../constants/styles/Base\";\n\nconst DharmaCanvasDisplay = (W, H, ID, // DharmaTheme,\nparentEl) => p => {\n  // _________________________________________________\n  // Config\n  let canvas; // ____________________________\n  // Fonts\n\n  let dharmaFont; // ____________________________\n  // Typography\n\n  let text = \"LAX\";\n  let splitCharacterArray = text.split(\"\");\n  let characters = splitCharacterArray.map((character, idx) => {\n    return {\n      letter: character,\n      count: 1,\n      idx: idx,\n      copies: 5,\n      copiesLastVisible: 0,\n      copiesAreVisible: false,\n      countIsIncrementing: true,\n      countIsDecrementing: false,\n      copiesAreIncrementing: true,\n      copiesAreDecrementing: false\n    };\n  });\n  let characterCount = splitCharacterArray.length;\n  let characterWidth = W / characterCount;\n  let characterSize = W > Base.Media.Width.Md ? H * 1.15 : H * .7;\n  let verticalSkewDivisible = 2.75;\n  let characterSkewDivisible = 1.36;\n  console.log(characterSize, \"characterSize\"); // ____________________________\n  // Counts\n  // let renderCount: number = 0;\n\n  let previousCountUpdateTime = 0;\n  let previousCopyUpdateTime = 0; // ____________________________\n  // Strokes\n\n  let strokeWidth = 4;\n  let strokeOffset = strokeWidth * 1.5; // ____________________________\n  // Limits\n\n  let maxCount = 3;\n  let minCount = 1;\n  let maxCopies = 12;\n  let minCopies = 1;\n  let frameRate = 60; // ____________________________\n  // Translation\n  // let previousVerticalTranslation: number = H / 2.25;\n\n  let verticalTranslationWhitespaceCompensation = 2.25;\n\n  const previousHorizontalTranslation = idx => -60 + (characterWidth * idx + characterWidth / 1.5 + strokeOffset); // _________________________________________________\n  // Preload\n\n\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  }; // _________________________________________________\n  // Setup\n\n\n  p.setup = () => {\n    // Our Canvas\n    canvas = p.createCanvas(W, H); // ThreeWaterCanvas(parentEl, canvas.elt);\n\n    p.frameRate(frameRate);\n\n    if (window.devicePixelRatio > 1 && window.devicePixelRatio < 3) {\n      p.pixelDensity(1.25);\n    }\n  }; // _________________________________________________\n  // Update Character\n\n\n  const updateCharacter = (char, idx) => {\n    if (char.count < maxCount && char.countIsIncrementing) {\n      characters[idx] = _objectSpread(_objectSpread({}, char), {}, {\n        count: char.count + 1\n      });\n      previousCountUpdateTime = p.millis();\n      return;\n    } else if (char.count === maxCount) {\n      characters[idx] = _objectSpread(_objectSpread({}, char), {}, {\n        count: char.count - 1,\n        countIsIncrementing: false,\n        countIsDecrementing: true\n      });\n      previousCountUpdateTime = p.millis();\n      return;\n    } else if (char.count > minCount && char.countIsDecrementing) {\n      characters[idx] = _objectSpread(_objectSpread({}, char), {}, {\n        count: char.count - 1,\n        countIsDecrementing: true\n      });\n      previousCountUpdateTime = p.millis();\n      return;\n    } else if (char.count === minCount && char.countIsDecrementing) {\n      characters[idx] = _objectSpread(_objectSpread({}, char), {}, {\n        count: char.count + 1,\n        countIsIncrementing: true,\n        countIsDecrementing: false\n      });\n      previousCountUpdateTime = p.millis();\n      return;\n    }\n\n    return;\n  }; // _________________________________________________\n  // Update Copies\n\n\n  const updateCopies = (char, idx) => {\n    if (char.copies < maxCopies && char.copiesAreIncrementing) {\n      characters[idx] = _objectSpread(_objectSpread({}, char), {}, {\n        copies: char.copies + 1\n      });\n      previousCopyUpdateTime = p.millis();\n      return;\n    } else if (char.copies === maxCopies) {\n      characters[idx] = _objectSpread(_objectSpread({}, char), {}, {\n        copies: char.copies - 1,\n        copiesAreIncrementing: false,\n        copiesAreDecrementing: true\n      });\n      previousCopyUpdateTime = p.millis();\n      return;\n    } else if (char.copies > minCopies && char.copiesAreDecrementing) {\n      characters[idx] = _objectSpread(_objectSpread({}, char), {}, {\n        copies: char.copies - 1,\n        copiesAreDecrementing: true\n      });\n      previousCopyUpdateTime = p.millis();\n      return;\n    } else if (char.copies === minCopies && char.copiesAreDecrementing) {\n      characters[idx] = _objectSpread(_objectSpread({}, char), {}, {\n        copies: char.copies + 1,\n        copiesAreIncrementing: true,\n        copiesAreDecrementing: false\n      });\n      previousCopyUpdateTime = p.millis();\n      return;\n    }\n\n    return;\n  }; // _________________________________________________\n  // Draw\n\n\n  p.draw = () => {\n    if (p.frameCount % 10 === 0 && !window.dharmaPaused) {\n      p.background(window.laxaltUniversalTheme.background);\n      p.textFont(dharmaFont);\n      p.textSize(characterSize);\n      p.textAlign(p.CENTER, p.CENTER);\n      p.fill(`${window.laxaltUniversalTheme.foreground}`);\n      p.strokeWeight(strokeWidth);\n      p.stroke(window.laxaltUniversalTheme.background);\n\n      if (H && W) {\n        // _________________________________________\n        // Loop through our copies\n        characters.map((char, idx) => {\n          p.scale(1, 1);\n          let randomCharPick = Math.random() <= 0.5;\n\n          if (randomCharPick) {\n            updateCopies(char, idx);\n          }\n\n          if (randomCharPick && p.millis() - previousCountUpdateTime > 3000) {\n            updateCharacter(char, idx);\n          }\n\n          let countArray = Array.from(Array(char.count).keys());\n          countArray = countArray.map(countNumber => {\n            return countNumber + 1;\n          }); // _________________________________________\n          // Duplicate positions\n\n          countArray.map((countNumber, idxx) => {\n            let verticalScale = 1 / (char.count * 0.95);\n            let duplicateVerticalPosition = char.count == 1 ? H / verticalTranslationWhitespaceCompensation : characterSize / verticalSkewDivisible + characterSize / characterSkewDivisible * idxx; // _________________________________________\n            // Make copies\n\n            let copiesArray = Array.from(Array(char.copies).keys()); // let randomCopyPick = Math.random() <= 0.5;\n\n            copiesArray = copiesArray.map(copyNumber => {\n              return copyNumber + 1;\n            }); // let randomCopyPick = Math.random() <= 0.5;\n            // let copyTimer = p.millis() - previousCopiesVisibleTime > 2000;\n\n            previousCopyUpdateTime; // let isFirstCount = true;\n\n            copiesArray.map((copyNumber, idxxx) => {\n              // let centerCoordsX = W / 2;\n              // let centerCoordsY = H / 2;\n              // let horizontalTranslate =\n              //   copyNumber !== 1\n              //     ? (previousHorizontalTranslation(idx) +\n              //         (strokeOffset / (p.mouseX / 100)) * copyNumber)\n              //     : previousHorizontalTranslation(idx) +\n              //       strokeOffset * copyNumber;\n              // let verticalTranslate =\n              //   copyNumber !== 1\n              //     ? (duplicateVerticalPosition - (strokeOffset / (p.mouseX / 100)) * copyNumber)\n              //     : duplicateVerticalPosition - strokeOffset * copyNumber;\n              let horizontalTranslate = previousHorizontalTranslation(idx) + strokeOffset * copyNumber;\n              let verticalTranslate = duplicateVerticalPosition - strokeOffset * copyNumber;\n              p.push();\n              p.scale(1, verticalScale);\n              p.text(char.letter, horizontalTranslate, verticalTranslate);\n              p.pop();\n            });\n          });\n        });\n      }\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;","map":{"version":3,"sources":["/Users/manzanita/Repositories/laxalt/web/sketches/p5/no-water-distort-L.canvas.tsx"],"names":["Base","DharmaCanvasDisplay","W","H","ID","parentEl","p","canvas","dharmaFont","text","splitCharacterArray","split","characters","map","character","idx","letter","count","copies","copiesLastVisible","copiesAreVisible","countIsIncrementing","countIsDecrementing","copiesAreIncrementing","copiesAreDecrementing","characterCount","length","characterWidth","characterSize","Media","Width","Md","verticalSkewDivisible","characterSkewDivisible","console","log","previousCountUpdateTime","previousCopyUpdateTime","strokeWidth","strokeOffset","maxCount","minCount","maxCopies","minCopies","frameRate","verticalTranslationWhitespaceCompensation","previousHorizontalTranslation","preload","loadFont","setup","createCanvas","window","devicePixelRatio","pixelDensity","updateCharacter","char","millis","updateCopies","draw","frameCount","dharmaPaused","background","laxaltUniversalTheme","textFont","textSize","textAlign","CENTER","fill","foreground","strokeWeight","stroke","scale","randomCharPick","Math","random","countArray","Array","from","keys","countNumber","idxx","verticalScale","duplicateVerticalPosition","copiesArray","copyNumber","idxxx","horizontalTranslate","verticalTranslate","push","pop","windowResized","resizeCanvas"],"mappings":"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","sourcesContent":["/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n\nimport p5, { Font } from \"p5\";\nimport { Base } from \"../../constants/styles/Base\";\nimport { ThreeWaterCanvas } from \"../three/three-water-distort.canvas\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_DharmaCanvas = {\n  W: number;\n  H: number;\n  ID: number;\n  // BG: LXLT_ColorTheme;\n  parentEl: HTMLDivElement;\n};\n\nexport type LXLT_DharmaCanvasDisplay = (\n  W: number,\n  H: number,\n  ID: number,\n  // BG: LXLT_ColorTheme,\n  parentEl: HTMLDivElement\n) => (p: p5) => void;\n\ntype LXLT_DharmaCanvasChar = {\n  letter: string;\n  count: number;\n  idx: number;\n\n  copies: number;\n  copiesLastVisible: number;\n  copiesAreVisible: boolean;\n\n  copiesAreIncrementing: boolean;\n  copiesAreDecrementing: boolean;\n\n  countIsIncrementing: boolean;\n  countIsDecrementing: boolean;\n};\n\nconst DharmaCanvasDisplay: LXLT_DharmaCanvasDisplay = (\n  W,\n  H,\n  ID,\n  // DharmaTheme,\n  parentEl\n) => (p: p5) => {\n  // _________________________________________________\n  // Config\n\n  let canvas;\n\n  // ____________________________\n  // Fonts\n  let dharmaFont: Font;\n\n  // ____________________________\n  // Typography\n  let text = \"LAX\";\n\n  let splitCharacterArray = text.split(\"\");\n  let characters: LXLT_DharmaCanvasChar[] = splitCharacterArray.map(\n    (character: string, idx: number) => {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n\n        copies: 5,\n        copiesLastVisible: 0,\n        copiesAreVisible: false,\n\n        countIsIncrementing: true,\n        countIsDecrementing: false,\n\n        copiesAreIncrementing: true,\n        copiesAreDecrementing: false,\n      };\n    }\n  );\n\n  let characterCount: number = splitCharacterArray.length;\n  let characterWidth: number = W / characterCount;\n  let characterSize: number = W > Base.Media.Width.Md ? H * 1.15 : H * .7;\n\n  let verticalSkewDivisible: number = 2.75;\n  let characterSkewDivisible: number = 1.36;\n\n  console.log(characterSize, \"characterSize\");\n\n  // ____________________________\n  // Counts\n  // let renderCount: number = 0;\n  let previousCountUpdateTime: number = 0;\n  let previousCopyUpdateTime: number = 0;\n\n  // ____________________________\n  // Strokes\n  let strokeWidth: number = 4;\n  let strokeOffset: number = strokeWidth * 1.5;\n\n  // ____________________________\n  // Limits\n  let maxCount = 3;\n  let minCount = 1;\n\n  let maxCopies = 12;\n  let minCopies = 1;\n\n  let frameRate = 60;\n\n  // ____________________________\n  // Translation\n  // let previousVerticalTranslation: number = H / 2.25;\n\n  let verticalTranslationWhitespaceCompensation: number = 2.25;\n  const previousHorizontalTranslation = (idx: number) =>\n    -60 + (characterWidth * idx + characterWidth / 1.5 + strokeOffset);\n\n  // _________________________________________________\n  // Preload\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  };\n\n  // _________________________________________________\n  // Setup\n  p.setup = () => {\n    // Our Canvas\n    canvas = p.createCanvas(W, H);\n\n    // ThreeWaterCanvas(parentEl, canvas.elt);\n\n    p.frameRate(frameRate);\n\n    if (window.devicePixelRatio > 1 && window.devicePixelRatio < 3) {\n      p.pixelDensity(1.25);\n    }\n  };\n\n  // _________________________________________________\n  // Update Character\n  const updateCharacter = (char: LXLT_DharmaCanvasChar, idx: number) => {\n    if (char.count < maxCount && char.countIsIncrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count + 1,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    } else if (char.count === maxCount) {\n      characters[idx] = {\n        ...char,\n        count: char.count - 1,\n        countIsIncrementing: false,\n        countIsDecrementing: true,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    } else if (char.count > minCount && char.countIsDecrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count - 1,\n        countIsDecrementing: true,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    } else if (char.count === minCount && char.countIsDecrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count + 1,\n        countIsIncrementing: true,\n        countIsDecrementing: false,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    }\n\n    return;\n  };\n\n  // _________________________________________________\n  // Update Copies\n  const updateCopies = (char: LXLT_DharmaCanvasChar, idx: number) => {\n    if (char.copies < maxCopies && char.copiesAreIncrementing) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies + 1,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    } else if (char.copies === maxCopies) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies - 1,\n        copiesAreIncrementing: false,\n        copiesAreDecrementing: true,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    } else if (char.copies > minCopies && char.copiesAreDecrementing) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies - 1,\n        copiesAreDecrementing: true,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    } else if (char.copies === minCopies && char.copiesAreDecrementing) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies + 1,\n        copiesAreIncrementing: true,\n        copiesAreDecrementing: false,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    }\n\n    return;\n  };\n\n  // _________________________________________________\n  // Draw\n  p.draw = () => {\n    if (p.frameCount % 10 === 0 && !window.dharmaPaused) {\n      p.background(window.laxaltUniversalTheme.background);\n      p.textFont(dharmaFont);\n      p.textSize(characterSize);\n      p.textAlign(p.CENTER, p.CENTER);\n      p.fill(`${window.laxaltUniversalTheme.foreground}`);\n      p.strokeWeight(strokeWidth);\n      p.stroke(window.laxaltUniversalTheme.background);\n\n      if (H && W) {\n        // _________________________________________\n        // Loop through our copies\n        characters.map((char: LXLT_DharmaCanvasChar, idx: number) => {\n          p.scale(1, 1);\n\n          let randomCharPick = Math.random() <= 0.5;\n\n          if (randomCharPick) {\n            updateCopies(char, idx);\n          }\n\n          if (randomCharPick && p.millis() - previousCountUpdateTime > 3000) {\n            updateCharacter(char, idx);\n          }\n\n          let countArray: number[] = Array.from(Array(char.count).keys());\n\n          countArray = countArray.map((countNumber: number) => {\n            return countNumber + 1;\n          });\n\n          // _________________________________________\n          // Duplicate positions\n          countArray.map((countNumber: number, idxx: number) => {\n            let verticalScale = 1 / (char.count * 0.95);\n\n            let duplicateVerticalPosition: number =\n              char.count == 1\n                ? H / verticalTranslationWhitespaceCompensation\n                : characterSize / verticalSkewDivisible +\n                  (characterSize / characterSkewDivisible) * idxx;\n\n            // _________________________________________\n            // Make copies\n            let copiesArray: number[] = Array.from(Array(char.copies).keys());\n            // let randomCopyPick = Math.random() <= 0.5;\n\n            copiesArray = copiesArray.map((copyNumber: number) => {\n              return copyNumber + 1;\n            });\n\n            // let randomCopyPick = Math.random() <= 0.5;\n            // let copyTimer = p.millis() - previousCopiesVisibleTime > 2000;\n            previousCopyUpdateTime;\n\n            // let isFirstCount = true;\n\n            copiesArray.map((copyNumber: number, idxxx: number) => {\n              // let centerCoordsX = W / 2;\n              // let centerCoordsY = H / 2;\n\n              // let horizontalTranslate =\n              //   copyNumber !== 1\n              //     ? (previousHorizontalTranslation(idx) +\n              //         (strokeOffset / (p.mouseX / 100)) * copyNumber)\n              //     : previousHorizontalTranslation(idx) +\n              //       strokeOffset * copyNumber;\n\n              // let verticalTranslate =\n              //   copyNumber !== 1\n              //     ? (duplicateVerticalPosition - (strokeOffset / (p.mouseX / 100)) * copyNumber)\n              //     : duplicateVerticalPosition - strokeOffset * copyNumber;\n\n              let horizontalTranslate =\n                previousHorizontalTranslation(idx) + strokeOffset * copyNumber;\n\n              let verticalTranslate =\n                duplicateVerticalPosition - strokeOffset * copyNumber;\n\n              p.push();\n              p.scale(1, verticalScale);\n              p.text(char.letter, horizontalTranslate, verticalTranslate);\n              p.pop();\n            });\n          });\n        });\n      }\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;\n"]},"metadata":{},"sourceType":"module"}