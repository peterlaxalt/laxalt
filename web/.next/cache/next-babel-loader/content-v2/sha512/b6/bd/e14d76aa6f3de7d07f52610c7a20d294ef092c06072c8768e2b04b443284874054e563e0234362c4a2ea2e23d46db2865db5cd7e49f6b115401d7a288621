{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n *\n * Cursor.js\n * @author Peter Laxalt\n * @description The website Cursor.\n *\n */\n// Core\nimport React, { createRef, PureComponent } from \"react\"; // Styles\n\nimport { CanvasCursorStyle, CanvasCursorClassName, CanvasCursorGlobalStyles } from \"./styles.scss\"; // Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Cursor\nexport class CanvasCursor extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"canvasRef\", /*#__PURE__*/createRef());\n\n    this.state = {\n      mouseX: 0,\n      mouseY: 0,\n      mouseIsPressed: false,\n      mouseCursor: {\n        radius: 10,\n        lastX: 0,\n        lastY: 0\n      },\n      drawing: {\n        x: 0,\n        y: 0,\n        coordinates: []\n      },\n      helper: {\n        text: \"\",\n        lastOpacity: 0,\n        opacity: 0\n      },\n      vw: 0,\n      vh: 0\n    };\n    this.calculateSize = this.calculateSize.bind(this);\n    this.renderCanvas = this.renderCanvas.bind(this);\n    this.startDrawing = this.startDrawing.bind(this);\n    this.drawLines = this.drawLines.bind(this);\n    this.stopDrawing = this.stopDrawing.bind(this);\n    this.storeLineCoordinates = this.storeLineCoordinates.bind(this);\n    this.clearCanvas = this.clearCanvas.bind(this);\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  init() {\n    // _____________________\n    // Setup our sizes\n    this.calculateSize();\n    this.setState({\n      mouseX: window.innerWidth / 2,\n      mouseY: window.innerHeight / 2,\n      mouseCursor: {\n        radius: 10,\n        lastX: window.innerWidth / 2,\n        lastY: window.innerHeight / 2\n      }\n    }); // _____________________\n    // Update initial coordinates\n\n    this.updateMouseCoords(); // _____________________\n    // Add event listeners\n\n    window.addEventListener(\"mousemove\", e => {\n      this.storeLineCoordinates(e);\n      this.setState({\n        mouseX: e.clientX,\n        mouseY: e.clientY\n      });\n    });\n    window.addEventListener(\"resize\", this.calculateSize, false);\n    window.addEventListener(\"mousedown\", this.startDrawing);\n    window.addEventListener(\"mouseup\", this.stopDrawing);\n    window.addEventListener(\"keydown\", this.clearCanvas);\n  } // ______________________________\n  // Calculate Sizes\n\n\n  calculateSize() {\n    this.setState({\n      vw: window.innerWidth,\n      vh: window.innerHeight\n    });\n\n    if (this.canvasRef.current) {\n      this.canvasRef.current.width = window.innerWidth;\n      this.canvasRef.current.height = window.innerHeight;\n    }\n  } // ______________________________\n  // Canvas Reference\n\n\n  // ______________________________\n  // Update Mouse Coordinates\n  updateMouseCoords() {\n    requestAnimationFrame(this.renderCanvas);\n  } // ______________________________\n  // Render to canvas\n\n\n  renderCanvas() {\n    if (this.canvasRef.current) {\n      let ctx = this.canvasRef.current.getContext(\"2d\");\n      this.setState({\n        mouseCursor: {\n          radius: 10,\n          lastX: this.lerp(this.state.mouseCursor.lastX, this.state.mouseX, 0.25),\n          lastY: this.lerp(this.state.mouseCursor.lastY, this.state.mouseY, 0.25)\n        }\n      });\n      ctx.clearRect(0, 0, this.state.vw, this.state.vh);\n      ctx.beginPath();\n      ctx.arc(this.state.mouseCursor.lastX, this.state.mouseCursor.lastY, this.state.mouseCursor.radius, 0, Math.PI * 2, false);\n      ctx.fillStyle = \"#ffffff\";\n      ctx.fill();\n      ctx.closePath(); // _____________________________\n      // Cursor Helpers\n\n      let ifNotOverNavigation = this.state.mouseY > 100 && this.state.mouseY < window.innerHeight - 100;\n\n      if (this.state.drawing.coordinates.length > 5 && this.state.drawing.coordinates.length < 25 && ifNotOverNavigation) {\n        this.setState({\n          helper: {\n            text: \"Press 'C' to clear drawing\",\n            lastOpacity: this.lerp(this.state.helper.lastOpacity, 1, 0.15),\n            opacity: 1\n          }\n        });\n        ctx.font = \"18px Neue Haas Grotesk Text Pro\";\n        ctx.fillStyle = `rgba(255,255,255, ${this.state.helper.lastOpacity})`;\n        ctx.fillText(this.state.helper.text, this.state.mouseCursor.lastX + 15, this.state.mouseCursor.lastY + -15);\n      } else if (window.scrollY < 100 && ifNotOverNavigation) {\n        this.setState({\n          helper: {\n            text: \"Scroll down\",\n            lastOpacity: this.lerp(this.state.helper.lastOpacity, 1, 0.15),\n            opacity: 1\n          }\n        });\n        ctx.font = \"18px Neue Haas Grotesk Text Pro\";\n        ctx.fillStyle = `rgba(255,255,255, ${this.state.helper.lastOpacity})`;\n        ctx.fillText(this.state.helper.text, this.state.mouseCursor.lastX + 15, this.state.mouseCursor.lastY + -15);\n      } else {\n        if (window.scrollY < 300 && ifNotOverNavigation) {\n          this.setState({\n            helper: {\n              text: \"Click and drag to draw anywhere\",\n              lastOpacity: this.lerp(this.state.helper.lastOpacity, this.state.helper.opacity, 0.15),\n              opacity: 1\n            }\n          });\n          ctx.font = \"18px Neue Haas Grotesk Text Pro\";\n          ctx.fillStyle = `rgba(255,255,255, ${this.state.helper.lastOpacity})`;\n          ctx.fillText(this.state.helper.text, this.state.mouseCursor.lastX + 15, this.state.mouseCursor.lastY + -15);\n        } else {\n          this.setState({\n            helper: {\n              text: this.state.helper.text,\n              lastOpacity: this.lerp(this.state.helper.lastOpacity, this.state.helper.opacity, 0.15),\n              opacity: 0\n            }\n          });\n          ctx.font = \"18px Neue Haas Grotesk Text Pro\";\n          ctx.fillStyle = `rgba(255,255,255, ${this.state.helper.lastOpacity})`;\n          ctx.fillText(this.state.helper.text, this.state.mouseCursor.lastX + 15, this.state.mouseCursor.lastY + -15);\n        }\n      } // ____________________________\n      // Check for drawing\n\n\n      this.drawLines(); // ____________________________\n      // Recursively animate\n\n      requestAnimationFrame(this.renderCanvas);\n    }\n  } // ______________________________\n  // LERP Helper Function\n\n\n  lerp(a, b, n) {\n    return (1 - n) * a + n * b;\n  } // ____________________________\n  // Drawing Functions\n\n\n  startDrawing(e) {\n    this.setState({\n      mouseIsPressed: true\n    }); // console.log(\"START DRAWING\", this.state.mouseIsPressed);\n  }\n\n  storeLineCoordinates(e) {\n    if (this.state.mouseIsPressed) {\n      let updatedCoordinates = this.state.drawing.coordinates;\n      let newCoordinates = {\n        // startX: this.state.mouseCursor.lastX,\n        // startY: this.state.mouseCursor.lastY,\n        startX: this.state.mouseX,\n        startY: this.state.mouseY,\n        endX: e.clientX,\n        endY: e.clientY\n      };\n      updatedCoordinates.push(newCoordinates);\n      this.setState({\n        drawing: _objectSpread(_objectSpread({}, this.state.drawing), {}, {\n          coordinates: updatedCoordinates\n        })\n      });\n    }\n  }\n\n  drawLines() {\n    let ctx = this.canvasRef.current.getContext(\"2d\");\n    this.state.drawing.coordinates.map(coord => {\n      ctx.beginPath(); // begin\n\n      ctx.lineWidth = 2;\n      ctx.lineCap = \"round\";\n      ctx.strokeStyle = \"#ffffff\";\n      ctx.moveTo(coord.startX, coord.startY); // from\n\n      ctx.lineTo(coord.endX, coord.endY); // to\n\n      ctx.stroke(); // draw it!\n      // console.log(\"LINE DRAWN\", coord);\n    });\n  }\n\n  stopDrawing() {\n    this.setState({\n      mouseIsPressed: false\n    }); // console.log(\"STOP DRAWING\", this.state.mouseIsPressed);\n  }\n\n  clearCanvas(e) {\n    console.log(e);\n\n    if (e.key === \"c\" || e.key === \"C\") {\n      let previousDrawingState = this.state.drawing;\n      this.setState({\n        drawing: _objectSpread(_objectSpread({}, previousDrawingState), {}, {\n          coordinates: []\n        })\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(CanvasCursorGlobalStyles, {}), /*#__PURE__*/_jsx(CanvasCursorStyle, {\n        ref: this.canvasRef,\n        className: `${CanvasCursorClassName}`\n      })]\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}