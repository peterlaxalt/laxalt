{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pflaxalt/Repositories/_pfl/web/components/HeadlineWrapper/HeadlineWrapper.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Core\nimport React, { useEffect, useState } from \"react\"; // Constants\n\n// Components\n// Styles\nimport { HeadlineWrapperClassName, HeadlineWrapperStyle } from \"./styles.scss\"; // Begin Types\n// __________________________________________________________________________________________\n\n// Begin Data\n// __________________________________________________________________________________________\nexport const HeadlineWrapper = ({\n  addClass,\n  children,\n  style\n}) => {\n  const {\n    0: isScrolled,\n    1: toggleScroll\n  } = useState(false);\n  let scrollModifier = `${HeadlineWrapperClassName}--${isScrolled ? `is-scrolled` : `is-not-scrolled`}`;\n\n  const listenToScroll = () => {\n    if (window.scrollY > 50) {\n      toggleScroll(true);\n      return;\n    } else {\n      toggleScroll(false);\n      return;\n    }\n  };\n\n  useEffect(() => {\n    if (\"undefined\") {\n      window.addEventListener(\"scroll\", listenToScroll);\n    }\n\n    return () => {\n      window.removeEventListener(\"scroll\", listenToScroll);\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(HeadlineWrapperStyle, {\n    className: `${HeadlineWrapperClassName} ${scrollModifier} ${addClass && addClass} `,\n    style: _objectSpread({}, style),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}; // End Component\n// ______________________________________________________________________________","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/components/HeadlineWrapper/HeadlineWrapper.tsx"],"names":["React","useEffect","useState","HeadlineWrapperClassName","HeadlineWrapperStyle","HeadlineWrapper","addClass","children","style","isScrolled","toggleScroll","scrollModifier","listenToScroll","window","scrollY","addEventListener","removeEventListener"],"mappings":";;;;;;;;;AAAA;AACA,OAAOA,KAAP,IAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D,C,CAEA;;AAMA;AAEA;AACA,SAASC,wBAAT,EAAmCC,oBAAnC,QAA+D,eAA/D,C,CAEA;AACA;;AAQA;AACA;AAEA,OAAO,MAAMC,eAA8D,GAAG,CAAC;AAC7EC,EAAAA,QAD6E;AAE7EC,EAAAA,QAF6E;AAG7EC,EAAAA;AAH6E,CAAD,KAIxE;AACJ,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA6BR,QAAQ,CAAC,KAAD,CAA3C;AAEA,MAAIS,cAAc,GAAI,GAAER,wBAAyB,KAC/CM,UAAU,GAAI,aAAJ,GAAoB,iBAC/B,EAFD;;AAIA,QAAMG,cAAc,GAAG,MAAM;AAC3B,QAAIC,MAAM,CAACC,OAAP,GAAiB,EAArB,EAAyB;AACvBJ,MAAAA,YAAY,CAAC,IAAD,CAAZ;AAEA;AACD,KAJD,MAIO;AACLA,MAAAA,YAAY,CAAC,KAAD,CAAZ;AAEA;AACD;AACF,GAVD;;AAYAT,EAAAA,SAAS,CAAC,MAAM;AACd,qBAAmB;AACjBY,MAAAA,MAAM,CAACE,gBAAP,CAAwB,QAAxB,EAAkCH,cAAlC;AACD;;AACD,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCJ,cAArC;AACD,KAFD;AAGD,GAPQ,CAAT;AASA,sBACE,QAAC,oBAAD;AACE,IAAA,SAAS,EAAG,GAAET,wBAAyB,IAAGQ,cAAe,IACvDL,QAAQ,IAAIA,QACb,GAHH;AAIE,IAAA,KAAK,oBAAOE,KAAP,CAJP;AAAA,cAMGD;AANH;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA1CM,C,CA4CP;AACA","sourcesContent":["// Core\nimport React, { CSSProperties, useEffect, useState } from \"react\";\n\n// Constants\nimport { __DEBUG__ } from \"../../constants/site/Settings\";\n\n// Types\nimport { LayeredSidebar, LXLT_SidebarPane } from \"../LayeredSidebar\";\n\n// Components\n\n// Styles\nimport { HeadlineWrapperClassName, HeadlineWrapperStyle } from \"./styles.scss\";\n\n// Begin Types\n// __________________________________________________________________________________________\n\nexport type LXLT_HeadlineWrapper = {\n  addClass?: string;\n  children: React.ReactNode;\n  style?: React.CSSProperties;\n};\n\n// Begin Data\n// __________________________________________________________________________________________\n\nexport const HeadlineWrapper: React.FunctionComponent<LXLT_HeadlineWrapper> = ({\n  addClass,\n  children,\n  style,\n}) => {\n  const [isScrolled, toggleScroll] = useState(false);\n\n  let scrollModifier = `${HeadlineWrapperClassName}--${\n    isScrolled ? `is-scrolled` : `is-not-scrolled`\n  }`;\n\n  const listenToScroll = () => {\n    if (window.scrollY > 50) {\n      toggleScroll(true);\n\n      return;\n    } else {\n      toggleScroll(false);\n\n      return;\n    }\n  };\n\n  useEffect(() => {\n    if (typeof window) {\n      window.addEventListener(\"scroll\", listenToScroll);\n    }\n    return () => {\n      window.removeEventListener(\"scroll\", listenToScroll);\n    };\n  });\n\n  return (\n    <HeadlineWrapperStyle\n      className={`${HeadlineWrapperClassName} ${scrollModifier} ${\n        addClass && addClass\n      } `}\n      style={{ ...style }}\n    >\n      {children}\n    </HeadlineWrapperStyle>\n  );\n};\n\n// End Component\n// ______________________________________________________________________________\n"]},"metadata":{},"sourceType":"module"}