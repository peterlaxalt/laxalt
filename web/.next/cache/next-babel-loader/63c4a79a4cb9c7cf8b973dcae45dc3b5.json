{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { FadeIn } from \"../../constants/styles/Animation\";\nimport { InteractiveFrameHeader } from \"../../components/InteractiveFrameHeader\"; // import { ThreeCanvas } from \"../../sketches/three/with-canvas-as-texture\";\n\nimport { ColorContext } from \"../../constants/styles/Color\";\nimport dynamic from \"next/dynamic\";\nimport { __DEBUG__ } from \"../../constants/site/Settings\"; // ______________________________________________________________\n\n// _________________________________________________________________________________\n\n/**\n *\n * @name P5Wrapper\n * @description Dynamic import of the P5 library\n *\n */\nconst P5Wrapper = dynamic(() => import(\"react-p5-wrapper\"), {\n  loading: () => __jsx(React.Fragment, null),\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"react-p5-wrapper\")],\n    modules: [\"react-p5-wrapper\"]\n  }\n});\n/**\n *\n * @name ThreePageWithContext\n *\n */\n\nclass ThreePageWithContext extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"canvasParentRef\", void 0);\n\n    _defineProperty(this, \"renderP5\", filename => {\n      __DEBUG__ && console.log(`🕓 Initializing p5 file ../../sketches/p5/${filename}`);\n      __DEBUG__ && console.log(`👨‍👦 Parent container ref: `, this.canvasParentRef);\n\n      const sketch = require(`../../sketches/p5/${filename}`).default(this.state.windowWidth, this.state.windowHeight, 1, this.props.colorThemeContext, this.canvasParentRef);\n\n      return __jsx(P5Wrapper, {\n        sketch: sketch\n      });\n    });\n\n    this.state = {\n      domLoaded: false,\n      windowWidth: 0,\n      windowHeight: 0,\n      canvasElement: undefined,\n      canvasTheme: undefined\n    }; // this.checkForCanvas = this.checkForCanvas.bind(this);\n    // this.initializeThree = this.initializeThree.bind(this);\n  }\n  /**\n   *\n   * @name canvasParentRef\n   * @description Our ref for our Three.js container\n   *\n   */\n\n\n  /**\n   *\n   * @name componentDidMount()\n   * @description Lifecycle to start using the window & document\n   *\n   */\n  componentDidMount() {\n    if (\"undefined\") {\n      this.setState({\n        windowWidth: window.innerWidth - 80,\n        windowHeight: window.innerHeight - 80,\n        domLoaded: true,\n        canvasElement: undefined,\n        canvasTheme: this.props.colorThemeContext\n      });\n    }\n  } // /**\n  //  *\n  //  * @name checkForCanvas()\n  //  * @description Recursively check if our canvas element exists\n  //  *\n  //  */\n  // checkForCanvas() {\n  //   const canvas: HTMLCanvasElement = document.getElementById(\n  //     \"defaultCanvas0\"\n  //   ) as HTMLCanvasElement;\n  //   if (canvas) {\n  //     __DEBUG__ && console.log(\"🤙 Canvas found:\", canvas);\n  //     this.setState({\n  //       canvasElement: canvas,\n  //     });\n  //     this.initializeThree();\n  //   } else {\n  //     __DEBUG__ &&\n  //       console.log(\"😭 Canvas not found, trying again in 100ms:\", canvas);\n  //     setTimeout(this.checkForCanvas, 100);\n  //   }\n  // }\n  // /**\n  //  *\n  //  * @name initializeThree()\n  //  * @description Fire up Three.js once we have canvas initialized\n  //  *\n  //  */\n  // initializeThree() {\n  //   // ThreeCanvas(\n  //   //   this.threeRootElement.el,\n  //   //   this.state.canvasElement,\n  //   //   this.props.colorThemeContext\n  //   // );\n  //   __DEBUG__ &&\n  //     console.log(\n  //       \"✅ Three initialization enqueued with canvas:\",\n  //       this.state.canvasElement\n  //     );\n  //   return;\n  // }\n\n  /**\n   *\n   * @name renderP5()\n   * @description Fire up p5.js canvas through a dynamic import\n   *\n   */\n\n\n  render() {\n    const ThreePageGlobalStyles = createGlobalStyle`\n      /* body, html {\n        overflow: hidden;\n      } */\n\n      .three-container {\n        width: 100vw;\n        height: 100vh;\n        overflow: hidden;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n\n        #p5_loading {\n          display: none !important;\n        }\n      }\n\n      #drawing-canvas {\n\t\t\t\tposition: absolute;\n\t\t\t\tbackground-color: #000000;\n\t\t\t\ttop: 0px;\n\t\t\t\tright: 0px;\n\t\t\t\tz-index: 3000;\n\t\t\t\tcursor: crosshair;\n\t\t\t\ttouch-action: none;\n\n        display: none;\n\t\t\t}\n\n      canvas {\n        animation: ${FadeIn} 1s ease 1;\n        animation-fill-mode: forwards;\n        animation-iteration-count: 1;\n      }\n\n      .canvas-container {\n        #defaultCanvas0 {\n          display: none;\n        }\n      }\n\n      .dharma-container {\n        opacity: 1;\n      }\n    `;\n    return __jsx(React.Fragment, null, __jsx(ThreePageGlobalStyles, null), __jsx(InteractiveFrameHeader, null), __jsx(\"div\", {\n      ref: element => this.canvasParentRef = element,\n      className: \"canvas-container\"\n    }, this.renderP5(\"dharma-as-canvas\")));\n  }\n\n}\n\nexport const ThreeCanvasPage = () => {\n  const themeContext = React.useContext(ColorContext);\n  return __jsx(ThreePageWithContext, {\n    colorThemeContext: themeContext\n  });\n};\nexport default ThreeCanvasPage;","map":null,"metadata":{},"sourceType":"module"}