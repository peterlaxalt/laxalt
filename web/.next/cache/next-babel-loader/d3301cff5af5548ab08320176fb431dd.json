{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pflaxalt/Repositories/_pfl/web/components/ThemePicker/ThemePicker.tsx\",\n    _this3 = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      \", \"\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// Core\nimport React, { useContext } from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { __DEBUG__ } from \"../../constants/site/Settings\";\nimport { ColorContext } from \"../../constants/styles/Color\";\nimport { CssUtils } from \"../../constants/styles/CssUtils\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemePickerClassName, ThemePickerStyle } from \"./styles.scss\"; // Begin Types\n// __________________________________________________________________________________________\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemePickerWithHook\n * @author Peter Laxalt\n *\n */\nexport var ThemePickerWithHook = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ThemePickerWithHook, _React$PureComponent);\n\n  var _super = _createSuper(ThemePickerWithHook);\n\n  function ThemePickerWithHook(props) {\n    var _this;\n\n    _classCallCheck(this, ThemePickerWithHook);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      activeTheme: {\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Text\n      },\n      availableThemes: [{\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Primary\n      }, {\n        name: \"galaxy\",\n        primary: \"#FFF8DC\",\n        secondary: \"#FFF8DC\",\n        background: Theme.Color.Galaxy,\n        foreground: \"#FFF8DC\"\n      }, {\n        name: \"salmon\",\n        primary: \"#000000\",\n        secondary: \"#000000\",\n        background: \"#FF8760\",\n        foreground: \"#000000\"\n      }, {\n        name: \"lemon\",\n        primary: \"#003eff\",\n        secondary: \"#003eff\",\n        background: \"#F4FF5E\",\n        foreground: \"#003eff\"\n      }, {\n        name: \"goldenrod\",\n        primary: \"#393349\",\n        secondary: \"#393349\",\n        background: \"#DAA520\",\n        foreground: \"#393349\"\n      }, {\n        name: \"cadetblue\",\n        primary: \"#003eff\",\n        secondary: \"#003eff\",\n        background: \"#ffb5f9\",\n        foreground: \"#003eff\"\n      }, {\n        name: \"orangered\",\n        primary: \"#FFF8DC\",\n        secondary: \"#FFF8DC\",\n        background: \"#FF4500\",\n        foreground: \"#FFF8DC\"\n      }]\n    };\n    _this.setNewTheme = _this.setNewTheme.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ThemePickerWithHook, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (\"object\") {\n        window.laxaltUniversalTheme = this.state.activeTheme;\n        __DEBUG__ && console.log(\"ðŸŽ¨ theme set\", window.laxaltUniversalTheme);\n      }\n    }\n  }, {\n    key: \"setNewTheme\",\n    value: function setNewTheme(theme) {\n      // const { setTheme } = this.props;\n      this.setState({\n        activeTheme: theme\n      });\n\n      if (\"object\") {\n        window.laxaltUniversalTheme = theme;\n      } // setTheme(theme);\n\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          activeTheme = _this$state.activeTheme,\n          availableThemes = _this$state.availableThemes;\n      var SetGlobalTheme = createGlobalStyle(_templateObject(), activeTheme ? CssUtils.CreateTheme(activeTheme.primary, activeTheme.secondary, activeTheme.background, activeTheme.foreground) : \"\");\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [activeTheme && activeTheme.name !== \"default\" ? /*#__PURE__*/_jsxDEV(SetGlobalTheme, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this) : null, /*#__PURE__*/_jsxDEV(ThemePickerStyle, {\n          className: \"\".concat(ThemePickerClassName),\n          children: availableThemes ? availableThemes.map(function (themeItem, idx) {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"\".concat(ThemePickerClassName, \"__option \").concat(ThemePickerClassName, \"__option--\").concat(themeItem.name === activeTheme.name ? \"active\" : \"inactive\"),\n              style: {\n                backgroundColor: \"lime\"\n              },\n              onClick: function onClick() {\n                return _this2.setNewTheme(themeItem);\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"\".concat(ThemePickerClassName, \"__option__el \").concat(ThemePickerClassName, \"__option__el--primary\"),\n                style: {\n                  backgroundColor: themeItem.background,\n                  border: \"1px solid \".concat(themeItem.background)\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 21\n              }, _this2), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"\".concat(ThemePickerClassName, \"__option__el \").concat(ThemePickerClassName, \"__option__el--secondary\"),\n                style: {\n                  backgroundColor: themeItem.foreground\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 21\n              }, _this2)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 19\n            }, _this2);\n          }) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true);\n    }\n  }]);\n\n  return ThemePickerWithHook;\n}(React.PureComponent);\nexport var ThemePicker = function ThemePicker() {\n  _s();\n\n  var _useContext = useContext(ColorContext),\n      setTheme = _useContext.setTheme;\n\n  return /*#__PURE__*/_jsxDEV(ThemePickerWithHook, {\n    setTheme: setTheme\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 10\n  }, _this3);\n};\n\n_s(ThemePicker, \"y+xtM1OefnlNuVcGnZR7qTH5k/E=\");\n\n_c = ThemePicker;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemePicker\");","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/components/ThemePicker/ThemePicker.tsx"],"names":["React","useContext","createGlobalStyle","__DEBUG__","ColorContext","CssUtils","Theme","ThemePickerClassName","ThemePickerStyle","ThemePickerWithHook","props","state","activeTheme","name","primary","Color","Primary","secondary","Secondary","background","Background","foreground","Text","availableThemes","Galaxy","setNewTheme","bind","window","laxaltUniversalTheme","console","log","theme","setState","SetGlobalTheme","CreateTheme","map","themeItem","idx","backgroundColor","border","PureComponent","ThemePicker","setTheme"],"mappings":"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","sourcesContent":["// Core\nimport React, { useContext } from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { __DEBUG__ } from \"../../constants/site/Settings\";\nimport { ColorContext, LXLT_ColorTheme } from \"../../constants/styles/Color\";\nimport { CssUtils } from \"../../constants/styles/CssUtils\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemePickerClassName, ThemePickerStyle } from \"./styles.scss\";\n\n// Begin Types\n// __________________________________________________________________________________________\n\ntype LXLT_ThemePicker = {\n  setTheme: (theme: LXLT_ColorTheme) => void;\n};\n\n// type LXLT_Theme = {\n// name: \"default\" | \"white\" | \"goldenrod\" | \"cadetblue\" | \"orangered\" | \"galaxy\";\n//   primary: string;\n//   secondary: string;\n//   background: string;\n//   foreground: string;\n// };\n\ntype LXLT_ThemePickerState = {\n  availableThemes: LXLT_ColorTheme[];\n  activeTheme?: LXLT_ColorTheme;\n};\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemePickerWithHook\n * @author Peter Laxalt\n *\n */\nexport class ThemePickerWithHook extends React.PureComponent<\n  LXLT_ThemePicker,\n  LXLT_ThemePickerState\n> {\n  constructor(props: LXLT_ThemePicker) {\n    super(props);\n\n    this.state = {\n      activeTheme: {\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Text,\n      },\n      availableThemes: [\n        {\n          name: \"default\",\n          primary: Theme.Color.Primary,\n          secondary: Theme.Color.Secondary,\n          background: Theme.Color.Background,\n          foreground: Theme.Color.Primary,\n        },\n        {\n          name: \"galaxy\",\n          primary: \"#FFF8DC\",\n          secondary: \"#FFF8DC\",\n          background: Theme.Color.Galaxy,\n          foreground: \"#FFF8DC\",\n        },\n        {\n          name: \"salmon\",\n          primary: \"#000000\",\n          secondary: \"#000000\",\n          background: \"#FF8760\",\n          foreground: \"#000000\",\n        },\n        {\n          name: \"lemon\",\n          primary: \"#003eff\",\n          secondary: \"#003eff\",\n          background: \"#F4FF5E\",\n          foreground: \"#003eff\",\n        },\n        {\n          name: \"goldenrod\",\n          primary: \"#393349\",\n          secondary: \"#393349\",\n          background: \"#DAA520\",\n          foreground: \"#393349\",\n        },\n        {\n          name: \"cadetblue\",\n          primary: \"#003eff\",\n          secondary: \"#003eff\",\n          background: \"#ffb5f9\",\n          foreground: \"#003eff\",\n        },\n        {\n          name: \"orangered\",\n          primary: \"#FFF8DC\",\n          secondary: \"#FFF8DC\",\n          background: \"#FF4500\",\n          foreground: \"#FFF8DC\",\n        },\n      ],\n    };\n\n    this.setNewTheme = this.setNewTheme.bind(this);\n  }\n\n  componentDidMount() {\n    if (typeof window) {\n      window.laxaltUniversalTheme = this.state.activeTheme;\n\n      __DEBUG__ && console.log(\"ðŸŽ¨ theme set\", window.laxaltUniversalTheme);\n    }\n  }\n\n  setNewTheme(theme: LXLT_ColorTheme) {\n    // const { setTheme } = this.props;\n\n    this.setState({\n      activeTheme: theme,\n    });\n\n    if (typeof window) {\n      window.laxaltUniversalTheme = theme;\n    }\n\n    // setTheme(theme);\n  }\n\n  render() {\n    let { activeTheme, availableThemes } = this.state;\n\n    const SetGlobalTheme = createGlobalStyle`\n      ${\n        activeTheme\n          ? CssUtils.CreateTheme(\n              activeTheme.primary,\n              activeTheme.secondary,\n              activeTheme.background,\n              activeTheme.foreground\n            )\n          : \"\"\n      }\n    `;\n\n    return (\n      <>\n        {activeTheme && activeTheme.name !== \"default\" ? (\n          <SetGlobalTheme />\n        ) : null}\n        <ThemePickerStyle className={`${ThemePickerClassName}`}>\n          {availableThemes\n            ? availableThemes.map((themeItem: LXLT_ColorTheme, idx: number) => {\n                return (\n                  <div\n                    className={`${ThemePickerClassName}__option ${ThemePickerClassName}__option--${\n                      themeItem.name === activeTheme.name\n                        ? \"active\"\n                        : \"inactive\"\n                    }`}\n                    style={{ backgroundColor: \"lime\" }}\n                    onClick={() => this.setNewTheme(themeItem)}\n                    key={idx}\n                  >\n                    <span\n                      className={`${ThemePickerClassName}__option__el ${ThemePickerClassName}__option__el--primary`}\n                      style={{ backgroundColor: themeItem.background, border: `1px solid ${themeItem.background}` }}\n                    />\n                    <span\n                      className={`${ThemePickerClassName}__option__el ${ThemePickerClassName}__option__el--secondary`}\n                      style={{ backgroundColor: themeItem.foreground }}\n                    />\n                  </div>\n                );\n              })\n            : null}\n        </ThemePickerStyle>\n      </>\n    );\n  }\n}\n\nexport const ThemePicker: React.FunctionComponent = () => {\n  const { setTheme } = useContext(ColorContext);\n\n  return <ThemePickerWithHook setTheme={setTheme} />;\n};\n"]},"metadata":{},"sourceType":"module"}