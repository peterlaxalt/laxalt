{"ast":null,"code":"import _slicedToArray from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n *\n * isVisible.ts\n * @description Dead simple function to know if something is in the viewport\n * @example https://stackoverflow.com/a/65008608/13364822\n *\n */\nimport { useEffect, useState } from \"react\";\nexport function isVisible(ref) {\n  var _useState = useState(false),\n      isIntersecting = _useState[0],\n      setIntersecting = _useState[1];\n\n  useEffect(function () {\n    var observer = new IntersectionObserver(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          entry = _ref2[0];\n\n      return setIntersecting(entry.isIntersecting);\n    });\n    observer.observe(ref.current); // Remove the observer as soon as the component is unmounted\n\n    return function () {\n      observer.disconnect();\n    };\n  }, []);\n  return isIntersecting;\n}\nexport function percentIsVisible(ref, percentVisible) {\n  var _useState2 = useState(false),\n      isIntersecting = _useState2[0],\n      setIntersecting = _useState2[1];\n\n  useEffect(function () {\n    var observer = new IntersectionObserver(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n          entry = _ref4[0];\n\n      console.log([entry]);\n\n      if (entry.intersectionRatio > percentVisible) {\n        setIntersecting(true);\n      } else {\n        setIntersecting(true);\n      }\n    });\n    observer.observe(ref.current); // Remove the observer as soon as the component is unmounted\n\n    return function () {\n      observer.disconnect();\n    };\n  }, []);\n  return isIntersecting;\n}","map":null,"metadata":{},"sourceType":"module"}