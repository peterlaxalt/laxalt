{"ast":null,"code":"/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n// Begin Component\n// __________________________________________________________________________\nconst GLSL_Canvas = (W, H, ID, BG) => p => {\n  // _________________________________________________\n  // Config\n  let theShader; // _________________________________________________\n  // Preload\n\n  p.preload = () => {\n    theShader = p.loadShader(`/shaders/ex_${ID}/shader.vert`, `/shaders/ex_${ID}/shader.frag`);\n  }; // _________________________________________________\n  // Setup\n\n\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H, p.WEBGL);\n    p.noStroke();\n  }; // _________________________________________________\n  // Draw\n\n\n  p.draw = () => {\n    // shader() sets the active shader with our shader\n    p.shader(theShader);\n    theShader.setUniform(\"u_resolution\", [W, H]);\n    theShader.setUniform(\"u_time\", p.millis() / 1000.0);\n    theShader.setUniform(\"u_mouse\", [p.mouseX, p.map(p.mouseY, 0, H, H, 0)]); // rect gives us some geometry on the screen\n\n    p.rect(0, 0, W, H);\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default GLSL_Canvas;","map":null,"metadata":{},"sourceType":"module"}