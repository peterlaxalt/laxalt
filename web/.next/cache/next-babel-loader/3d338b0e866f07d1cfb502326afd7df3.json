{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\n\n/**\n *\n * Sin Wave Cone\n * @author Peter Laxalt\n * @description Simple Sin Wave Cone in p5.js\n *\n */\n// Begin Component\n//////////////////////////////////////////////////////////////////////\nexport default (function (W, H, BG) {\n  return function (p) {\n    var x = 0;\n    var scale = 0;\n    var color = {\n      primary: \"black\",\n      primaryAlpha: \"black\",\n      secondary: \"#000000\",\n      bg: \"cyan\",\n      white: \"#ffffff\"\n    };\n\n    p.setup = function () {\n      // Our Canvas\n      p.createCanvas(W, H, p.WEBGL);\n      p.angleMode(p.RADIANS);\n    };\n\n    p.draw = function () {\n      scale += 1;\n      scale;\n      x = x * 1.1 + 2;\n      p.noFill();\n      p.stroke(color.primary);\n      p.background(color.bg);\n\n      for (var i = 0; i < 20; i++) {\n        p.cone(300, 400);\n        p.stroke(color.primaryAlpha);\n        p.strokeWeight(1);\n        p.translate(_parseInt((Math.sin(p.mouseX * 0.001) * 50).toString()), _parseInt((Math.sin(p.mouseY * 0.001) * 50).toString()), _parseInt((Math.sin(p.mouseX * 0.001) * 50).toString()));\n        p.smooth();\n        p.rotateX(p.frameCount * 0.01);\n        p.rotateY(p.frameCount * 0.01);\n      }\n    };\n\n    p.windowResized = function () {\n      p.resizeCanvas(W, H);\n      p.background(\"yellow\");\n    };\n  };\n});","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/glsl.tsx"],"names":["W","H","BG","p","x","scale","color","primary","primaryAlpha","secondary","bg","white","setup","createCanvas","WEBGL","angleMode","RADIANS","draw","noFill","stroke","background","i","cone","strokeWeight","translate","Math","sin","mouseX","toString","mouseY","smooth","rotateX","frameCount","rotateY","windowResized","resizeCanvas"],"mappings":";;AAAA;;;;;;;AAUA;AACA;AAEA,gBAAe,UAACA,CAAD,EAAYC,CAAZ,EAAuBC,EAAvB;AAAA,SAAsC,UAACC,CAAD,EAAW;AAC9D,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,KAAK,GAAG,CAAZ;AAEA,QAAIC,KAAK,GAAG;AACVC,MAAAA,OAAO,EAAE,OADC;AAEVC,MAAAA,YAAY,EAAE,OAFJ;AAGVC,MAAAA,SAAS,EAAE,SAHD;AAIVC,MAAAA,EAAE,EAAE,MAJM;AAKVC,MAAAA,KAAK,EAAE;AALG,KAAZ;;AAQAR,IAAAA,CAAC,CAACS,KAAF,GAAU,YAAM;AACd;AACAT,MAAAA,CAAC,CAACU,YAAF,CAAeb,CAAf,EAAkBC,CAAlB,EAAqBE,CAAC,CAACW,KAAvB;AACAX,MAAAA,CAAC,CAACY,SAAF,CAAYZ,CAAC,CAACa,OAAd;AACD,KAJD;;AAMAb,IAAAA,CAAC,CAACc,IAAF,GAAS,YAAM;AACbZ,MAAAA,KAAK,IAAI,CAAT;AACAA,MAAAA,KAAK;AACLD,MAAAA,CAAC,GAAGA,CAAC,GAAG,GAAJ,GAAU,CAAd;AAEAD,MAAAA,CAAC,CAACe,MAAF;AACAf,MAAAA,CAAC,CAACgB,MAAF,CAASb,KAAK,CAACC,OAAf;AACAJ,MAAAA,CAAC,CAACiB,UAAF,CAAad,KAAK,CAACI,EAAnB;;AAEA,WAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BlB,QAAAA,CAAC,CAACmB,IAAF,CAAO,GAAP,EAAY,GAAZ;AACAnB,QAAAA,CAAC,CAACgB,MAAF,CAASb,KAAK,CAACE,YAAf;AACAL,QAAAA,CAAC,CAACoB,YAAF,CAAe,CAAf;AACApB,QAAAA,CAAC,CAACqB,SAAF,CACE,UAAS,CAACC,IAAI,CAACC,GAAL,CAASvB,CAAC,CAACwB,MAAF,GAAW,KAApB,IAA6B,EAA9B,EAAkCC,QAAlC,EAAT,CADF,EAEE,UAAS,CAACH,IAAI,CAACC,GAAL,CAASvB,CAAC,CAAC0B,MAAF,GAAW,KAApB,IAA6B,EAA9B,EAAkCD,QAAlC,EAAT,CAFF,EAGE,UAAS,CAACH,IAAI,CAACC,GAAL,CAASvB,CAAC,CAACwB,MAAF,GAAW,KAApB,IAA6B,EAA9B,EAAkCC,QAAlC,EAAT,CAHF;AAKAzB,QAAAA,CAAC,CAAC2B,MAAF;AACA3B,QAAAA,CAAC,CAAC4B,OAAF,CAAU5B,CAAC,CAAC6B,UAAF,GAAe,IAAzB;AACA7B,QAAAA,CAAC,CAAC8B,OAAF,CAAU9B,CAAC,CAAC6B,UAAF,GAAe,IAAzB;AACD;AACF,KAtBD;;AAwBA7B,IAAAA,CAAC,CAAC+B,aAAF,GAAkB,YAAM;AACtB/B,MAAAA,CAAC,CAACgC,YAAF,CAAenC,CAAf,EAAkBC,CAAlB;AACAE,MAAAA,CAAC,CAACiB,UAAF,CAAa,QAAb;AACD,KAHD;AAID,GA9Cc;AAAA,CAAf","sourcesContent":["/**\n *\n * Sin Wave Cone\n * @author Peter Laxalt\n * @description Simple Sin Wave Cone in p5.js\n *\n */\n\nimport p5 from \"p5\";\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport default (W: number, H: number, BG: string) => (p: p5) => {\n  let x = 0;\n  let scale = 0;\n\n  let color = {\n    primary: \"black\",\n    primaryAlpha: \"black\",\n    secondary: \"#000000\",\n    bg: \"cyan\",\n    white: \"#ffffff\",\n  };\n\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H, p.WEBGL);\n    p.angleMode(p.RADIANS);\n  };\n\n  p.draw = () => {\n    scale += 1;\n    scale;\n    x = x * 1.1 + 2;\n\n    p.noFill();\n    p.stroke(color.primary);\n    p.background(color.bg);\n\n    for (let i = 0; i < 20; i++) {\n      p.cone(300, 400);\n      p.stroke(color.primaryAlpha);\n      p.strokeWeight(1);\n      p.translate(\n        parseInt((Math.sin(p.mouseX * 0.001) * 50).toString()),\n        parseInt((Math.sin(p.mouseY * 0.001) * 50).toString()),\n        parseInt((Math.sin(p.mouseX * 0.001) * 50).toString())\n      );\n      p.smooth();\n      p.rotateX(p.frameCount * 0.01);\n      p.rotateY(p.frameCount * 0.01);\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n    p.background(\"yellow\");\n  };\n};\n"]},"metadata":{},"sourceType":"module"}