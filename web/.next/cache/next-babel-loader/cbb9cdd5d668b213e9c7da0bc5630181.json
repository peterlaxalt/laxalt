{"ast":null,"code":"/**\n *\n * Sin Wave Circles\n * @author Peter Laxalt\n * @description Simple Sin Wave circles in p5.js\n *\n */\n// Begin Component\n//////////////////////////////////////////////////////////////////////\nexport default ((W, H) => p => {\n  let x = 0;\n  let scale = 50;\n  let initialScale = 0;\n  let color = {\n    primary: \"rgba(208, 112, 166, .3)\",\n    primaryAlpha: \"rgba(208, 112, 166, 1)\",\n    secondary: \"#FFF4F7\",\n    bg: \"#1C170C\",\n    white: \"#ffffff\"\n  };\n\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H);\n    p.angleMode(p.RADIANS);\n    p.background(\"yellow\");\n  };\n\n  p.draw = () => {\n    scale += 1;\n    initialScale = 400;\n    x = x * 1.1 + 2;\n    p.noFill();\n    p.stroke(color.primary);\n\n    if (p.mouseX > 0 || p.mouseY > 0) {\n      p.ellipse(p.mouseX, p.mouseY, Math.sin(scale) * (Math.sin(scale) * initialScale), Math.sin(scale) * (Math.sin(scale) * initialScale));\n      p.smooth();\n    } else {\n      p.ellipse(p.windowWidth / 2, p.windowHeight / 2, Math.sin(scale) * (Math.sin(scale) * initialScale), Math.sin(scale) * (Math.sin(scale) * initialScale));\n      p.smooth();\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n    p.background(\"yellow\");\n  };\n});","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/d2.tsx"],"names":["W","H","p","x","scale","initialScale","color","primary","primaryAlpha","secondary","bg","white","setup","createCanvas","angleMode","RADIANS","background","draw","noFill","stroke","mouseX","mouseY","ellipse","Math","sin","smooth","windowWidth","windowHeight","windowResized","resizeCanvas"],"mappings":"AAAA;;;;;;;AAQA;AACA;AAEA,gBAAe,CAACA,CAAD,EAASC,CAAT,KAAqBC,CAAD,IAAY;AAC7C,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,YAAY,GAAG,CAAnB;AAEA,MAAIC,KAAK,GAAG;AACVC,IAAAA,OAAO,EAAE,yBADC;AAEVC,IAAAA,YAAY,EAAE,wBAFJ;AAGVC,IAAAA,SAAS,EAAE,SAHD;AAIVC,IAAAA,EAAE,EAAE,SAJM;AAKVC,IAAAA,KAAK,EAAE;AALG,GAAZ;;AAQAT,EAAAA,CAAC,CAACU,KAAF,GAAU,MAAM;AACd;AACAV,IAAAA,CAAC,CAACW,YAAF,CAAeb,CAAf,EAAkBC,CAAlB;AACAC,IAAAA,CAAC,CAACY,SAAF,CAAYZ,CAAC,CAACa,OAAd;AACAb,IAAAA,CAAC,CAACc,UAAF,CAAa,QAAb;AACD,GALD;;AAOAd,EAAAA,CAAC,CAACe,IAAF,GAAS,MAAM;AACbb,IAAAA,KAAK,IAAI,CAAT;AACAC,IAAAA,YAAY,GAAG,GAAf;AACAF,IAAAA,CAAC,GAAGA,CAAC,GAAG,GAAJ,GAAU,CAAd;AAEAD,IAAAA,CAAC,CAACgB,MAAF;AACAhB,IAAAA,CAAC,CAACiB,MAAF,CAASb,KAAK,CAACC,OAAf;;AAEA,QAAIL,CAAC,CAACkB,MAAF,GAAW,CAAX,IAAgBlB,CAAC,CAACmB,MAAF,GAAW,CAA/B,EAAkC;AAChCnB,MAAAA,CAAC,CAACoB,OAAF,CACEpB,CAAC,CAACkB,MADJ,EAEElB,CAAC,CAACmB,MAFJ,EAGEE,IAAI,CAACC,GAAL,CAASpB,KAAT,KAAmBmB,IAAI,CAACC,GAAL,CAASpB,KAAT,IAAkBC,YAArC,CAHF,EAIEkB,IAAI,CAACC,GAAL,CAASpB,KAAT,KAAmBmB,IAAI,CAACC,GAAL,CAASpB,KAAT,IAAkBC,YAArC,CAJF;AAMAH,MAAAA,CAAC,CAACuB,MAAF;AACD,KARD,MAQO;AACLvB,MAAAA,CAAC,CAACoB,OAAF,CACEpB,CAAC,CAACwB,WAAF,GAAgB,CADlB,EAEExB,CAAC,CAACyB,YAAF,GAAiB,CAFnB,EAGEJ,IAAI,CAACC,GAAL,CAASpB,KAAT,KAAmBmB,IAAI,CAACC,GAAL,CAASpB,KAAT,IAAkBC,YAArC,CAHF,EAIEkB,IAAI,CAACC,GAAL,CAASpB,KAAT,KAAmBmB,IAAI,CAACC,GAAL,CAASpB,KAAT,IAAkBC,YAArC,CAJF;AAMAH,MAAAA,CAAC,CAACuB,MAAF;AACD;AACF,GAzBD;;AA2BAvB,EAAAA,CAAC,CAAC0B,aAAF,GAAkB,MAAM;AACtB1B,IAAAA,CAAC,CAAC2B,YAAF,CAAe7B,CAAf,EAAkBC,CAAlB;AACAC,IAAAA,CAAC,CAACc,UAAF,CAAa,QAAb;AACD,GAHD;AAID,CAnDD","sourcesContent":["/**\n *\n * Sin Wave Circles\n * @author Peter Laxalt\n * @description Simple Sin Wave circles in p5.js\n *\n */\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport default (W: any, H: any) => (p: any) => {\n  let x = 0;\n  let scale = 50;\n  let initialScale = 0;\n\n  let color = {\n    primary: \"rgba(208, 112, 166, .3)\",\n    primaryAlpha: \"rgba(208, 112, 166, 1)\",\n    secondary: \"#FFF4F7\",\n    bg: \"#1C170C\",\n    white: \"#ffffff\"\n  };\n\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H);\n    p.angleMode(p.RADIANS);\n    p.background(\"yellow\")\n  };\n\n  p.draw = () => {\n    scale += 1;\n    initialScale = 400;\n    x = x * 1.1 + 2;\n\n    p.noFill();\n    p.stroke(color.primary);\n\n    if (p.mouseX > 0 || p.mouseY > 0) {\n      p.ellipse(\n        p.mouseX,\n        p.mouseY,\n        Math.sin(scale) * (Math.sin(scale) * initialScale),\n        Math.sin(scale) * (Math.sin(scale) * initialScale)\n      );\n      p.smooth();\n    } else {\n      p.ellipse(\n        p.windowWidth / 2,\n        p.windowHeight / 2,\n        Math.sin(scale) * (Math.sin(scale) * initialScale),\n        Math.sin(scale) * (Math.sin(scale) * initialScale)\n      );\n      p.smooth();\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n    p.background(\"yellow\")\n  };\n};\n"]},"metadata":{},"sourceType":"module"}