{"ast":null,"code":"import * as THREE from \"three\";\nimport { GUI } from \"./jsm/libs/dat.gui.module.js\";\nimport { OrbitControls } from \"./jsm/controls/OrbitControls.js\";\nexport const canvas = container => {\n  /**\n   * Setup\n   */\n  var mesh, renderer, scene, camera, controls, sketch;\n  var gui;\n  var API = {\n    offsetX: 0,\n    offsetY: 0,\n    repeatX: 0.25,\n    repeatY: 0.25,\n    rotation: Math.PI / 4,\n    // positive is counter-clockwise\n    centerX: 0.5,\n    centerY: 0.5\n  };\n  init();\n\n  function init() {\n    renderer = new THREE.WebGLRenderer();\n    sketch = container;\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    sketch.appendChild(renderer.domElement);\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 1000);\n    camera.position.set(0, 0, 25);\n    scene.background = new THREE.Color(0xffffff);\n    scene.add(camera);\n    /**\n     * Camera controls\n     */\n\n    controls = new OrbitControls(camera, renderer.domElement);\n    controls.movementSpeed = 10000;\n    controls.domElement = renderer.domElement;\n    controls.rollSpeed = Math.PI / 24;\n    controls.autoForward = true;\n    controls.dragToLook = true;\n    controls.enableZoom = false;\n    var geometry = new THREE.TorusKnotBufferGeometry(10, 3, 200, 200);\n    new THREE.TextureLoader().load(\"/projects/three/19of19-tile-white.png\", function (texture) {\n      texture.wrapS = texture.wrapT = THREE.RepeatWrapping; // texture.anisotropy = renderer.capabilities.getMaxAnisotropy();\n\n      texture.anisotropy = 1; //texture.matrixAutoUpdate = false; // default true; set to false to update texture.matrix manually\n\n      var material = new THREE.MeshBasicMaterial({\n        map: texture\n      });\n      mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh);\n      updateUvTransform();\n      animate();\n    });\n    window.addEventListener(\"resize\", onWindowResize, false);\n  } // our scale of the pattern\n\n\n  var repeatX = 0;\n  var repeatY = 0;\n  var frameCount = 0;\n\n  function animate() {\n    // call animate recursively\n    requestAnimationFrame(animate); // texture manipulation\n\n    var texture = mesh.material.map;\n    frameCount += 1;\n    repeatX += 0.01;\n    repeatY += 0.01; // if (repeatX < 13) {\n    //   repeatX += 0.01;\n    //   repeatY += 0.01;\n    // } else {\n    //   repeatX += 0.001;\n    //   repeatY += 0.001;\n    // }\n    // else {\n    //   if (repeatY < 60) {\n    //     repeatY += 0.05;\n    //   } else {\n    //     repeatX += 0.05;\n    //   }\n    // }\n    // console.log(\n    //   \"repeatX: \" +\n    //     repeatX +\n    //     \", repeatY: \" +\n    //     repeatY +\n    //     \", frameCount: \" +\n    //     frameCount\n    // );\n    // console.log(texture);\n\n    texture.rotation += 0.0001;\n    texture.repeat = {\n      x: repeatX,\n      y: repeatY\n    }; // increase the mesh's rotation each frame\n\n    mesh.rotation.z += 0.0008;\n    mesh.rotation.x += 0.0008;\n    mesh.rotation.y += 0.0008; // render, or 'create a still image', of the scene\n    // this will create one still image / frame each time the animate\n    // function calls itself\n\n    renderer.render(scene, camera);\n  }\n\n  function render() {\n    renderer.render(scene, camera);\n  }\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    render();\n  }\n\n  function updateUvTransform() {\n    var texture = mesh.material.map;\n\n    if (texture.matrixAutoUpdate === true) {\n      texture.offset.set(API.offsetX, API.offsetY); // texture.repeat.set(API.repeatX, API.repeatY);\n\n      texture.center.set(API.centerX, API.centerY); // texture.rotation = API.rotation; // rotation is around [ 0.5, 0.5 ]\n    } else {\n      // one way...\n      //texture.matrix.setUvTransform( API.offsetX, API.offsetY, API.repeatX, API.repeatY, API.rotation, API.centerX, API.centerY );\n      // another way...\n      texture.matrix.identity().translate(-API.centerX, -API.centerY) // .rotate(API.rotation) // I don't understand how rotation can preceed scale, but it seems to be required...\n      // .scale(API.repeatX, API.repeatY)\n      .translate(API.centerX, API.centerY).translate(API.offsetX, API.offsetY);\n    }\n\n    render();\n  }\n\n  function initGui() {\n    gui = new GUI();\n    gui.add(API, \"offsetX\", 0.0, 1.0).name(\"offset.x\").onChange(updateUvTransform);\n    gui.add(API, \"offsetY\", 0.0, 1.0).name(\"offset.y\").onChange(updateUvTransform); // gui\n    //   .add(API, \"repeatX\", 0.25, 2.0)\n    //   .name(\"repeat.x\")\n    //   .onChange(updateUvTransform);\n    // gui\n    //   .add(API, \"repeatY\", 0.25, 2.0)\n    //   .name(\"repeat.y\")\n    //   .onChange(updateUvTransform);\n    // gui\n    //   .add(API, \"rotation\", -2.0, 2.0)\n    //   .name(\"rotation\")\n    //   .onChange(updateUvTransform);\n\n    gui.add(API, \"centerX\", 0.0, 1.0).name(\"center.x\").onChange(updateUvTransform);\n    gui.add(API, \"centerY\", 0.0, 1.0).name(\"center.y\").onChange(updateUvTransform);\n  }\n}; // export const canvas = container => {\n//   // these need to be accessed inside more than one function so we'll declare them first\n//   let camera;\n//   let renderer;\n//   let scene;\n//   let mesh;\n//   function init() {\n//     // create a Scene\n//     scene = new THREE.Scene();\n//     scene.background = new THREE.Color(0x8fbcd4);\n//     // set up the options for a perspective camera\n//     const fov = 35; // fov = Field Of View\n//     const aspect = container.clientWidth / container.clientHeight;\n//     const near = 0.1;\n//     const far = 100;\n//     camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n//     // every object is initially created at ( 0, 0, 0 )\n//     // we'll move the camera back a bit so that we can view the scene\n//     camera.position.set(0, 0, 10);\n//     // create a geometry\n//     const geometry = new THREE.BoxBufferGeometry(2, 2, 2);\n//     // create a purple Standard material\n//     const material = new THREE.MeshStandardMaterial({ color: 0x800080 });\n//     // create a Mesh containing the geometry and material\n//     mesh = new THREE.Mesh(geometry, material);\n//     // add the mesh to the scene object\n//     scene.add(mesh);\n//     // Create a directional light\n//     const light = new THREE.DirectionalLight(0xffffff, 5.0);\n//     // move the light back and up a bit\n//     light.position.set(10, 10, 10);\n//     // remember to add the light to the scene\n//     scene.add(light);\n//     // create a WebGLRenderer and set its width and height\n//     renderer = new THREE.WebGLRenderer({ antialias: true });\n//     renderer.setSize(container.clientWidth, container.clientHeight);\n//     renderer.setPixelRatio(window.devicePixelRatio);\n//     // add the automatically created <canvas> element to the page\n//     container.appendChild(renderer.domElement);\n//   }\n//   function animate() {\n//     // call animate recursively\n//     requestAnimationFrame(animate);\n//     // increase the mesh's rotation each frame\n//     mesh.rotation.z += 0.01;\n//     mesh.rotation.x += 0.01;\n//     mesh.rotation.y += 0.01;\n//     // render, or 'create a still image', of the scene\n//     // this will create one still image / frame each time the animate\n//     // function calls itself\n//     renderer.render(scene, camera);\n//   }\n//   // call the init function to set everything up\n//   init();\n//   // then call the animate function to render the scene\n//   animate();\n// };","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/three/t2.js"],"names":["THREE","GUI","OrbitControls","canvas","container","mesh","renderer","scene","camera","controls","sketch","gui","API","offsetX","offsetY","repeatX","repeatY","rotation","Math","PI","centerX","centerY","init","WebGLRenderer","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","appendChild","domElement","Scene","PerspectiveCamera","position","set","background","Color","add","movementSpeed","rollSpeed","autoForward","dragToLook","enableZoom","geometry","TorusKnotBufferGeometry","TextureLoader","load","texture","wrapS","wrapT","RepeatWrapping","anisotropy","material","MeshBasicMaterial","map","Mesh","updateUvTransform","animate","addEventListener","onWindowResize","frameCount","requestAnimationFrame","repeat","x","y","z","render","aspect","updateProjectionMatrix","matrixAutoUpdate","offset","center","matrix","identity","translate","initGui","name","onChange"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport { GUI } from \"./jsm/libs/dat.gui.module.js\";\nimport { OrbitControls } from \"./jsm/controls/OrbitControls.js\";\n\nexport const canvas = container => {\n  /**\n   * Setup\n   */\n\n  var mesh, renderer, scene, camera, controls, sketch;\n\n  var gui;\n\n  var API = {\n    offsetX: 0,\n    offsetY: 0,\n    repeatX: 0.25,\n    repeatY: 0.25,\n    rotation: Math.PI / 4, // positive is counter-clockwise\n    centerX: 0.5,\n    centerY: 0.5\n  };\n\n  init();\n\n  function init() {\n    renderer = new THREE.WebGLRenderer();\n    sketch = container;\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    sketch.appendChild(renderer.domElement);\n\n    scene = new THREE.Scene();\n\n    camera = new THREE.PerspectiveCamera(\n      40,\n      window.innerWidth / window.innerHeight,\n      1,\n      1000\n    );\n    camera.position.set(0, 0, 25);\n\n    scene.background = new THREE.Color(0xffffff);\n    scene.add(camera);\n\n    /**\n     * Camera controls\n     */\n    controls = new OrbitControls(camera, renderer.domElement);\n    controls.movementSpeed = 10000;\n    controls.domElement = renderer.domElement;\n    controls.rollSpeed = Math.PI / 24;\n    controls.autoForward = true;\n    controls.dragToLook = true;\n    controls.enableZoom = false;\n\n    var geometry = new THREE.TorusKnotBufferGeometry(10, 3, 200, 200);\n\n    new THREE.TextureLoader().load(\"/projects/three/19of19-tile-white.png\", function(\n      texture\n    ) {\n      texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n      // texture.anisotropy = renderer.capabilities.getMaxAnisotropy();\n      texture.anisotropy = 1;\n\n      //texture.matrixAutoUpdate = false; // default true; set to false to update texture.matrix manually\n\n      var material = new THREE.MeshBasicMaterial({ map: texture });\n\n      mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh);\n\n      updateUvTransform();\n\n      animate();\n    });\n\n    window.addEventListener(\"resize\", onWindowResize, false);\n  }\n\n  // our scale of the pattern\n  var repeatX = 0;\n  var repeatY = 0;\n  var frameCount = 0;\n\n  function animate() {\n    // call animate recursively\n    requestAnimationFrame(animate);\n\n    // texture manipulation\n    var texture = mesh.material.map;\n    frameCount += 1;\n\n    repeatX += 0.01;\n    repeatY += 0.01;\n\n    // if (repeatX < 13) {\n    //   repeatX += 0.01;\n    //   repeatY += 0.01;\n    // } else {\n    //   repeatX += 0.001;\n    //   repeatY += 0.001;\n    // }\n    // else {\n    //   if (repeatY < 60) {\n    //     repeatY += 0.05;\n    //   } else {\n    //     repeatX += 0.05;\n    //   }\n    // }\n\n    // console.log(\n    //   \"repeatX: \" +\n    //     repeatX +\n    //     \", repeatY: \" +\n    //     repeatY +\n    //     \", frameCount: \" +\n    //     frameCount\n    // );\n\n    // console.log(texture);\n    texture.rotation += 0.0001;\n    texture.repeat = { x: repeatX, y: repeatY };\n\n    // increase the mesh's rotation each frame\n    mesh.rotation.z += 0.0008;\n    mesh.rotation.x += 0.0008;\n    mesh.rotation.y += 0.0008;\n\n    // render, or 'create a still image', of the scene\n    // this will create one still image / frame each time the animate\n    // function calls itself\n    renderer.render(scene, camera);\n  }\n\n  function render() {\n    renderer.render(scene, camera);\n  }\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n\n    camera.updateProjectionMatrix();\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n\n    render();\n  }\n\n  function updateUvTransform() {\n    var texture = mesh.material.map;\n\n    if (texture.matrixAutoUpdate === true) {\n      texture.offset.set(API.offsetX, API.offsetY);\n      // texture.repeat.set(API.repeatX, API.repeatY);\n      texture.center.set(API.centerX, API.centerY);\n      // texture.rotation = API.rotation; // rotation is around [ 0.5, 0.5 ]\n    } else {\n      // one way...\n      //texture.matrix.setUvTransform( API.offsetX, API.offsetY, API.repeatX, API.repeatY, API.rotation, API.centerX, API.centerY );\n\n      // another way...\n      texture.matrix\n        .identity()\n        .translate(-API.centerX, -API.centerY)\n        // .rotate(API.rotation) // I don't understand how rotation can preceed scale, but it seems to be required...\n        // .scale(API.repeatX, API.repeatY)\n        .translate(API.centerX, API.centerY)\n        .translate(API.offsetX, API.offsetY);\n    }\n\n    render();\n  }\n\n  function initGui() {\n    gui = new GUI();\n\n    gui\n      .add(API, \"offsetX\", 0.0, 1.0)\n      .name(\"offset.x\")\n      .onChange(updateUvTransform);\n    gui\n      .add(API, \"offsetY\", 0.0, 1.0)\n      .name(\"offset.y\")\n      .onChange(updateUvTransform);\n    // gui\n    //   .add(API, \"repeatX\", 0.25, 2.0)\n    //   .name(\"repeat.x\")\n    //   .onChange(updateUvTransform);\n    // gui\n    //   .add(API, \"repeatY\", 0.25, 2.0)\n    //   .name(\"repeat.y\")\n    //   .onChange(updateUvTransform);\n    // gui\n    //   .add(API, \"rotation\", -2.0, 2.0)\n    //   .name(\"rotation\")\n    //   .onChange(updateUvTransform);\n    gui\n      .add(API, \"centerX\", 0.0, 1.0)\n      .name(\"center.x\")\n      .onChange(updateUvTransform);\n    gui\n      .add(API, \"centerY\", 0.0, 1.0)\n      .name(\"center.y\")\n      .onChange(updateUvTransform);\n  }\n};\n\n// export const canvas = container => {\n//   // these need to be accessed inside more than one function so we'll declare them first\n//   let camera;\n//   let renderer;\n//   let scene;\n//   let mesh;\n\n//   function init() {\n//     // create a Scene\n//     scene = new THREE.Scene();\n\n//     scene.background = new THREE.Color(0x8fbcd4);\n\n//     // set up the options for a perspective camera\n//     const fov = 35; // fov = Field Of View\n//     const aspect = container.clientWidth / container.clientHeight;\n//     const near = 0.1;\n//     const far = 100;\n\n//     camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n\n//     // every object is initially created at ( 0, 0, 0 )\n//     // we'll move the camera back a bit so that we can view the scene\n//     camera.position.set(0, 0, 10);\n\n//     // create a geometry\n//     const geometry = new THREE.BoxBufferGeometry(2, 2, 2);\n\n//     // create a purple Standard material\n//     const material = new THREE.MeshStandardMaterial({ color: 0x800080 });\n\n//     // create a Mesh containing the geometry and material\n//     mesh = new THREE.Mesh(geometry, material);\n\n//     // add the mesh to the scene object\n//     scene.add(mesh);\n\n//     // Create a directional light\n//     const light = new THREE.DirectionalLight(0xffffff, 5.0);\n\n//     // move the light back and up a bit\n//     light.position.set(10, 10, 10);\n\n//     // remember to add the light to the scene\n//     scene.add(light);\n\n//     // create a WebGLRenderer and set its width and height\n//     renderer = new THREE.WebGLRenderer({ antialias: true });\n//     renderer.setSize(container.clientWidth, container.clientHeight);\n\n//     renderer.setPixelRatio(window.devicePixelRatio);\n\n//     // add the automatically created <canvas> element to the page\n//     container.appendChild(renderer.domElement);\n//   }\n\n//   function animate() {\n//     // call animate recursively\n//     requestAnimationFrame(animate);\n\n//     // increase the mesh's rotation each frame\n//     mesh.rotation.z += 0.01;\n//     mesh.rotation.x += 0.01;\n//     mesh.rotation.y += 0.01;\n\n//     // render, or 'create a still image', of the scene\n//     // this will create one still image / frame each time the animate\n//     // function calls itself\n//     renderer.render(scene, camera);\n//   }\n\n//   // call the init function to set everything up\n//   init();\n\n//   // then call the animate function to render the scene\n//   animate();\n// };\n"]},"metadata":{},"sourceType":"module"}