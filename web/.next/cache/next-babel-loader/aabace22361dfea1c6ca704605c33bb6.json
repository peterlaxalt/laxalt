{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/pflaxalt/Repositories/_pfl/web/components/ThemePicker/ThemePicker.tsx\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      \", \"\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n// Core\nimport React from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { CssUtils } from \"../../constants/styles/CssUtils\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemePickerClassName, ThemePickerStyle } from \"./styles.scss\"; // Begin Types\n// __________________________________________________________________________________________\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemePicker\n * @author Peter Laxalt\n *\n */\nexport var ThemePicker =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(ThemePicker, _React$PureComponent);\n\n  function ThemePicker(props) {\n    var _this;\n\n    _classCallCheck(this, ThemePicker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ThemePicker).call(this, props));\n    _this.state = {\n      themes: [{\n        name: \"lightcyan\",\n        primary: Theme.Color.Galaxy,\n        secondary: Theme.Color.Galaxy,\n        background: \"lightcyan\",\n        foreground: Theme.Color.Galaxy\n      }, {\n        name: \"goldenrod\",\n        primary: Theme.Color.Galaxy,\n        secondary: Theme.Color.Galaxy,\n        background: \"goldenrod\",\n        foreground: Theme.Color.Galaxy\n      }, {\n        name: \"honeydew\",\n        primary: Theme.Color.Galaxy,\n        secondary: Theme.Color.Galaxy,\n        background: \"honeydew\",\n        foreground: Theme.Color.Galaxy\n      }]\n    }; // this.letterCountTimer = this.letterCountTimer.bind(this);\n\n    return _this;\n  }\n\n  _createClass(ThemePicker, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"incrementLetterCount\",\n    value: function incrementLetterCount(id) {// this.setState({\n      //   characters: this.state.characters.map(\n      //     (character: LXLT_DharmaChar, idx: number) => {\n      //       return {\n      //         letter: character.letter,\n      //         count: id == character.idx ? character.count + 1 : character.count,\n      //         idx: idx,\n      //       };\n      //     }\n      //   ),\n      // });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var activeTheme = this.state.activeTheme;\n      var setGlobalTheme = createGlobalStyle(_templateObject(), activeTheme ? CssUtils.CreateTheme(activeTheme.primary, activeTheme.secondary, activeTheme.background, activeTheme.foreground) : \"\");\n      return __jsx(ThemePickerStyle, {\n        className: \"\".concat(ThemePickerClassName),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"PICKER\");\n    }\n  }]);\n\n  return ThemePicker;\n}(React.PureComponent);","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/components/ThemePicker/ThemePicker.tsx"],"names":["React","createGlobalStyle","CssUtils","Theme","ThemePickerClassName","ThemePickerStyle","ThemePicker","props","state","themes","name","primary","Color","Galaxy","secondary","background","foreground","id","activeTheme","setGlobalTheme","CreateTheme","PureComponent"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,QAAT,QAAyB,iCAAzB;AACA,SAASC,KAAT,QAAsB,uBAAtB;AACA,SAASC,oBAAT,EAA+BC,gBAA/B,QAAuD,eAAvD,C,CAEA;AACA;;AAiBA;AACA;;AAEA;;;;;AAKA,WAAaC,WAAb;AAAA;AAAA;AAAA;;AAIE,uBAAYC,KAAZ,EAAqC;AAAA;;AAAA;;AACnC,qFAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,CACN;AACEC,QAAAA,IAAI,EAAE,WADR;AAEEC,QAAAA,OAAO,EAAER,KAAK,CAACS,KAAN,CAAYC,MAFvB;AAGEC,QAAAA,SAAS,EAAEX,KAAK,CAACS,KAAN,CAAYC,MAHzB;AAIEE,QAAAA,UAAU,EAAE,WAJd;AAKEC,QAAAA,UAAU,EAAEb,KAAK,CAACS,KAAN,CAAYC;AAL1B,OADM,EAQN;AACEH,QAAAA,IAAI,EAAE,WADR;AAEEC,QAAAA,OAAO,EAAER,KAAK,CAACS,KAAN,CAAYC,MAFvB;AAGEC,QAAAA,SAAS,EAAEX,KAAK,CAACS,KAAN,CAAYC,MAHzB;AAIEE,QAAAA,UAAU,EAAE,WAJd;AAKEC,QAAAA,UAAU,EAAEb,KAAK,CAACS,KAAN,CAAYC;AAL1B,OARM,EAeN;AACEH,QAAAA,IAAI,EAAE,UADR;AAEEC,QAAAA,OAAO,EAAER,KAAK,CAACS,KAAN,CAAYC,MAFvB;AAGEC,QAAAA,SAAS,EAAEX,KAAK,CAACS,KAAN,CAAYC,MAHzB;AAIEE,QAAAA,UAAU,EAAE,UAJd;AAKEC,QAAAA,UAAU,EAAEb,KAAK,CAACS,KAAN,CAAYC;AAL1B,OAfM;AADG,KAAb,CAHmC,CA6BnC;;AA7BmC;AA8BpC;;AAlCH;AAAA;AAAA,wCAoCsB,CAAE;AApCxB;AAAA;AAAA,yCAsCuBI,EAtCvB,EAsCmC,CAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AAlDH;AAAA;AAAA,6BAoDW;AAAA,UACDC,WADC,GACe,KAAKV,KADpB,CACDU,WADC;AAGP,UAAMC,cAAc,GAAGlB,iBAAH,oBAEhBiB,WAAW,GACPhB,QAAQ,CAACkB,WAAT,CACEF,WAAW,CAACP,OADd,EAEEO,WAAW,CAACJ,SAFd,EAGEI,WAAW,CAACH,UAHd,EAIEG,WAAW,CAACF,UAJd,CADO,GAOP,EATY,CAApB;AAaA,aACE,MAAC,gBAAD;AAAkB,QAAA,SAAS,YAAKZ,oBAAL,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF;AAKD;AAzEH;;AAAA;AAAA,EAAiCJ,KAAK,CAACqB,aAAvC","sourcesContent":["// Core\nimport React from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { CssUtils } from \"../../constants/styles/CssUtils\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemePickerClassName, ThemePickerStyle } from \"./styles.scss\";\n\n// Begin Types\n// __________________________________________________________________________________________\n\ntype LXLT_ThemePicker = {};\n\ntype LXLT_Theme = {\n  name: string;\n  primary: string;\n  secondary: string;\n  background: string;\n  foreground: string;\n};\n\ntype LXLT_ThemePickerState = {\n  themes: LXLT_Theme[];\n  activeTheme?: LXLT_Theme;\n};\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemePicker\n * @author Peter Laxalt\n *\n */\nexport class ThemePicker extends React.PureComponent<\n  LXLT_ThemePicker,\n  LXLT_ThemePickerState\n> {\n  constructor(props: LXLT_ThemePicker) {\n    super(props);\n\n    this.state = {\n      themes: [\n        {\n          name: \"lightcyan\",\n          primary: Theme.Color.Galaxy,\n          secondary: Theme.Color.Galaxy,\n          background: \"lightcyan\",\n          foreground: Theme.Color.Galaxy,\n        },\n        {\n          name: \"goldenrod\",\n          primary: Theme.Color.Galaxy,\n          secondary: Theme.Color.Galaxy,\n          background: \"goldenrod\",\n          foreground: Theme.Color.Galaxy,\n        },\n        {\n          name: \"honeydew\",\n          primary: Theme.Color.Galaxy,\n          secondary: Theme.Color.Galaxy,\n          background: \"honeydew\",\n          foreground: Theme.Color.Galaxy,\n        },\n      ],\n    };\n\n    // this.letterCountTimer = this.letterCountTimer.bind(this);\n  }\n\n  componentDidMount() {}\n\n  incrementLetterCount(id: number) {\n    // this.setState({\n    //   characters: this.state.characters.map(\n    //     (character: LXLT_DharmaChar, idx: number) => {\n    //       return {\n    //         letter: character.letter,\n    //         count: id == character.idx ? character.count + 1 : character.count,\n    //         idx: idx,\n    //       };\n    //     }\n    //   ),\n    // });\n  }\n\n  render() {\n    let { activeTheme } = this.state;\n\n    const setGlobalTheme = createGlobalStyle`\n      ${\n        activeTheme\n          ? CssUtils.CreateTheme(\n              activeTheme.primary,\n              activeTheme.secondary,\n              activeTheme.background,\n              activeTheme.foreground\n            )\n          : \"\"\n      }\n    `;\n\n    return (\n      <ThemePickerStyle className={`${ThemePickerClassName}`}>\n        PICKER\n      </ThemePickerStyle>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}