{"ast":null,"code":"import * as THREE from \"three\";\nimport { __DEBUG__ } from \"../../constants/site/Settings\";\nexport var ThreeCanvas = function ThreeCanvas(container, CanvasElement, CanvasTheme) {\n  __DEBUG__ && console.log(\"ðŸ¤™ Three.js Canvas received:\", CanvasElement);\n  var camera, scene, renderer, mesh, material, sketch;\n  init();\n  setupCanvasDrawing();\n  animate();\n\n  function init() {\n    camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 6000);\n    camera.position.z = 500;\n    sketch = container;\n    scene = new THREE.Scene();\n    material = new THREE.MeshBasicMaterial();\n    mesh = new THREE.Mesh(new THREE.BoxBufferGeometry(350, 350, 350), material);\n    scene.add(mesh);\n    renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    sketch.appendChild(renderer.domElement);\n    scene.background = new THREE.Color(0x000000);\n    window.addEventListener(\"resize\", onWindowResize, false);\n  } // Sets up the drawing canvas and adds it as the material map\n\n\n  function setupCanvasDrawing() {\n    // get canvas and context\n    // const drawingCanvas: HTMLCanvasElement = document.getElementById(\n    //   \"drawing-canvas\"\n    // ) as HTMLCanvasElement;\n    // const drawingContext = drawingCanvas.getContext(\"2d\");\n    // // draw white background\n    // drawingContext.fillStyle = \"blue\";\n    // drawingContext.fillRect(0, 0, 128, 128);\n    // // set canvas as material.map (this could be done to any map, bump, displacement etc.)\n    material.map = new THREE.CanvasTexture(CanvasElement); // // set the variable to keep track of when to draw\n    // let paint = false;\n    // // add canvas event listeners\n    // drawingCanvas.addEventListener(\"pointerdown\", function (e) {\n    //   paint = true;\n    //   drawStartPos.set(e.offsetX, e.offsetY);\n    // });\n    // drawingCanvas.addEventListener(\"pointermove\", function (e) {\n    //   if (paint) draw(drawingContext, e.offsetX, e.offsetY);\n    // });\n    // drawingCanvas.addEventListener(\"pointerup\", function () {\n    //   paint = false;\n    // });\n    // drawingCanvas.addEventListener(\"pointerleave\", function () {\n    //   paint = false;\n    // });\n  } // function draw(drawContext, x, y) {\n  //   drawContext.moveTo(drawStartPos.x, drawStartPos.y);\n  //   drawContext.strokeStyle = \"#000000\";\n  //   drawContext.lineTo(x, y);\n  //   drawContext.stroke();\n  //   // reset drawing start position to current position.\n  //   drawStartPos.set(x, y);\n  //   // need to flag the map as needing updating.\n  //   material.map.needsUpdate = true;\n  // }\n\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  function animate() {\n    requestAnimationFrame(animate);\n    mesh.rotation.x += 0.01;\n    mesh.rotation.y += 0.01;\n    material.map.needsUpdate = true;\n    renderer.render(scene, camera);\n  }\n};\n_c = ThreeCanvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreeCanvas\");","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/three/three-water-distort.canvas.ts"],"names":["THREE","__DEBUG__","ThreeCanvas","container","CanvasElement","CanvasTheme","console","log","camera","scene","renderer","mesh","material","sketch","init","setupCanvasDrawing","animate","PerspectiveCamera","window","innerWidth","innerHeight","position","z","Scene","MeshBasicMaterial","Mesh","BoxBufferGeometry","add","WebGLRenderer","antialias","alpha","setPixelRatio","devicePixelRatio","setSize","appendChild","domElement","background","Color","addEventListener","onWindowResize","map","CanvasTexture","aspect","updateProjectionMatrix","requestAnimationFrame","rotation","x","y","needsUpdate","render"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport { __DEBUG__ } from \"../../constants/site/Settings\";\nimport { LXLT_ColorTheme } from \"../../constants/styles/Color\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_ThreeCanvasDisplay = (\n  container: HTMLDivElement,\n  CanvasElement: HTMLCanvasElement,\n  CanvasTheme: LXLT_ColorTheme\n) => void;\n\nexport const ThreeCanvas: LXLT_ThreeCanvasDisplay = (\n  container,\n  CanvasElement,\n  CanvasTheme\n) => {\n  __DEBUG__ && console.log(\"ðŸ¤™ Three.js Canvas received:\", CanvasElement);\n\n  let camera, scene, renderer, mesh, material, sketch;\n\n  init();\n  setupCanvasDrawing();\n  animate();\n\n  function init() {\n    camera = new THREE.PerspectiveCamera(\n      50,\n      window.innerWidth / window.innerHeight,\n      1,\n      6000\n    );\n    camera.position.z = 500;\n\n    sketch = container;\n\n    scene = new THREE.Scene();\n\n    material = new THREE.MeshBasicMaterial();\n\n    mesh = new THREE.Mesh(new THREE.BoxBufferGeometry(350, 350, 350), material);\n    scene.add(mesh);\n\n    renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    sketch.appendChild(renderer.domElement);\n\n    scene.background = new THREE.Color(0x000000);\n\n    window.addEventListener(\"resize\", onWindowResize, false);\n  }\n\n  // Sets up the drawing canvas and adds it as the material map\n\n  function setupCanvasDrawing() {\n    // get canvas and context\n\n    // const drawingCanvas: HTMLCanvasElement = document.getElementById(\n    //   \"drawing-canvas\"\n    // ) as HTMLCanvasElement;\n    // const drawingContext = drawingCanvas.getContext(\"2d\");\n\n    // // draw white background\n\n    // drawingContext.fillStyle = \"blue\";\n    // drawingContext.fillRect(0, 0, 128, 128);\n\n    // // set canvas as material.map (this could be done to any map, bump, displacement etc.)\n\n    material.map = new THREE.CanvasTexture(CanvasElement);\n\n    // // set the variable to keep track of when to draw\n\n    // let paint = false;\n\n    // // add canvas event listeners\n    // drawingCanvas.addEventListener(\"pointerdown\", function (e) {\n    //   paint = true;\n    //   drawStartPos.set(e.offsetX, e.offsetY);\n    // });\n\n    // drawingCanvas.addEventListener(\"pointermove\", function (e) {\n    //   if (paint) draw(drawingContext, e.offsetX, e.offsetY);\n    // });\n\n    // drawingCanvas.addEventListener(\"pointerup\", function () {\n    //   paint = false;\n    // });\n\n    // drawingCanvas.addEventListener(\"pointerleave\", function () {\n    //   paint = false;\n    // });\n  }\n\n  // function draw(drawContext, x, y) {\n  //   drawContext.moveTo(drawStartPos.x, drawStartPos.y);\n  //   drawContext.strokeStyle = \"#000000\";\n  //   drawContext.lineTo(x, y);\n  //   drawContext.stroke();\n  //   // reset drawing start position to current position.\n  //   drawStartPos.set(x, y);\n  //   // need to flag the map as needing updating.\n  //   material.map.needsUpdate = true;\n  // }\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  function animate() {\n    requestAnimationFrame(animate);\n\n    mesh.rotation.x += 0.01;\n    mesh.rotation.y += 0.01;\n\n    material.map.needsUpdate = true;\n\n    renderer.render(scene, camera);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}