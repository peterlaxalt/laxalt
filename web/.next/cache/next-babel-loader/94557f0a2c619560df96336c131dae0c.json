{"ast":null,"code":"import _classCallCheck from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pflaxalt/Repositories/_pfl/web/utils/lazyImage.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// Core\nimport React from \"react\";\nimport LazyLoad from \"vanilla-lazyload\"; // Begin Component\n// __________________________________________________________________________________________\n\n/**\n *\n * LazyImage.tsx\n * @author Peter Laxalt\n * @description Lazy loaded image component.\n *\n */\nexport var LazyImage = /*#__PURE__*/function (_React$Component) {\n  _inherits(LazyImage, _React$Component);\n\n  var _super = _createSuper(LazyImage);\n\n  function LazyImage() {\n    _classCallCheck(this, LazyImage);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LazyImage, [{\n    key: \"componentDidMount\",\n    // Update lazyLoad after first rendering of every image\n    value: function componentDidMount() {\n      // @ts-ignore\n      if (!document.lazyLoadInstance) {\n        // @ts-ignore\n        document.lazyLoadInstance = new LazyLoad({\n          elements_selector: \".lazy\"\n        });\n      } // @ts-ignore\n\n\n      document.lazyLoadInstance.update();\n    } // Update lazyLoad after rerendering of every image\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      // @ts-ignore\n      document.lazyLoadInstance.update();\n    } // Just render the image with data-src\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      // @ts-ignore\n      var _this$props = this.props,\n          alt = _this$props.alt,\n          src = _this$props.src,\n          srcset = _this$props.srcset,\n          sizes = _this$props.sizes,\n          width = _this$props.width,\n          height = _this$props.height,\n          aspectRatio = _this$props.aspectRatio,\n          style = _this$props.style,\n          addClass = _this$props.addClass;\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: alt,\n        className: \"lazy \".concat(addClass ? addClass : \"\"),\n        \"data-src\": src,\n        \"data-srcset\": srcset,\n        \"data-sizes\": sizes,\n        width: width,\n        height: height,\n        style: style,\n        \"data-aspect-ratio\": aspectRatio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return LazyImage;\n}(React.Component);\nexport default LazyImage;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/utils/lazyImage.tsx"],"names":["React","LazyLoad","LazyImage","document","lazyLoadInstance","elements_selector","update","props","alt","src","srcset","sizes","width","height","aspectRatio","style","addClass","Component"],"mappings":";;;;;;;;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB,C,CAEA;AACA;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,WAAaC,SAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACE;AADF,wCAEsB;AAClB;AACA,UAAI,CAACC,QAAQ,CAACC,gBAAd,EAAgC;AAC9B;AACAD,QAAAA,QAAQ,CAACC,gBAAT,GAA4B,IAAIH,QAAJ,CAAa;AACvCI,UAAAA,iBAAiB,EAAE;AADoB,SAAb,CAA5B;AAGD,OAPiB,CASlB;;;AACAF,MAAAA,QAAQ,CAACC,gBAAT,CAA0BE,MAA1B;AACD,KAbH,CAeE;;AAfF;AAAA;AAAA,yCAgBuB;AACnB;AACAH,MAAAA,QAAQ,CAACC,gBAAT,CAA0BE,MAA1B;AACD,KAnBH,CAqBE;;AArBF;AAAA;AAAA,6BAsBW;AACP;AADO,wBAYH,KAAKC,KAZF;AAAA,UAGLC,GAHK,eAGLA,GAHK;AAAA,UAILC,GAJK,eAILA,GAJK;AAAA,UAKLC,MALK,eAKLA,MALK;AAAA,UAMLC,KANK,eAMLA,KANK;AAAA,UAOLC,KAPK,eAOLA,KAPK;AAAA,UAQLC,MARK,eAQLA,MARK;AAAA,UASLC,WATK,eASLA,WATK;AAAA,UAULC,KAVK,eAULA,KAVK;AAAA,UAWLC,QAXK,eAWLA,QAXK;AAcP,0BACE;AACE,QAAA,GAAG,EAAER,GADP;AAEE,QAAA,SAAS,iBAAUQ,QAAQ,GAAGA,QAAH,GAAc,EAAhC,CAFX;AAGE,oBAAUP,GAHZ;AAIE,uBAAaC,MAJf;AAKE,sBAAYC,KALd;AAME,QAAA,KAAK,EAAEC,KANT;AAOE,QAAA,MAAM,EAAEC,MAPV;AAQE,QAAA,KAAK,EAAEE,KART;AASE,6BAAmBD;AATrB;AAAA;AAAA;AAAA;AAAA,cADF;AAaD;AAjDH;;AAAA;AAAA,EAA+Bd,KAAK,CAACiB,SAArC;AAoDA,eAAef,SAAf","sourcesContent":["// Core\nimport React from \"react\";\nimport LazyLoad from \"vanilla-lazyload\";\n\n// Begin Component\n// __________________________________________________________________________________________\n\ntype Props = {\n  alt?: string;\n  src?: string;\n  srcset?: string;\n  sizes?: string;\n  width?: string;\n  height?: string;\n  style?: object;\n  title?: string;\n  addClass?: string;\n  aspectRatio?: string;\n};\n\n/**\n *\n * LazyImage.tsx\n * @author Peter Laxalt\n * @description Lazy loaded image component.\n *\n */\n\nexport class LazyImage extends React.Component<Props, any> {\n  // Update lazyLoad after first rendering of every image\n  componentDidMount() {\n    // @ts-ignore\n    if (!document.lazyLoadInstance) {\n      // @ts-ignore\n      document.lazyLoadInstance = new LazyLoad({\n        elements_selector: \".lazy\",\n      });\n    }\n\n    // @ts-ignore\n    document.lazyLoadInstance.update();\n  }\n\n  // Update lazyLoad after rerendering of every image\n  componentDidUpdate() {\n    // @ts-ignore\n    document.lazyLoadInstance.update();\n  }\n\n  // Just render the image with data-src\n  render() {\n    // @ts-ignore\n    const {\n      alt,\n      src,\n      srcset,\n      sizes,\n      width,\n      height,\n      aspectRatio,\n      style,\n      addClass,\n    } = this.props;\n\n    return (\n      <img\n        alt={alt}\n        className={`lazy ${addClass ? addClass : \"\"}`}\n        data-src={src}\n        data-srcset={srcset}\n        data-sizes={sizes}\n        width={width}\n        height={height}\n        style={style}\n        data-aspect-ratio={aspectRatio}\n      />\n    );\n  }\n}\n\nexport default LazyImage;\n"]},"metadata":{},"sourceType":"module"}