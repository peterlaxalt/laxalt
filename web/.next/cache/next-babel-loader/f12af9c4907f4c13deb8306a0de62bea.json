{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\nimport { Theme } from \"../../constants/Theme\"; // Begin Component\n// __________________________________________________________________________\n\nvar DharmaCanvasDisplay = function DharmaCanvasDisplay(W, H, ID, BG) {\n  return function (p) {\n    // _________________________________________________\n    // Config\n    // ____________________________\n    // Fonts\n    var dharmaFont; // ____________________________\n    // Typography\n\n    var text = \"LAXALT\";\n    var splitCharacterArray = text.split(\"\");\n    var characters = splitCharacterArray.map(function (character, idx) {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n        isIncrementing: true,\n        isDecrementing: false\n      };\n    });\n    var characterCount = splitCharacterArray.length;\n    var characterWidth = W / characterCount;\n    var characterSize = H * 1.25;\n    console.log(characterSize, \"characterSize\"); // ____________________________\n    // Counts\n    // let renderCount: number = 0;\n\n    var previousTime = 0; // ____________________________\n    // Strokes\n\n    var strokeWidth = 4;\n    var strokeOffset = strokeWidth * 3; // ____________________________\n    // Incrementing\n\n    var maxCopies = 10;\n    var minCopies = 1; // ____________________________\n    // Translation\n    // let previousVerticalTranslation: number = H / 2.25;\n\n    var verticalTranslationWhitespaceCompensation = 2.25;\n\n    var previousHorizontalTranslation = function previousHorizontalTranslation(idx) {\n      return characterWidth * idx + characterWidth / 2 + strokeOffset;\n    }; // const previousHorizontalTranslation = (idx: number) =>\n    //   characterWidth * idx + characterWidth / 2 + strokeOffset * renderCount;\n    // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n    // let characterVerticalTranslation: number = 0.993; // Multiplied by the viewBoxHeight\n    // let characterHorizontalScale: number = 0.75; // Multiplied by the characterWidth\n    // let characterVerticalScale: number = 1.38; // Multiplied by the characterWidth\n    // _________________________________________________\n    // Preload\n\n\n    p.preload = function () {\n      dharmaFont = p.loadFont(\"/fonts/dharma/dharma_regular.ttf\");\n    }; // _________________________________________________\n    // Setup\n\n\n    p.setup = function () {\n      // Our Canvas\n      p.createCanvas(W, H);\n    }; // _________________________________________________\n    // Draw\n\n\n    p.draw = function () {\n      p.background(BG);\n      p.textFont(dharmaFont);\n      p.textSize(characterSize);\n      p.textAlign(p.CENTER, p.CENTER);\n      p.fill(\"\".concat(Theme.Color.Galaxy));\n      p.strokeWeight(strokeWidth);\n      p.stroke(BG);\n\n      if (H && W) {\n        characters.map(function (_char, idx) {\n          p.scale(1, 1);\n          var randomPick = Math.random() <= 0.5;\n\n          if (randomPick && previousTime - p.millis() > 6000) {\n            if (_char.count < maxCopies && _char.isIncrementing) {\n              characters[idx] = _objectSpread({}, _char, {\n                count: _char.count + 1\n              });\n              previousTime = p.millis();\n            } else if (_char.count === maxCopies) {\n              characters[idx] = _objectSpread({}, _char, {\n                count: _char.count - 1,\n                isIncrementing: false,\n                isDecrementing: true\n              });\n              previousTime = p.millis();\n            } else if (_char.count > minCopies && _char.isDecrementing) {\n              characters[idx] = _objectSpread({}, _char, {\n                count: _char.count - 1,\n                isDecrementing: true\n              });\n              previousTime = p.millis();\n            } else if (_char.count === minCopies && _char.isDecrementing) {\n              characters[idx] = _objectSpread({}, _char, {\n                count: _char.count + 1,\n                isIncrementing: true,\n                isDecrementing: false\n              });\n              previousTime = p.millis();\n            }\n          }\n\n          var countArray = _Array$from(Array(_char.count).keys());\n\n          countArray = countArray.map(function (countNumber) {\n            return countNumber + 1;\n          });\n          countArray.map(function (countNumber, idxx) {\n            var verticalScale = 1 / _char.count;\n            var verticalSkewDivisible = 2.75;\n            var characterSkewDivisible = 1.3;\n            var duplicateVerticalPosition = _char.count == 1 ? H / verticalTranslationWhitespaceCompensation : characterSize / verticalSkewDivisible + characterSize / characterSkewDivisible * idxx;\n            p.push();\n            p.scale(1, verticalScale);\n            p.text(_char.letter, previousHorizontalTranslation(idx), duplicateVerticalPosition);\n            p.pop();\n          });\n        });\n      }\n    };\n\n    p.windowResized = function () {\n      p.resizeCanvas(W, H);\n    };\n  };\n};\n\nexport default DharmaCanvasDisplay;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/dharma.tsx"],"names":["Theme","DharmaCanvasDisplay","W","H","ID","BG","p","dharmaFont","text","splitCharacterArray","split","characters","map","character","idx","letter","count","isIncrementing","isDecrementing","characterCount","length","characterWidth","characterSize","console","log","previousTime","strokeWidth","strokeOffset","maxCopies","minCopies","verticalTranslationWhitespaceCompensation","previousHorizontalTranslation","preload","loadFont","setup","createCanvas","draw","background","textFont","textSize","textAlign","CENTER","fill","Color","Galaxy","strokeWeight","stroke","char","scale","randomPick","Math","random","millis","countArray","Array","keys","countNumber","idxx","verticalScale","verticalSkewDivisible","characterSkewDivisible","duplicateVerticalPosition","push","pop","windowResized","resizeCanvas"],"mappings":"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","sourcesContent":["/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n\nimport p5, { Font } from \"p5\";\nimport { Theme } from \"../../constants/Theme\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_DharmaCanvas = {\n  W: number;\n  H: number;\n  ID: number;\n  BG: string;\n};\n\nexport type LXLT_DharmaCanvasDisplay = (\n  W: number,\n  H: number,\n  ID: number,\n  BG: string\n) => (p: p5) => void;\n\ntype LXLT_DharmaCanvasChar = {\n  letter: string;\n  count: number;\n  idx: number;\n  isIncrementing: boolean;\n  isDecrementing: boolean;\n};\n\nconst DharmaCanvasDisplay: LXLT_DharmaCanvasDisplay = (W, H, ID, BG) => (\n  p: p5\n) => {\n  // _________________________________________________\n  // Config\n\n  // ____________________________\n  // Fonts\n  let dharmaFont: Font;\n\n  // ____________________________\n  // Typography\n  let text = \"LAXALT\";\n\n  let splitCharacterArray = text.split(\"\");\n  let characters: LXLT_DharmaCanvasChar[] = splitCharacterArray.map(\n    (character: string, idx: number) => {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n        isIncrementing: true,\n        isDecrementing: false,\n      };\n    }\n  );\n\n  let characterCount: number = splitCharacterArray.length;\n  let characterWidth: number = W / characterCount;\n  let characterSize: number = H * 1.25;\n\n  console.log(characterSize, \"characterSize\");\n\n  // ____________________________\n  // Counts\n  // let renderCount: number = 0;\n  let previousTime: number = 0;\n\n  // ____________________________\n  // Strokes\n  let strokeWidth: number = 4;\n  let strokeOffset: number = strokeWidth * 3;\n\n  // ____________________________\n  // Incrementing\n  let maxCopies = 10;\n  let minCopies = 1;\n\n  // ____________________________\n  // Translation\n  // let previousVerticalTranslation: number = H / 2.25;\n\n  let verticalTranslationWhitespaceCompensation: number = 2.25;\n  const previousHorizontalTranslation = (idx: number) =>\n    characterWidth * idx + characterWidth / 2 + strokeOffset;\n\n  // const previousHorizontalTranslation = (idx: number) =>\n  //   characterWidth * idx + characterWidth / 2 + strokeOffset * renderCount;\n\n  // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n  // let characterVerticalTranslation: number = 0.993; // Multiplied by the viewBoxHeight\n  // let characterHorizontalScale: number = 0.75; // Multiplied by the characterWidth\n  // let characterVerticalScale: number = 1.38; // Multiplied by the characterWidth\n\n  // _________________________________________________\n  // Preload\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  };\n\n  // _________________________________________________\n  // Setup\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H);\n  };\n\n  // _________________________________________________\n  // Draw\n  p.draw = () => {\n    p.background(BG);\n\n    p.textFont(dharmaFont);\n\n    p.textSize(characterSize);\n\n    p.textAlign(p.CENTER, p.CENTER);\n\n    p.fill(`${Theme.Color.Galaxy}`);\n    p.strokeWeight(strokeWidth);\n    p.stroke(BG);\n\n    if (H && W) {\n      characters.map((char: LXLT_DharmaCanvasChar, idx: number) => {\n        p.scale(1, 1);\n\n        let randomPick = Math.random() <= 0.5;\n\n        if (randomPick && (previousTime - p.millis() > 6000)) {\n          if (char.count < maxCopies && char.isIncrementing) {\n            characters[idx] = {\n              ...char,\n              count: char.count + 1,\n            };\n\n            previousTime = p.millis();\n          } else if (char.count === maxCopies) {\n            characters[idx] = {\n              ...char,\n              count: char.count - 1,\n              isIncrementing: false,\n              isDecrementing: true,\n            };\n\n            previousTime = p.millis();\n          } else if (char.count > minCopies && char.isDecrementing) {\n            characters[idx] = {\n              ...char,\n              count: char.count - 1,\n              isDecrementing: true,\n            };\n\n            previousTime = p.millis();\n          } else if (char.count === minCopies && char.isDecrementing) {\n            characters[idx] = {\n              ...char,\n              count: char.count + 1,\n              isIncrementing: true,\n              isDecrementing: false,\n            };\n\n            previousTime = p.millis();\n          }\n        }\n\n        let countArray: number[] = Array.from(Array(char.count).keys());\n\n        countArray = countArray.map((countNumber: number) => {\n          return countNumber + 1;\n        });\n\n        countArray.map((countNumber: number, idxx: number) => {\n          let verticalScale = 1 / char.count;\n\n          let verticalSkewDivisible: number = 2.75;\n          let characterSkewDivisible: number = 1.3;\n\n          let duplicateVerticalPosition: number =\n            char.count == 1\n              ? H / verticalTranslationWhitespaceCompensation\n              : characterSize / verticalSkewDivisible +\n                (characterSize / characterSkewDivisible) * idxx;\n\n          p.push();\n          p.scale(1, verticalScale);\n          p.text(\n            char.letter,\n            previousHorizontalTranslation(idx),\n            duplicateVerticalPosition\n          );\n          p.pop();\n        });\n      });\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;\n"]},"metadata":{},"sourceType":"module"}