{"ast":null,"code":"var _jsxFileName = \"/Users/pflaxalt/Repositories/_pfl/web/components/ThemePicker/ThemePicker.tsx\";\nvar __jsx = React.createElement;\n// Core\nimport React from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { CssUtils } from \"../../constants/styles/CssUtils\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemePickerClassName, ThemePickerStyle } from \"./styles.scss\"; // Begin Types\n// __________________________________________________________________________________________\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemePicker\n * @author Peter Laxalt\n *\n */\nexport class ThemePicker extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTheme: {\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Text\n      },\n      availableThemes: [{\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Seconndary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Foreground\n      }, {\n        name: \"goldenrod\",\n        primary: \"#393349\",\n        secondary: \"#393349\",\n        background: \"goldenrod\",\n        foreground: \"#393349\"\n      }, {\n        name: \"cadetblue\",\n        primary: \"cornsilk\",\n        secondary: \"cornsilk\",\n        background: \"cadetblue\",\n        foreground: \"cornsilk\"\n      }, {\n        name: \"orangered\",\n        primary: \"cornsilk\",\n        secondary: \"cornsilk\",\n        background: \"orangered\",\n        foreground: \"cornsilk\"\n      }, {\n        name: \"white\",\n        primary: \"black\",\n        secondary: \"black\",\n        background: \"white\",\n        foreground: \"black\"\n      }, {\n        name: \"galaxy\",\n        primary: \"cornsilk\",\n        secondary: \"cornsilk\",\n        background: Theme.Color.Galaxy,\n        foreground: \"cornsilk\"\n      }]\n    };\n    this.setNewTheme = this.setNewTheme.bind(this);\n  }\n\n  setNewTheme(theme) {\n    this.setState({\n      activeTheme: theme\n    });\n  }\n\n  render() {\n    let {\n      activeTheme,\n      availableThemes\n    } = this.state;\n    const SetGlobalTheme = createGlobalStyle`\n      ${activeTheme ? CssUtils.CreateTheme(activeTheme.primary, activeTheme.secondary, activeTheme.background, activeTheme.foreground) : \"\"}\n    `;\n    return __jsx(React.Fragment, null, activeTheme && activeTheme.name !== \"default\" ? __jsx(SetGlobalTheme, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }) : null, __jsx(ThemePickerStyle, {\n      className: `${ThemePickerClassName}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, availableThemes ? availableThemes.map((themeItem, idx) => {\n      return __jsx(\"div\", {\n        className: `${ThemePickerClassName}__option ${ThemePickerClassName}__option--${themeItem.name === activeTheme.name ? 'active' : 'inactive'}`,\n        style: {\n          backgroundColor: themeItem.background\n        },\n        onClick: () => this.setNewTheme(themeItem),\n        key: idx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      });\n    }) : null));\n  }\n\n}","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/components/ThemePicker/ThemePicker.tsx"],"names":["React","createGlobalStyle","CssUtils","Theme","ThemePickerClassName","ThemePickerStyle","ThemePicker","PureComponent","constructor","props","state","activeTheme","name","primary","Color","Primary","secondary","Secondary","background","Background","foreground","Text","availableThemes","Seconndary","Foreground","Galaxy","setNewTheme","bind","theme","setState","render","SetGlobalTheme","CreateTheme","map","themeItem","idx","backgroundColor"],"mappings":"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","sourcesContent":["// Core\nimport React from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { CssUtils } from \"../../constants/styles/CssUtils\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemePickerClassName, ThemePickerStyle } from \"./styles.scss\";\n\n// Begin Types\n// __________________________________________________________________________________________\n\ntype LXLT_ThemePicker = {};\n\ntype LXLT_Theme = {\n  name: \"default\" | \"white\" | \"goldenrod\" | \"cadetblue\" | \"orangered\" | \"galaxy\";\n  primary: string;\n  secondary: string;\n  background: string;\n  foreground: string;\n};\n\ntype LXLT_ThemePickerState = {\n  availableThemes: LXLT_Theme[];\n  activeTheme?: LXLT_Theme;\n};\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemePicker\n * @author Peter Laxalt\n *\n */\nexport class ThemePicker extends React.PureComponent<\n  LXLT_ThemePicker,\n  LXLT_ThemePickerState\n> {\n  constructor(props: LXLT_ThemePicker) {\n    super(props);\n\n    this.state = {\n      activeTheme: {\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Text,\n      },\n      availableThemes: [\n        {\n          name: \"default\",\n          primary: Theme.Color.Primary,\n          secondary: Theme.Color.Seconndary,\n          background: Theme.Color.Background,\n          foreground: Theme.Color.Foreground,\n        },\n        {\n          name: \"goldenrod\",\n          primary: \"#393349\",\n          secondary: \"#393349\",\n          background: \"goldenrod\",\n          foreground: \"#393349\",\n        },\n        {\n          name: \"cadetblue\",\n          primary: \"cornsilk\",\n          secondary: \"cornsilk\",\n          background: \"cadetblue\",\n          foreground: \"cornsilk\",\n        },\n        {\n          name: \"orangered\",\n          primary: \"cornsilk\",\n          secondary: \"cornsilk\",\n          background: \"orangered\",\n          foreground: \"cornsilk\",\n        },\n        {\n          name: \"white\",\n          primary: \"black\",\n          secondary: \"black\",\n          background: \"white\",\n          foreground: \"black\",\n        },\n        {\n          name: \"galaxy\",\n          primary: \"cornsilk\",\n          secondary: \"cornsilk\",\n          background: Theme.Color.Galaxy,\n          foreground: \"cornsilk\",\n        },\n      ],\n    };\n\n    this.setNewTheme = this.setNewTheme.bind(this);\n  }\n\n  setNewTheme(theme: LXLT_Theme) {\n    this.setState({\n      activeTheme: theme,\n    });\n  }\n\n  render() {\n    let { activeTheme, availableThemes } = this.state;\n\n    const SetGlobalTheme = createGlobalStyle`\n      ${\n        activeTheme\n          ? CssUtils.CreateTheme(\n              activeTheme.primary,\n              activeTheme.secondary,\n              activeTheme.background,\n              activeTheme.foreground\n            )\n          : \"\"\n      }\n    `;\n\n    return (\n      <>\n        {activeTheme && activeTheme.name !== \"default\" ? (\n          <SetGlobalTheme />\n        ) : null}\n        <ThemePickerStyle className={`${ThemePickerClassName}`}>\n          {availableThemes\n            ? availableThemes.map((themeItem: LXLT_Theme, idx: number) => {\n                return (\n                  <div\n                    className={`${ThemePickerClassName}__option ${ThemePickerClassName}__option--${themeItem.name === activeTheme.name ? 'active' : 'inactive'}`}\n                    style={{ backgroundColor: themeItem.background }}\n                    onClick={() => this.setNewTheme(themeItem)}\n                    key={idx}\n                  />\n                );\n              })\n            : null}\n        </ThemePickerStyle>\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}