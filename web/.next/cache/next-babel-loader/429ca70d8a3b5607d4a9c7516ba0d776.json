{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nvar _jsxFileName = \"/Users/pflaxalt/Repositories/_pfl/web/components/_interactive/DharmaCounter/DharmaCounter.tsx\";\nvar __jsx = React.createElement;\n// Core\nimport React from \"react\";\nimport { DharmaTypeClassName, DharmaTypeStyle } from \"../../_svg/DharmaType/styles.scss\"; // Begin Types\n// __________________________________________________________________________________________\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name DharmaCounter\n * @author Peter Laxalt\n *\n */\nexport class DharmaCounter extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"\",\n      characters: [],\n      viewBoxHeight: 0,\n      viewBoxWidth: 0,\n      characterWidth: 0,\n      characterVerticalTranslation: 0,\n      characterHorizontalScale: 0,\n      characterVerticalScale: 0,\n      isInitialized: false\n    };\n    this.incrementLetterCount = this.incrementLetterCount.bind(this);\n    this.decrementLetterCount = this.decrementLetterCount.bind(this);\n    this.resetLetterCount = this.resetLetterCount.bind(this);\n    this.updateLetterCount = this.updateLetterCount.bind(this);\n    this.letterCountTimer = this.letterCountTimer.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.text) {\n      // ____________________________________________\n      // Get text / create array\n      let {\n        text\n      } = this.props;\n      let splitCharacterArray = text.split(\"\");\n      let characterArray = splitCharacterArray.map((character, idx) => {\n        return {\n          letter: character,\n          count: 1,\n          idx: idx,\n          copies: []\n        };\n      }); // ____________________________________________\n      // USE THESE TO TWEAK YOUR CHARACTERS TO FIT\n\n      let viewBoxHeight = 100;\n      let viewBoxWidth = 100;\n      let characterCount = splitCharacterArray.length;\n      let characterWidth = viewBoxWidth / characterCount;\n      let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n\n      let characterHorizontalScale = 0.75; // Multiplied by the characterWidth\n\n      let characterVerticalScale = 1.38; // Multiplied by the characterWidth\n\n      this.setState({\n        text: text,\n        characters: characterArray,\n        viewBoxHeight: viewBoxHeight,\n        viewBoxWidth: viewBoxWidth,\n        characterWidth: characterWidth,\n        characterHorizontalScale: characterHorizontalScale,\n        characterVerticalScale: characterVerticalScale,\n        characterVerticalTranslation: characterVerticalTranslation,\n        isInitialized: true\n      });\n      this.letterCountTimer();\n    }\n  }\n\n  incrementLetterCount(id) {\n    this.setState({\n      characters: this.state.characters.map((character, idx) => {\n        return {\n          letter: character.letter,\n          count: id == character.idx ? character.count + 1 : character.count,\n          idx: idx,\n          copies: []\n        };\n      })\n    });\n    return;\n  }\n\n  decrementLetterCount(id) {\n    this.setState({\n      characters: this.state.characters.map((character, idx) => {\n        return {\n          letter: character.letter,\n          count: id == character.idx ? character.count - 1 : character.count,\n          idx: idx,\n          copies: []\n        };\n      })\n    });\n    return;\n  }\n\n  resetLetterCount(id) {\n    this.setState({\n      characters: this.state.characters.map((character, idx) => {\n        return {\n          letter: character.letter,\n          count: id == character.idx ? 1 : character.count,\n          idx: idx,\n          copies: []\n        };\n      })\n    });\n    return;\n  }\n\n  updateLetterCount(id) {\n    if (this.state.characters && this.state.characters.length > 0) {\n      let matchedCharacter = this.state.characters.filter(character => character.idx == id)[0];\n      let maxCount = 4;\n\n      if (matchedCharacter) {\n        if (matchedCharacter.count === maxCount) {\n          this.resetLetterCount(id);\n        } else {\n          this.incrementLetterCount(id);\n        }\n      } else {\n        return;\n      }\n    } else {\n      return;\n    }\n\n    return;\n  }\n\n  letterCountTimer() {\n    function generateRandomInteger(min, max) {\n      return Math.floor(min + Math.random() * (max + 1 - min));\n    }\n\n    window.setInterval(() => this.updateLetterCount(generateRandomInteger(0, this.state.characters.length)), 3000);\n  }\n\n  render() {\n    let {\n      viewBoxHeight,\n      viewBoxWidth,\n      characters,\n      characterWidth,\n      characterHorizontalScale,\n      characterVerticalScale,\n      characterVerticalTranslation\n    } = this.state; // console.table(\"DharmaCounter state:\", this.state.characters);\n\n    return __jsx(DharmaTypeStyle, {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      viewBox: `0 0 ${viewBoxWidth} ${viewBoxHeight}`,\n      preserveAspectRatio: \"none\",\n      className: `${DharmaTypeClassName} ${DharmaTypeClassName}--couter`,\n      style: {\n        [`--${DharmaTypeClassName}-font-size`]: `${viewBoxHeight}px`\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, __jsx(\"filter\", {\n      id: `displacementFilter`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, __jsx(\"feTurbulence\", {\n      type: \"turbulence\",\n      baseFrequency: 0.05,\n      numOctaves: 1,\n      result: \"turbulence\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }), __jsx(\"feDisplacementMap\", {\n      in2: \"turbulence\",\n      in: \"SourceGraphic\",\n      scale: 3,\n      xChannelSelector: \"R\",\n      yChannelSelector: \"G\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    })), __jsx(\"g\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, characters.map((char, idx) => {\n      let countArray = _Array$from(Array(char.count).keys());\n\n      return countArray.map((duplicate, idxx) => {\n        let adjustedDuplicate = char.count > 1 ? char.count : duplicate + 1;\n        let adjustedVerticalTranslation = viewBoxHeight / adjustedDuplicate * (idxx + 1) * characterVerticalTranslation;\n        let adjustedVerticalScale = characterVerticalScale / adjustedDuplicate;\n        return __jsx(\"g\", {\n          className: `${DharmaTypeClassName}__character-wrapper`,\n          \"data-char-id\": idx,\n          \"data-char-count\": duplicate,\n          key: idxx,\n          onClick: () => this.updateLetterCount(idx),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275\n          },\n          __self: this\n        }, __jsx(\"filter\", {\n          id: `displacementFilter__${idx}__${idxx}`,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 282\n          },\n          __self: this\n        }, __jsx(\"feTurbulence\", {\n          type: \"turbulence\",\n          baseFrequency: 0.6 * (idxx * 0.05),\n          numOctaves: 1 * (idxx + 20),\n          result: \"turbulence\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 283\n          },\n          __self: this\n        }), __jsx(\"feDisplacementMap\", {\n          in2: \"turbulence\",\n          in: \"SourceGraphic\",\n          scale: 3 - idxx * 0.5,\n          xChannelSelector: \"R\",\n          yChannelSelector: \"G\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 289\n          },\n          __self: this\n        }), __jsx(\"feFlood\", {\n          \"flood-color\": \"#32DFEC\",\n          \"flood-opacity\": \"1\",\n          result: \"PINK\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 298\n          },\n          __self: this\n        }), __jsx(\"feMorphology\", {\n          in: \"SourceAlpha\",\n          result: \"DILATED\",\n          operator: \"dilate\",\n          radius: \".25\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 303\n          },\n          __self: this\n        }), __jsx(\"feComposite\", {\n          in: \"PINK\",\n          in2: \"DILATED\",\n          operator: \"in\",\n          result: \"OUTLINE\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 309\n          },\n          __self: this\n        }), __jsx(\"feMerge\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 316\n          },\n          __self: this\n        }, __jsx(\"feMergeNode\", {\n          in: \"OUTLINE\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 317\n          },\n          __self: this\n        }), __jsx(\"feMergeNode\", {\n          in: \"SourceGraphic\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 318\n          },\n          __self: this\n        }))), __jsx(\"text\", {\n          className: `${DharmaTypeClassName}__character`,\n          transform: `translate(${characterWidth * idx} ${adjustedVerticalTranslation}) scale(${characterHorizontalScale}, ${adjustedVerticalScale})`,\n          style: {\n            [`--${DharmaTypeClassName}-key`]: idx,\n            filter: `url(#displacementFilter__${idx}__${idxx})`\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 322\n          },\n          __self: this\n        }, __jsx(\"tspan\", {\n          className: `${DharmaTypeClassName}__letter`,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 332\n          },\n          __self: this\n        }, char.letter)));\n      });\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/components/_interactive/DharmaCounter/DharmaCounter.tsx"],"names":["React","DharmaTypeClassName","DharmaTypeStyle","DharmaCounter","PureComponent","constructor","props","state","text","characters","viewBoxHeight","viewBoxWidth","characterWidth","characterVerticalTranslation","characterHorizontalScale","characterVerticalScale","isInitialized","incrementLetterCount","bind","decrementLetterCount","resetLetterCount","updateLetterCount","letterCountTimer","componentDidMount","splitCharacterArray","split","characterArray","map","character","idx","letter","count","copies","characterCount","length","setState","id","matchedCharacter","filter","maxCount","generateRandomInteger","min","max","Math","floor","random","window","setInterval","render","char","countArray","Array","keys","duplicate","idxx","adjustedDuplicate","adjustedVerticalTranslation","adjustedVerticalScale"],"mappings":"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","sourcesContent":["// Core\nimport React from \"react\";\nimport {\n  DharmaTypeClassName,\n  DharmaTypeStyle,\n} from \"../../_svg/DharmaType/styles.scss\";\n\n// Begin Types\n// __________________________________________________________________________________________\n\ntype LXLT_DharmaCounter = {\n  text: string;\n};\n\ntype LXLT_DharmaCounterState = {\n  text: string;\n  characters: LXLT_DharmaChar[];\n\n  viewBoxHeight: number;\n  viewBoxWidth: number;\n\n  characterVerticalTranslation: number;\n  characterHorizontalScale: number;\n  characterVerticalScale: number;\n\n  characterWidth: number;\n\n  isInitialized: boolean;\n};\n\ntype LXLT_DharmaChar = {\n  letter: string;\n  count: number;\n  idx: number;\n  copies: {\n    id: number;\n    count: number;\n  }[];\n};\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name DharmaCounter\n * @author Peter Laxalt\n *\n */\nexport class DharmaCounter extends React.PureComponent<\n  LXLT_DharmaCounter,\n  LXLT_DharmaCounterState\n> {\n  constructor(props: LXLT_DharmaCounter) {\n    super(props);\n\n    this.state = {\n      text: \"\",\n      characters: [],\n\n      viewBoxHeight: 0,\n      viewBoxWidth: 0,\n      characterWidth: 0,\n\n      characterVerticalTranslation: 0,\n      characterHorizontalScale: 0,\n      characterVerticalScale: 0,\n\n      isInitialized: false,\n    };\n\n    this.incrementLetterCount = this.incrementLetterCount.bind(this);\n    this.decrementLetterCount = this.decrementLetterCount.bind(this);\n    this.resetLetterCount = this.resetLetterCount.bind(this);\n    this.updateLetterCount = this.updateLetterCount.bind(this);\n\n    this.letterCountTimer = this.letterCountTimer.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.text) {\n      // ____________________________________________\n      // Get text / create array\n      let { text } = this.props;\n\n      let splitCharacterArray = text.split(\"\");\n      let characterArray: LXLT_DharmaChar[] = splitCharacterArray.map(\n        (character: string, idx: number) => {\n          return {\n            letter: character,\n            count: 1,\n            idx: idx,\n            copies: [],\n          };\n        }\n      );\n\n      // ____________________________________________\n      // USE THESE TO TWEAK YOUR CHARACTERS TO FIT\n      let viewBoxHeight = 100;\n      let viewBoxWidth = 100;\n\n      let characterCount = splitCharacterArray.length;\n      let characterWidth = viewBoxWidth / characterCount;\n\n      let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n      let characterHorizontalScale = 0.75; // Multiplied by the characterWidth\n      let characterVerticalScale = 1.38; // Multiplied by the characterWidth\n\n      this.setState({\n        text: text,\n        characters: characterArray,\n\n        viewBoxHeight: viewBoxHeight,\n        viewBoxWidth: viewBoxWidth,\n\n        characterWidth: characterWidth,\n\n        characterHorizontalScale: characterHorizontalScale,\n        characterVerticalScale: characterVerticalScale,\n        characterVerticalTranslation: characterVerticalTranslation,\n\n        isInitialized: true,\n      });\n\n      this.letterCountTimer();\n    }\n  }\n\n  incrementLetterCount(id: number) {\n    this.setState({\n      characters: this.state.characters.map(\n        (character: LXLT_DharmaChar, idx: number) => {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? character.count + 1 : character.count,\n            idx: idx,\n            copies: [],\n          };\n        }\n      ),\n    });\n\n    return;\n  }\n\n  decrementLetterCount(id: number) {\n    this.setState({\n      characters: this.state.characters.map(\n        (character: LXLT_DharmaChar, idx: number) => {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? character.count - 1 : character.count,\n            idx: idx,\n            copies: [],\n          };\n        }\n      ),\n    });\n\n    return;\n  }\n\n  resetLetterCount(id: number) {\n    this.setState({\n      characters: this.state.characters.map(\n        (character: LXLT_DharmaChar, idx: number) => {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? 1 : character.count,\n            idx: idx,\n            copies: [],\n          };\n        }\n      ),\n    });\n\n    return;\n  }\n\n  updateLetterCount(id: number) {\n    if (this.state.characters && this.state.characters.length > 0) {\n      let matchedCharacter: LXLT_DharmaChar = this.state.characters.filter(\n        (character: LXLT_DharmaChar) => character.idx == id\n      )[0];\n\n      let maxCount = 4;\n\n      if (matchedCharacter) {\n        if (matchedCharacter.count === maxCount) {\n          this.resetLetterCount(id);\n        } else {\n          this.incrementLetterCount(id);\n        }\n      } else {\n        return;\n      }\n    } else {\n      return;\n    }\n\n    return;\n  }\n\n  letterCountTimer() {\n    function generateRandomInteger(min, max) {\n      return Math.floor(min + Math.random() * (max + 1 - min));\n    }\n\n    window.setInterval(\n      () =>\n        this.updateLetterCount(\n          generateRandomInteger(0, this.state.characters.length)\n        ),\n      3000\n    );\n  }\n\n  render() {\n    let {\n      viewBoxHeight,\n      viewBoxWidth,\n      characters,\n      characterWidth,\n\n      characterHorizontalScale,\n      characterVerticalScale,\n      characterVerticalTranslation,\n    } = this.state;\n\n    // console.table(\"DharmaCounter state:\", this.state.characters);\n\n    return (\n      <DharmaTypeStyle\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox={`0 0 ${viewBoxWidth} ${viewBoxHeight}`}\n        preserveAspectRatio=\"none\"\n        className={`${DharmaTypeClassName} ${DharmaTypeClassName}--couter`}\n        style={{\n          [`--${DharmaTypeClassName}-font-size` as any]: `${viewBoxHeight}px`,\n        }}\n      >\n        <filter id={`displacementFilter`}>\n          <feTurbulence\n            type=\"turbulence\"\n            baseFrequency={0.05}\n            numOctaves={1}\n            result=\"turbulence\"\n          />\n          <feDisplacementMap\n            in2=\"turbulence\"\n            in=\"SourceGraphic\"\n            scale={3}\n            xChannelSelector=\"R\"\n            yChannelSelector=\"G\"\n          />\n        </filter>\n\n        <g>\n          {characters.map((char: LXLT_DharmaChar, idx: number) => {\n            let countArray = Array.from(Array(char.count).keys());\n\n            return countArray.map((duplicate: number, idxx: number) => {\n              let adjustedDuplicate =\n                char.count > 1 ? char.count : duplicate + 1;\n\n              let adjustedVerticalTranslation =\n                (viewBoxHeight / adjustedDuplicate) *\n                (idxx + 1) *\n                characterVerticalTranslation;\n\n              let adjustedVerticalScale =\n                characterVerticalScale / adjustedDuplicate;\n\n              return (\n                <g\n                  className={`${DharmaTypeClassName}__character-wrapper`}\n                  data-char-id={idx}\n                  data-char-count={duplicate}\n                  key={idxx}\n                  onClick={() => this.updateLetterCount(idx)}\n                >\n                  <filter id={`displacementFilter__${idx}__${idxx}`}>\n                    <feTurbulence\n                      type=\"turbulence\"\n                      baseFrequency={0.6 * (idxx * 0.05)}\n                      numOctaves={1 * (idxx + 20)}\n                      result=\"turbulence\"\n                    />\n                    <feDisplacementMap\n                      in2=\"turbulence\"\n                      in=\"SourceGraphic\"\n                      scale={3 - idxx * 0.5}\n                      xChannelSelector=\"R\"\n                      yChannelSelector=\"G\"\n                    />\n\n                    {/* Outline  */}\n                    <feFlood\n                      flood-color=\"#32DFEC\"\n                      flood-opacity=\"1\"\n                      result=\"PINK\"\n                    />\n                    <feMorphology\n                      in=\"SourceAlpha\"\n                      result=\"DILATED\"\n                      operator=\"dilate\"\n                      radius=\".25\"\n                    />\n                    <feComposite\n                      in=\"PINK\"\n                      in2=\"DILATED\"\n                      operator=\"in\"\n                      result=\"OUTLINE\"\n                    />\n\n                    <feMerge>\n                      <feMergeNode in=\"OUTLINE\" />\n                      <feMergeNode in=\"SourceGraphic\" />\n                    </feMerge>\n                  </filter>\n\n                  <text\n                    className={`${DharmaTypeClassName}__character`}\n                    transform={`translate(${\n                      characterWidth * idx\n                    } ${adjustedVerticalTranslation}) scale(${characterHorizontalScale}, ${adjustedVerticalScale})`}\n                    style={{\n                      [`--${DharmaTypeClassName}-key` as any]: idx,\n                      filter: `url(#displacementFilter__${idx}__${idxx})`,\n                    }}\n                  >\n                    <tspan className={`${DharmaTypeClassName}__letter`}>\n                      {char.letter}\n                    </tspan>\n                  </text>\n                </g>\n              );\n            });\n          })}\n        </g>\n      </DharmaTypeStyle>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}