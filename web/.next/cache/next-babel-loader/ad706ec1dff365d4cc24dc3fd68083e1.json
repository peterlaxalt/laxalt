{"ast":null,"code":"/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n// Begin Component\n// __________________________________________________________________________\nconst Dharma_Canvas = (W, H, ID, BG) => p => {\n  // _________________________________________________\n  // Config\n  let theShader; // _________________________________________________\n  // Preload\n\n  p.preload = () => {\n    theShader = p.loadShader(`/shaders/ex_${ID}/shader.vert`, `/shaders/ex_${ID}/shader.frag`);\n  }; // _________________________________________________\n  // Setup\n\n\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H, p.WEBGL);\n    p.noStroke();\n  }; // _________________________________________________\n  // Draw\n\n\n  p.draw = () => {\n    // shader() sets the active shader with our shader\n    p.shader(theShader);\n    theShader.setUniform(\"u_resolution\", [W, H]);\n    theShader.setUniform(\"u_time\", p.millis() / 1000.0);\n    theShader.setUniform(\"u_mouse\", [p.mouseX, p.map(p.mouseY, 0, H, H, 0)]); // rect gives us some geometry on the screen\n\n    p.rect(0, 0, W, H);\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default Dharma_Canvas;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/dharma.tsx"],"names":["Dharma_Canvas","W","H","ID","BG","p","theShader","preload","loadShader","setup","createCanvas","WEBGL","noStroke","draw","shader","setUniform","millis","mouseX","map","mouseY","rect","windowResized","resizeCanvas"],"mappings":"AAAA;;;;;;AASA;AACA;AASA,MAAMA,aAAiC,GAAG,CAACC,CAAD,EAAIC,CAAJ,EAAOC,EAAP,EAAWC,EAAX,KAAmBC,CAAD,IAAW;AACrE;AACA;AACA,MAAIC,SAAJ,CAHqE,CAKrE;AACA;;AACAD,EAAAA,CAAC,CAACE,OAAF,GAAY,MAAM;AAChBD,IAAAA,SAAS,GAAGD,CAAC,CAACG,UAAF,CACT,eAAcL,EAAG,cADR,EAET,eAAcA,EAAG,cAFR,CAAZ;AAID,GALD,CAPqE,CAcrE;AACA;;;AACAE,EAAAA,CAAC,CAACI,KAAF,GAAU,MAAM;AACd;AACAJ,IAAAA,CAAC,CAACK,YAAF,CAAeT,CAAf,EAAkBC,CAAlB,EAAqBG,CAAC,CAACM,KAAvB;AACAN,IAAAA,CAAC,CAACO,QAAF;AACD,GAJD,CAhBqE,CAsBrE;AACA;;;AACAP,EAAAA,CAAC,CAACQ,IAAF,GAAS,MAAM;AACb;AACAR,IAAAA,CAAC,CAACS,MAAF,CAASR,SAAT;AAEAA,IAAAA,SAAS,CAACS,UAAV,CAAqB,cAArB,EAAqC,CAACd,CAAD,EAAIC,CAAJ,CAArC;AACAI,IAAAA,SAAS,CAACS,UAAV,CAAqB,QAArB,EAA+BV,CAAC,CAACW,MAAF,KAAa,MAA5C;AACAV,IAAAA,SAAS,CAACS,UAAV,CAAqB,SAArB,EAAgC,CAACV,CAAC,CAACY,MAAH,EAAWZ,CAAC,CAACa,GAAF,CAAMb,CAAC,CAACc,MAAR,EAAgB,CAAhB,EAAmBjB,CAAnB,EAAsBA,CAAtB,EAAyB,CAAzB,CAAX,CAAhC,EANa,CAQb;;AACAG,IAAAA,CAAC,CAACe,IAAF,CAAO,CAAP,EAAU,CAAV,EAAanB,CAAb,EAAgBC,CAAhB;AACD,GAVD;;AAYAG,EAAAA,CAAC,CAACgB,aAAF,GAAkB,MAAM;AACtBhB,IAAAA,CAAC,CAACiB,YAAF,CAAerB,CAAf,EAAkBC,CAAlB;AACD,GAFD;AAGD,CAvCD;;AAyCA,eAAeF,aAAf","sourcesContent":["/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n\nimport p5, { Shader } from \"p5\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_Dharma_Canvas = (\n  W: number,\n  H: number,\n  ID: number,\n  BG: string\n) => (p: p5) => void;\n\nconst Dharma_Canvas: LXLT_Dharma_Canvas = (W, H, ID, BG) => (p: p5) => {\n  // _________________________________________________\n  // Config\n  let theShader: Shader;\n\n  // _________________________________________________\n  // Preload\n  p.preload = () => {\n    theShader = p.loadShader(\n      `/shaders/ex_${ID}/shader.vert`,\n      `/shaders/ex_${ID}/shader.frag`\n    );\n  };\n\n  // _________________________________________________\n  // Setup\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H, p.WEBGL);\n    p.noStroke();\n  };\n\n  // _________________________________________________\n  // Draw\n  p.draw = () => {\n    // shader() sets the active shader with our shader\n    p.shader(theShader);\n\n    theShader.setUniform(\"u_resolution\", [W, H]);\n    theShader.setUniform(\"u_time\", p.millis() / 1000.0);\n    theShader.setUniform(\"u_mouse\", [p.mouseX, p.map(p.mouseY, 0, H, H, 0)]);\n\n    // rect gives us some geometry on the screen\n    p.rect(0, 0, W, H);\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default Dharma_Canvas;\n"]},"metadata":{},"sourceType":"module"}