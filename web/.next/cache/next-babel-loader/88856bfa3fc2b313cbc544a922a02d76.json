{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Core\nimport React, { Component } from \"react\"; // Types\n\n// Components\nimport Link from \"next/link\";\nimport { LayeredSidebar } from \"../LayeredSidebar\";\nimport { ThemePicker } from \"../ThemePicker\"; // Styles\n\nimport { InteractiveEyeballClassName, InteractiveEyeballStyle, InteractiveFillBarsClassName, InteractiveFillBarsStyle, InteractiveFrameHeaderClassName, InteractiveFrameHeaderStyle, InteractiveLogotypeClassName, InteractiveLogotypeStyle, InteractiveOverlayNavigationClassName, InteractiveOverlayNavigationStyle } from \"./styles.scss\";\nimport { LayeredSidebarClassName } from \"../LayeredSidebar/styles.scss\";\nimport { createGlobalStyle } from \"styled-components\"; // Begin Types\n// __________________________________________________________________________________________\n\n// Begin Data\n// __________________________________________________________________________________________\nconst FrameItems = () => {\n  let items = [{\n    label: \"Studio\",\n    href: \"/sample\"\n  }, {\n    label: \"Art\",\n    href: \"/sample\"\n  }, {\n    label: \"Design\",\n    href: \"/sample\"\n  }, {\n    label: \"Strategy\",\n    href: \"/sample\"\n  }, {\n    label: \"Interactive\",\n    href: \"/sample\"\n  }, {\n    label: \"Murals\",\n    href: \"/sample\"\n  }, {\n    label: \"Code\",\n    href: \"/sample\"\n  }, {\n    label: \"Lab\",\n    href: \"/sample\"\n  }, {\n    label: \"Products\",\n    href: \"/sample\"\n  }, {\n    label: \"Music\",\n    href: \"/sample\"\n  }, {\n    label: \"Tattoo\",\n    href: \"/sample\"\n  }, {\n    label: \"Shop\",\n    href: \"/sample\"\n  }, {\n    label: \"Resources\",\n    href: \"/sample\"\n  }, {\n    label: \"Advice\",\n    href: \"/sample\"\n  }, {\n    label: \"Fonts\",\n    href: \"/sample\"\n  }, {\n    label: \"Contact\",\n    href: \"/sample\"\n  }];\n  return __jsx(\"div\", {\n    className: `${InteractiveFrameHeaderClassName}__marquee-container`\n  }, __jsx(\"ul\", {\n    className: `${InteractiveFrameHeaderClassName}__frame-items`\n  }, items.map((item, idx) => {\n    return __jsx(\"li\", {\n      key: idx\n    }, __jsx(Link, {\n      href: item.href\n    }, __jsx(\"a\", null, item.label)));\n  })), __jsx(\"ul\", {\n    className: `${InteractiveFrameHeaderClassName}__frame-items`\n  }, items.map((item, idx) => {\n    return __jsx(\"li\", {\n      key: idx\n    }, __jsx(Link, {\n      href: item.href\n    }, __jsx(\"a\", null, item.label)));\n  })));\n}; // Begin Component\n// _________________________________________________________________________________________\n\n/**\n *\n * @name InteractiveFrameHeader\n *\n */\n\n\nexport class InteractiveFrameHeader extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isInactive: false,\n      isFillBarsExpanded: false,\n      isOverlayVisible: false,\n      isSidebarVisible: false,\n      isLogotypeExpanded: false\n    };\n    this.listenToScroll = this.listenToScroll.bind(this);\n    this.toggleLogotype = this.toggleLogotype.bind(this);\n    this.toggleOverlay = this.toggleOverlay.bind(this);\n    this.toggleFillBars = this.toggleFillBars.bind(this);\n    this.toggleOverlayAndFillBarsExpansion = this.toggleOverlayAndFillBarsExpansion.bind(this);\n    this.toggleOverlayAndLogotypeExpansion = this.toggleOverlayAndLogotypeExpansion.bind(this);\n  }\n  /**\n   *\n   * @name componentDidMount()\n   *\n   */\n\n\n  componentDidMount() {\n    if (\"undefined\") {\n      window.addEventListener(\"scroll\", this.listenToScroll);\n    }\n  }\n\n  componentWillUnmount() {\n    if (\"undefined\") {\n      window.removeEventListener(\"scroll\", this.listenToScroll);\n    }\n  }\n\n  toggleLogotype() {\n    if (this.state.isLogotypeExpanded) {\n      this.setState({\n        isLogotypeExpanded: false\n      });\n    } else {\n      this.setState({\n        isLogotypeExpanded: true\n      });\n    }\n  }\n\n  toggleOverlay() {\n    if (this.state.isOverlayVisible) {\n      this.setState({\n        isOverlayVisible: false\n      });\n      return;\n    } else {\n      this.setState({\n        isOverlayVisible: true\n      });\n      return;\n    }\n  }\n\n  toggleFillBars() {\n    if (this.state.isFillBarsExpanded) {\n      this.setState({\n        isFillBarsExpanded: false\n      });\n      return;\n    } else {\n      this.setState({\n        isFillBarsExpanded: true\n      });\n      return;\n    }\n  }\n\n  toggleOverlayAndLogotypeExpansion() {\n    if (this.state.isFillBarsExpanded) {\n      this.toggleOverlay();\n      this.toggleFillBars();\n    } else {\n      this.toggleLogotype();\n      this.toggleOverlay();\n    }\n\n    return;\n  }\n\n  toggleOverlayAndFillBarsExpansion() {\n    this.toggleFillBars();\n    this.toggleOverlay();\n    return;\n  }\n\n  listenToScroll() {\n    if (\"undefined\" && document) {\n      const scrollPosition = document.body.scrollTop || document.documentElement.scrollTop;\n\n      if (scrollPosition > 10) {\n        this.setState({\n          isInactive: true\n        });\n      } else {\n        this.setState({\n          isInactive: false\n        });\n      }\n    }\n  }\n\n  render() {\n    return __jsx(InteractiveFrameHeaderDisplay, {\n      router: this.props.router,\n      isInactive: this.state.isInactive,\n      isFillBarsExpanded: this.state.isFillBarsExpanded,\n      isOverlayVisible: this.state.isOverlayVisible,\n      isSidebarVisible: this.state.isSidebarVisible,\n      isLogotypeExpanded: this.state.isLogotypeExpanded,\n      toggleOverlayAndFillBarsExpansion: this.toggleOverlayAndFillBarsExpansion,\n      toggleOverlayAndLogotypeExpansion: this.toggleOverlayAndLogotypeExpansion\n    });\n  }\n\n}\n/**\n *\n * @name InteractiveEyeball\n * @author Peter Laxalt\n *\n */\n\nexport class InteractiveEyeball extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"pupilRef\", /*#__PURE__*/React.createRef());\n\n    this.state = {\n      mouseX: 0,\n      mouseY: 0,\n      scrollX: 0,\n      scrollY: 0,\n      pupilWidth: 0,\n      pupilHeight: 0,\n      pupilOffsetX: 0,\n      pupilOffsetY: 0,\n      rotation: 0\n    };\n    this.handleMouseMovement = this.handleMouseMovement.bind(this);\n    this.calculatePupilBoundaries = this.calculatePupilBoundaries.bind(this);\n  }\n  /**\n   *\n   * @name componentDidMount()\n   *\n   */\n\n\n  componentDidMount() {\n    if (\"undefined\" && this.pupilRef) {\n      this.calculatePupilBoundaries();\n      window.addEventListener(\"mousemove\", this.handleMouseMovement);\n    } else {\n      return;\n    }\n  }\n\n  componentWillUnmount() {\n    if (\"undefined\") {\n      window.removeEventListener(\"mousemove\", this.handleMouseMovement);\n    }\n  }\n\n  calculatePupilBoundaries() {\n    if (this.pupilRef.current) {\n      let pupilClientRect = this.pupilRef.current.getBoundingClientRect();\n      this.setState({\n        pupilWidth: pupilClientRect.width,\n        pupilHeight: pupilClientRect.height,\n        pupilOffsetX: pupilClientRect.left,\n        pupilOffsetY: pupilClientRect.top\n      });\n    }\n  }\n\n  handleMouseMovement(e) {\n    if (e) {\n      // let radians = Math.atan2(\n      //   e.screenY - (this.state.pupilOffsetY - this.state.pupilHeight / 2),\n      //   e.screenX - (this.state.pupilOffsetX - this.state.pupilWidth / 2)\n      // );\n      let scrollContainer = document.querySelector(`.${InteractiveOverlayNavigationClassName}`);\n      let radians = Math.atan2(e.clientY + scrollContainer.scrollTop - (this.state.pupilOffsetY - this.state.pupilHeight / 2), e.clientX - (this.state.pupilOffsetX - this.state.pupilWidth / 2));\n      let angle = radians * (180 / Math.PI) - 15;\n      this.setState({\n        rotation: angle\n      });\n    } else {\n      return;\n    }\n  }\n\n  render() {\n    // console.log(this.state);\n    return __jsx(InteractiveEyeballStyle, {\n      className: `${InteractiveEyeballClassName} ${this.props.addClass}`\n    }, __jsx(\"span\", {\n      className: `${InteractiveEyeballClassName}__outline`\n    }), __jsx(\"span\", {\n      className: `${InteractiveEyeballClassName}__pupil-wrapper`\n    }, __jsx(\"span\", {\n      ref: this.pupilRef,\n      className: `${InteractiveEyeballClassName}__pupil`,\n      style: {\n        transform: `rotate(${this.state.rotation}deg)`\n      }\n    }, __jsx(\"span\", {\n      className: `${InteractiveEyeballClassName}__pupil__el`\n    }))));\n  }\n\n}\n/**\n *\n * @name InteractiveOverlayNavigation\n * @author Peter Laxalt\n *\n */\n\nconst InteractiveOverlayNavigation = ({\n  addClass,\n  toggleOverlayAndLogotypeExpansion\n}) => {\n  let navItems = [{\n    label: \"Art\",\n    href: \"/sample\",\n    caption: \"Lorem ipsum\"\n  }, {\n    label: \"Design\",\n    href: \"/sample\",\n    caption: \"Lorem ipsum\"\n  }, {\n    label: \"Code\",\n    href: \"/sample\",\n    caption: \"Lorem ipsum\"\n  }, {\n    label: \"Culture\",\n    href: \"/sample\",\n    caption: \"Lorem ipsum\"\n  }, {\n    label: \"Learn\",\n    href: \"/sample\",\n    caption: \"Lorem ipsum\"\n  }, {\n    label: \"Shop\",\n    href: \"/sample\",\n    caption: \"Lorem ipsum\"\n  }, {\n    label: \"Studio\",\n    href: \"/sample\",\n    caption: \"Lorem ipsum\"\n  }, {\n    label: \"Contact\",\n    href: \"/sample\",\n    caption: \"Lorem ipsum\"\n  }];\n  let socialItems = [{\n    label: \"Dribbble\",\n    href: \"/\"\n  }, {\n    label: \"Github\",\n    href: \"/\"\n  }, {\n    label: \"Instagram\",\n    href: \"/\"\n  }, {\n    label: \"LinkedIn\",\n    href: \"/\"\n  }];\n  const GlobalScrollLock = createGlobalStyle`\n    body,\n    html {\n      overflow: hidden !important;\n    }\n  `;\n  return __jsx(React.Fragment, null, __jsx(GlobalScrollLock, null), __jsx(InteractiveOverlayNavigationStyle, {\n    className: `${InteractiveOverlayNavigationClassName} ${addClass}`\n  }, __jsx(\"div\", {\n    className: `${InteractiveOverlayNavigationClassName}__inner`\n  }, __jsx(\"div\", {\n    className: `${InteractiveOverlayNavigationClassName}__oval-btn ${InteractiveOverlayNavigationClassName}__oval-btn--home`\n  }, __jsx(Link, {\n    href: `/`\n  }, __jsx(\"a\", {\n    className: `${InteractiveOverlayNavigationClassName}__oval-btn__el`,\n    onClick: () => toggleOverlayAndLogotypeExpansion()\n  }, \"Home\"))), __jsx(\"div\", {\n    className: `${InteractiveOverlayNavigationClassName}__oval-btn ${InteractiveOverlayNavigationClassName}__oval-btn--close`,\n    onClick: () => toggleOverlayAndLogotypeExpansion()\n  }, __jsx(\"span\", {\n    className: `${InteractiveOverlayNavigationClassName}__oval-btn__el`\n  }, \"Close\")), __jsx(\"div\", {\n    className: `${InteractiveOverlayNavigationClassName}__social`\n  }, __jsx(\"ul\", {\n    className: `${InteractiveOverlayNavigationClassName}__social__list`\n  }, __jsx(\"li\", {\n    className: `${InteractiveOverlayNavigationClassName}__social__list__item`\n  }, __jsx(\"span\", {\n    className: `${InteractiveOverlayNavigationClassName}__social__list__item__label ${InteractiveOverlayNavigationClassName}__social__list__item__label--anchor`\n  }, \"Subscribe\")), socialItems.map((item, idx) => {\n    return __jsx(\"li\", {\n      className: `${InteractiveOverlayNavigationClassName}__social__list__item`\n    }, __jsx(Link, {\n      href: item.href\n    }, __jsx(\"a\", {\n      className: `${InteractiveOverlayNavigationClassName}__social__list__item__label ${InteractiveOverlayNavigationClassName}__social__list__item__label--anchor`\n    }, item.label)));\n  })), __jsx(\"ul\", {\n    className: `${InteractiveOverlayNavigationClassName}__social__minor-list`\n  }, __jsx(\"li\", {\n    className: `${InteractiveOverlayNavigationClassName}__social__minor-list__item`\n  }, \"Currently / Brooklyn, NYC\"), __jsx(\"li\", {\n    className: `${InteractiveOverlayNavigationClassName}__social__minor-list__item`\n  }, \"Originally / Reno, Nevada\"))), __jsx(\"ul\", {\n    className: `${InteractiveOverlayNavigationClassName}__nav-list`\n  }, navItems.map((item, idx) => {\n    return __jsx(\"li\", {\n      key: idx,\n      className: `${InteractiveOverlayNavigationClassName}__nav-list__item`\n    }, __jsx(\"span\", {\n      className: `${InteractiveOverlayNavigationClassName}__nav-list__item__eyeball`\n    }, __jsx(InteractiveEyeball, null)), __jsx(\"span\", {\n      className: `${InteractiveOverlayNavigationClassName}__nav-list__item__overflow-wrapper`\n    }, __jsx(\"span\", {\n      className: `${InteractiveOverlayNavigationClassName}__nav-list__item__inner`\n    }, __jsx(Link, {\n      href: item.href\n    }, __jsx(\"a\", {\n      className: `${InteractiveOverlayNavigationClassName}__nav-list__item__anchor`,\n      onClick: () => toggleOverlayAndLogotypeExpansion()\n    }, __jsx(\"span\", {\n      className: `${InteractiveOverlayNavigationClassName}__nav-list__item__anchor__indicator`\n    }), __jsx(\"span\", {\n      className: `${InteractiveOverlayNavigationClassName}__nav-list__item__anchor__label`\n    }, item.label))))));\n  })))));\n};\n/**\n *\n * @name InteractiveFrameHeaderDisplay\n * @author Peter Laxalt\n *\n */\n\n\nconst InteractiveFrameHeaderDisplay = ({\n  isInactive,\n  isFillBarsExpanded,\n  isLogotypeExpanded,\n  isOverlayVisible,\n  toggleOverlayAndFillBarsExpansion,\n  toggleOverlayAndLogotypeExpansion,\n  router\n}) => {\n  // console.log(router);\n  let hasSidebar = router && router.pathname ? router.pathname.includes(\"sample\") ? true : false : false;\n  return __jsx(React.Fragment, null, __jsx(InteractiveFrameHeaderStyle, {\n    className: `${InteractiveFrameHeaderClassName} ${InteractiveFrameHeaderClassName}--${isInactive || isOverlayVisible ? `inactive` : `active`} ${InteractiveFrameHeaderClassName}--${isFillBarsExpanded || isOverlayVisible ? `fill-bars-is-expanded` : `fill-bars-is-not-expanded`}`\n  }, __jsx(\"div\", {\n    className: `${InteractiveFrameHeaderClassName}__inner`\n  }, __jsx(\"div\", {\n    className: `${InteractiveFrameHeaderClassName}__frame`\n  }, __jsx(\"div\", {\n    className: `${InteractiveFrameHeaderClassName}__frame__corner-action ${InteractiveFrameHeaderClassName}__frame__corner-action--top-left`\n  }, __jsx(Link, {\n    href: \"/\"\n  }, __jsx(\"a\", {\n    className: `${InteractiveFrameHeaderClassName}__frame__corner-action__wrapper`\n  }, __jsx(\"span\", {\n    className: \"icon icon--brandmark\"\n  }, __jsx(\"span\", {\n    className: \"icon--brandmark__el icon__el\"\n  }))))), __jsx(\"div\", {\n    className: `${InteractiveFrameHeaderClassName}__frame__corner-action ${InteractiveFrameHeaderClassName}__frame__corner-action--top-right`,\n    onClick: () => toggleOverlayAndFillBarsExpansion()\n  }, __jsx(\"span\", {\n    className: `${InteractiveFrameHeaderClassName}__frame__corner-action__wrapper`\n  }, __jsx(\"span\", {\n    className: \"icon icon--menu\"\n  }, __jsx(\"span\", {\n    className: \"icon--menu__el icon__el\"\n  })))), __jsx(\"div\", {\n    className: `${InteractiveFrameHeaderClassName}__frame__corner-action ${InteractiveFrameHeaderClassName}__frame__corner-action--bottom-left`\n  }, __jsx(\"span\", {\n    className: `${InteractiveFrameHeaderClassName}__frame__corner-action__wrapper`\n  }, __jsx(\"span\", {\n    className: \"icon icon--eye\"\n  }, __jsx(\"span\", {\n    className: \"icon--eye__el icon__el\"\n  })))), __jsx(\"div\", {\n    className: `${InteractiveFrameHeaderClassName}__frame__corner-action ${InteractiveFrameHeaderClassName}__frame__corner-action--bottom-right`\n  }, __jsx(\"span\", {\n    className: `${InteractiveFrameHeaderClassName}__frame__corner-action__wrapper`\n  }, __jsx(\"span\", {\n    className: \"icon icon--star\"\n  }, __jsx(\"span\", {\n    className: \"icon--star__el icon__el\"\n  })))), __jsx(\"div\", {\n    className: `${InteractiveFrameHeaderClassName}__frame__y-axis`\n  }, __jsx(\"div\", {\n    className: `${InteractiveFrameHeaderClassName}__frame__edge ${InteractiveFrameHeaderClassName}__frame__edge--top`\n  }, __jsx(FrameItems, null), __jsx(ThemePicker, null)), __jsx(\"div\", {\n    className: `${InteractiveFrameHeaderClassName}__frame__edge ${InteractiveFrameHeaderClassName}__frame__edge--bottom`\n  }, __jsx(FrameItems, null))), __jsx(\"div\", {\n    className: `${InteractiveFrameHeaderClassName}__frame__x-axis`\n  }, __jsx(\"div\", {\n    className: `${InteractiveFrameHeaderClassName}__frame__edge ${InteractiveFrameHeaderClassName}__frame__edge--left`\n  }, __jsx(FrameItems, null)), __jsx(\"div\", {\n    className: `${InteractiveFrameHeaderClassName}__frame__edge ${InteractiveFrameHeaderClassName}__frame__edge--right`\n  }, __jsx(FrameItems, null)))))), isOverlayVisible ? __jsx(InteractiveOverlayNavigation, {\n    addClass: `${InteractiveOverlayNavigationClassName}--${isOverlayVisible ? `is-visible` : `is-hidden`}`,\n    toggleOverlayAndLogotypeExpansion: toggleOverlayAndLogotypeExpansion\n  }) : null, __jsx(InteractiveLogotypeStyle, {\n    className: `${InteractiveLogotypeClassName} ${InteractiveLogotypeClassName}--${isInactive ? `inactive` : `active`} ${InteractiveLogotypeClassName}--${isLogotypeExpanded ? `is-expanded` : `is-not-expanded`} ${InteractiveLogotypeClassName}--${isFillBarsExpanded ? `fill-bars-is-expanded` : `fill-bars-is-not-expanded`}`\n  }, __jsx(\"span\", {\n    className: `${InteractiveLogotypeClassName}__inner`\n  }, __jsx(\"span\", {\n    className: `${InteractiveLogotypeClassName}__el`,\n    onClick: () => toggleOverlayAndLogotypeExpansion()\n  }, __jsx(\"span\", {\n    className: `${InteractiveLogotypeClassName}__el__label`\n  }, \"LAXALT\")))), __jsx(InteractiveFillBarsStyle, {\n    className: `${InteractiveFillBarsClassName} ${InteractiveFillBarsClassName}--${isInactive ? `inactive` : `active`} ${InteractiveFillBarsClassName}--${isFillBarsExpanded ? `is-expanded` : `is-not-expanded`}`\n  }, __jsx(\"span\", {\n    className: `${InteractiveFillBarsClassName}__fill-bar ${InteractiveFillBarsClassName}__fill-bar--top`\n  }), __jsx(\"span\", {\n    className: `${InteractiveFillBarsClassName}__fill-bar ${InteractiveFillBarsClassName}__fill-bar--right`\n  }), __jsx(\"span\", {\n    className: `${InteractiveFillBarsClassName}__fill-bar ${InteractiveFillBarsClassName}__fill-bar--bottom`\n  }), __jsx(\"span\", {\n    className: `${InteractiveFillBarsClassName}__fill-bar ${InteractiveFillBarsClassName}__fill-bar--left`\n  })), hasSidebar ? __jsx(LayeredSidebar, {\n    addClass: `${LayeredSidebarClassName}--${isInactive ? `frame-inactive` : `frame-active`}`\n  }) : null);\n}; // End Component\n// ______________________________________________________________________________","map":null,"metadata":{},"sourceType":"module"}