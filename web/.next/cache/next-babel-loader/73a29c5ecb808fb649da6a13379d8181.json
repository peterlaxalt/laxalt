{"ast":null,"code":"import _defineProperty from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\nimport { ThreeWaterCanvas } from \"../three/three-water-distort.canvas\"; // Begin Component\n// __________________________________________________________________________\n\nvar DharmaCanvasDisplay = function DharmaCanvasDisplay(W, H, ID, // DharmaTheme,\nparentEl) {\n  return function (p) {\n    // _________________________________________________\n    // Config\n    var canvas; // ____________________________\n    // Fonts\n\n    var dharmaFont; // ____________________________\n    // Typography\n\n    var text = \"LAXALT\";\n    var splitCharacterArray = text.split(\"\");\n    var characters = splitCharacterArray.map(function (character, idx) {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n        copies: 5,\n        copiesLastVisible: 0,\n        copiesAreVisible: false,\n        countIsIncrementing: true,\n        countIsDecrementing: false,\n        copiesAreIncrementing: true,\n        copiesAreDecrementing: false\n      };\n    });\n    var characterCount = splitCharacterArray.length;\n    var characterWidth = W / characterCount;\n    var characterSize = H * 1.15;\n    var verticalSkewDivisible = 2.75;\n    var characterSkewDivisible = 1.36;\n    console.log(characterSize, \"characterSize\"); // ____________________________\n    // Counts\n    // let renderCount: number = 0;\n\n    var previousCountUpdateTime = 0;\n    var previousCopyUpdateTime = 0; // ____________________________\n    // Strokes\n\n    var strokeWidth = 4;\n    var strokeOffset = strokeWidth * 1.5; // ____________________________\n    // Limits\n\n    var maxCount = 3;\n    var minCount = 1;\n    var maxCopies = 12;\n    var minCopies = 1;\n    var frameRate = 10; // ____________________________\n    // Translation\n    // let previousVerticalTranslation: number = H / 2.25;\n\n    var verticalTranslationWhitespaceCompensation = 2.5;\n\n    var previousHorizontalTranslation = function previousHorizontalTranslation(idx) {\n      return -60 + (characterWidth * idx + characterWidth / 1.5 + strokeOffset);\n    }; // _________________________________________________\n    // Preload\n\n\n    p.preload = function () {\n      dharmaFont = p.loadFont(\"/fonts/dharma/dharma_regular.ttf\");\n    }; // _________________________________________________\n    // Setup\n\n\n    p.setup = function () {\n      // Our Canvas\n      canvas = p.createCanvas(W, H);\n      ThreeWaterCanvas(parentEl, canvas.elt);\n      p.frameRate(frameRate);\n\n      if (window.devicePixelRatio > 1) {\n        p.pixelDensity(1.25);\n      }\n    }; // _________________________________________________\n    // Update Character\n\n\n    var updateCharacter = function updateCharacter(_char, idx) {\n      if (_char.count < maxCount && _char.countIsIncrementing) {\n        characters[idx] = _objectSpread(_objectSpread({}, _char), {}, {\n          count: _char.count + 1\n        });\n        previousCountUpdateTime = p.millis();\n        return;\n      } else if (_char.count === maxCount) {\n        characters[idx] = _objectSpread(_objectSpread({}, _char), {}, {\n          count: _char.count - 1,\n          countIsIncrementing: false,\n          countIsDecrementing: true\n        });\n        previousCountUpdateTime = p.millis();\n        return;\n      } else if (_char.count > minCount && _char.countIsDecrementing) {\n        characters[idx] = _objectSpread(_objectSpread({}, _char), {}, {\n          count: _char.count - 1,\n          countIsDecrementing: true\n        });\n        previousCountUpdateTime = p.millis();\n        return;\n      } else if (_char.count === minCount && _char.countIsDecrementing) {\n        characters[idx] = _objectSpread(_objectSpread({}, _char), {}, {\n          count: _char.count + 1,\n          countIsIncrementing: true,\n          countIsDecrementing: false\n        });\n        previousCountUpdateTime = p.millis();\n        return;\n      }\n\n      return;\n    }; // _________________________________________________\n    // Update Copies\n\n\n    var updateCopies = function updateCopies(_char2, idx) {\n      if (_char2.copies < maxCopies && _char2.copiesAreIncrementing) {\n        characters[idx] = _objectSpread(_objectSpread({}, _char2), {}, {\n          copies: _char2.copies + 1\n        });\n        previousCopyUpdateTime = p.millis();\n        return;\n      } else if (_char2.copies === maxCopies) {\n        characters[idx] = _objectSpread(_objectSpread({}, _char2), {}, {\n          copies: _char2.copies - 1,\n          copiesAreIncrementing: false,\n          copiesAreDecrementing: true\n        });\n        previousCopyUpdateTime = p.millis();\n        return;\n      } else if (_char2.copies > minCopies && _char2.copiesAreDecrementing) {\n        characters[idx] = _objectSpread(_objectSpread({}, _char2), {}, {\n          copies: _char2.copies - 1,\n          copiesAreDecrementing: true\n        });\n        previousCopyUpdateTime = p.millis();\n        return;\n      } else if (_char2.copies === minCopies && _char2.copiesAreDecrementing) {\n        characters[idx] = _objectSpread(_objectSpread({}, _char2), {}, {\n          copies: _char2.copies + 1,\n          copiesAreIncrementing: true,\n          copiesAreDecrementing: false\n        });\n        previousCopyUpdateTime = p.millis();\n        return;\n      }\n\n      return;\n    }; // _________________________________________________\n    // Draw\n\n\n    p.draw = function () {\n      p.background(window.laxaltUniversalTheme.background);\n      p.textFont(dharmaFont);\n      p.textSize(characterSize);\n      p.textAlign(p.CENTER, p.CENTER);\n      p.fill(\"\".concat(window.laxaltUniversalTheme.foreground));\n      p.strokeWeight(strokeWidth);\n      p.stroke(window.laxaltUniversalTheme.background);\n\n      if (H && W) {\n        // _________________________________________\n        // Loop through our copies\n        characters.map(function (_char3, idx) {\n          p.scale(1, 1);\n          var randomCharPick = Math.random() <= 0.5;\n\n          if (randomCharPick) {\n            updateCopies(_char3, idx);\n          }\n\n          if (randomCharPick && p.millis() - previousCountUpdateTime > 3000) {\n            updateCharacter(_char3, idx);\n          }\n\n          var countArray = Array.from(Array(_char3.count).keys());\n          countArray = countArray.map(function (countNumber) {\n            return countNumber + 1;\n          }); // _________________________________________\n          // Duplicate positions\n\n          countArray.map(function (countNumber, idxx) {\n            var verticalScale = 1 / (_char3.count * 0.95);\n            var duplicateVerticalPosition = _char3.count == 1 ? H / verticalTranslationWhitespaceCompensation : characterSize / verticalSkewDivisible + characterSize / characterSkewDivisible * idxx; // _________________________________________\n            // Make copies\n\n            var copiesArray = Array.from(Array(_char3.copies).keys()); // let randomCopyPick = Math.random() <= 0.5;\n\n            copiesArray = copiesArray.map(function (copyNumber) {\n              return copyNumber + 1;\n            }); // let randomCopyPick = Math.random() <= 0.5;\n            // let copyTimer = p.millis() - previousCopiesVisibleTime > 2000;\n\n            previousCopyUpdateTime; // let isFirstCount = true;\n\n            copiesArray.map(function (copyNumber, idxxx) {\n              // let centerCoordsX = W / 2;\n              // let centerCoordsY = H / 2;\n              // let horizontalTranslate =\n              //   copyNumber !== 1\n              //     ? (previousHorizontalTranslation(idx) +\n              //         (strokeOffset / (p.mouseX / 100)) * copyNumber)\n              //     : previousHorizontalTranslation(idx) +\n              //       strokeOffset * copyNumber;\n              // let verticalTranslate =\n              //   copyNumber !== 1\n              //     ? (duplicateVerticalPosition - (strokeOffset / (p.mouseX / 100)) * copyNumber)\n              //     : duplicateVerticalPosition - strokeOffset * copyNumber;\n              var horizontalTranslate = previousHorizontalTranslation(idx) + strokeOffset * copyNumber;\n              var verticalTranslate = duplicateVerticalPosition - strokeOffset * copyNumber;\n              p.push();\n              p.scale(1, verticalScale);\n              p.text(_char3.letter, horizontalTranslate, verticalTranslate);\n              p.pop();\n            });\n          });\n        });\n      }\n    };\n\n    p.windowResized = function () {\n      p.resizeCanvas(W, H);\n    };\n  };\n};\n\nexport default DharmaCanvasDisplay;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/dharma-water-distort.canvas.tsx"],"names":["ThreeWaterCanvas","DharmaCanvasDisplay","W","H","ID","parentEl","p","canvas","dharmaFont","text","splitCharacterArray","split","characters","map","character","idx","letter","count","copies","copiesLastVisible","copiesAreVisible","countIsIncrementing","countIsDecrementing","copiesAreIncrementing","copiesAreDecrementing","characterCount","length","characterWidth","characterSize","verticalSkewDivisible","characterSkewDivisible","console","log","previousCountUpdateTime","previousCopyUpdateTime","strokeWidth","strokeOffset","maxCount","minCount","maxCopies","minCopies","frameRate","verticalTranslationWhitespaceCompensation","previousHorizontalTranslation","preload","loadFont","setup","createCanvas","elt","window","devicePixelRatio","pixelDensity","updateCharacter","char","millis","updateCopies","draw","background","laxaltUniversalTheme","textFont","textSize","textAlign","CENTER","fill","foreground","strokeWeight","stroke","scale","randomCharPick","Math","random","countArray","Array","from","keys","countNumber","idxx","verticalScale","duplicateVerticalPosition","copiesArray","copyNumber","idxxx","horizontalTranslate","verticalTranslate","push","pop","windowResized","resizeCanvas"],"mappings":"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","sourcesContent":["/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n\nimport p5, { Font } from \"p5\";\nimport { ThreeWaterCanvas } from \"../three/three-water-distort.canvas\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_DharmaCanvas = {\n  W: number;\n  H: number;\n  ID: number;\n  // BG: LXLT_ColorTheme;\n  parentEl: HTMLDivElement;\n};\n\nexport type LXLT_DharmaCanvasDisplay = (\n  W: number,\n  H: number,\n  ID: number,\n  // BG: LXLT_ColorTheme,\n  parentEl: HTMLDivElement\n) => (p: p5) => void;\n\ntype LXLT_DharmaCanvasChar = {\n  letter: string;\n  count: number;\n  idx: number;\n\n  copies: number;\n  copiesLastVisible: number;\n  copiesAreVisible: boolean;\n\n  copiesAreIncrementing: boolean;\n  copiesAreDecrementing: boolean;\n\n  countIsIncrementing: boolean;\n  countIsDecrementing: boolean;\n};\n\nconst DharmaCanvasDisplay: LXLT_DharmaCanvasDisplay = (\n  W,\n  H,\n  ID,\n  // DharmaTheme,\n  parentEl\n) => (p: p5) => {\n  // _________________________________________________\n  // Config\n\n  let canvas;\n\n  // ____________________________\n  // Fonts\n  let dharmaFont: Font;\n\n  // ____________________________\n  // Typography\n  let text = \"LAXALT\";\n\n  let splitCharacterArray = text.split(\"\");\n  let characters: LXLT_DharmaCanvasChar[] = splitCharacterArray.map(\n    (character: string, idx: number) => {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n\n        copies: 5,\n        copiesLastVisible: 0,\n        copiesAreVisible: false,\n\n        countIsIncrementing: true,\n        countIsDecrementing: false,\n\n        copiesAreIncrementing: true,\n        copiesAreDecrementing: false,\n      };\n    }\n  );\n\n  let characterCount: number = splitCharacterArray.length;\n  let characterWidth: number = W / characterCount;\n  let characterSize: number = H * 1.15;\n\n  let verticalSkewDivisible: number = 2.75;\n  let characterSkewDivisible: number = 1.36;\n\n  console.log(characterSize, \"characterSize\");\n\n  // ____________________________\n  // Counts\n  // let renderCount: number = 0;\n  let previousCountUpdateTime: number = 0;\n  let previousCopyUpdateTime: number = 0;\n\n  // ____________________________\n  // Strokes\n  let strokeWidth: number = 4;\n  let strokeOffset: number = strokeWidth * 1.5;\n\n  // ____________________________\n  // Limits\n  let maxCount = 3;\n  let minCount = 1;\n\n  let maxCopies = 12;\n  let minCopies = 1;\n\n  let frameRate = 10;\n\n  // ____________________________\n  // Translation\n  // let previousVerticalTranslation: number = H / 2.25;\n\n  let verticalTranslationWhitespaceCompensation: number = 2.5;\n  const previousHorizontalTranslation = (idx: number) =>\n    -60 + (characterWidth * idx + characterWidth / 1.5 + strokeOffset);\n\n  // _________________________________________________\n  // Preload\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  };\n\n  // _________________________________________________\n  // Setup\n  p.setup = () => {\n    // Our Canvas\n    canvas = p.createCanvas(W, H);\n\n    ThreeWaterCanvas(parentEl, canvas.elt);\n\n    p.frameRate(frameRate);\n\n    if (window.devicePixelRatio > 1) {\n      p.pixelDensity(1.25);\n    }\n  };\n\n  // _________________________________________________\n  // Update Character\n  const updateCharacter = (char: LXLT_DharmaCanvasChar, idx: number) => {\n    if (char.count < maxCount && char.countIsIncrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count + 1,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    } else if (char.count === maxCount) {\n      characters[idx] = {\n        ...char,\n        count: char.count - 1,\n        countIsIncrementing: false,\n        countIsDecrementing: true,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    } else if (char.count > minCount && char.countIsDecrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count - 1,\n        countIsDecrementing: true,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    } else if (char.count === minCount && char.countIsDecrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count + 1,\n        countIsIncrementing: true,\n        countIsDecrementing: false,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    }\n\n    return;\n  };\n\n  // _________________________________________________\n  // Update Copies\n  const updateCopies = (char: LXLT_DharmaCanvasChar, idx: number) => {\n    if (char.copies < maxCopies && char.copiesAreIncrementing) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies + 1,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    } else if (char.copies === maxCopies) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies - 1,\n        copiesAreIncrementing: false,\n        copiesAreDecrementing: true,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    } else if (char.copies > minCopies && char.copiesAreDecrementing) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies - 1,\n        copiesAreDecrementing: true,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    } else if (char.copies === minCopies && char.copiesAreDecrementing) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies + 1,\n        copiesAreIncrementing: true,\n        copiesAreDecrementing: false,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    }\n\n    return;\n  };\n\n  // _________________________________________________\n  // Draw\n  p.draw = () => {\n    p.background(window.laxaltUniversalTheme.background);\n\n    p.textFont(dharmaFont);\n\n    p.textSize(characterSize);\n\n    p.textAlign(p.CENTER, p.CENTER);\n\n    p.fill(`${window.laxaltUniversalTheme.foreground}`);\n    p.strokeWeight(strokeWidth);\n    p.stroke(window.laxaltUniversalTheme.background);\n\n    if (H && W) {\n      // _________________________________________\n      // Loop through our copies\n      characters.map((char: LXLT_DharmaCanvasChar, idx: number) => {\n        p.scale(1, 1);\n\n        let randomCharPick = Math.random() <= 0.5;\n\n        if (randomCharPick) {\n          updateCopies(char, idx);\n        }\n\n        if (randomCharPick && p.millis() - previousCountUpdateTime > 3000) {\n          updateCharacter(char, idx);\n        }\n\n        let countArray: number[] = Array.from(Array(char.count).keys());\n\n        countArray = countArray.map((countNumber: number) => {\n          return countNumber + 1;\n        });\n\n        // _________________________________________\n        // Duplicate positions\n        countArray.map((countNumber: number, idxx: number) => {\n          let verticalScale = 1 / (char.count * 0.95);\n\n          let duplicateVerticalPosition: number =\n            char.count == 1\n              ? H / verticalTranslationWhitespaceCompensation\n              : characterSize / verticalSkewDivisible +\n                (characterSize / characterSkewDivisible) * idxx;\n\n          // _________________________________________\n          // Make copies\n          let copiesArray: number[] = Array.from(Array(char.copies).keys());\n          // let randomCopyPick = Math.random() <= 0.5;\n\n          copiesArray = copiesArray.map((copyNumber: number) => {\n            return copyNumber + 1;\n          });\n\n          // let randomCopyPick = Math.random() <= 0.5;\n          // let copyTimer = p.millis() - previousCopiesVisibleTime > 2000;\n          previousCopyUpdateTime;\n\n          // let isFirstCount = true;\n\n          copiesArray.map((copyNumber: number, idxxx: number) => {\n            // let centerCoordsX = W / 2;\n            // let centerCoordsY = H / 2;\n\n            // let horizontalTranslate =\n            //   copyNumber !== 1\n            //     ? (previousHorizontalTranslation(idx) +\n            //         (strokeOffset / (p.mouseX / 100)) * copyNumber)\n            //     : previousHorizontalTranslation(idx) +\n            //       strokeOffset * copyNumber;\n\n            // let verticalTranslate =\n            //   copyNumber !== 1\n            //     ? (duplicateVerticalPosition - (strokeOffset / (p.mouseX / 100)) * copyNumber)\n            //     : duplicateVerticalPosition - strokeOffset * copyNumber;\n\n            let horizontalTranslate =\n              previousHorizontalTranslation(idx) + strokeOffset * copyNumber;\n\n            let verticalTranslate =\n              duplicateVerticalPosition - strokeOffset * copyNumber;\n\n            p.push();\n            p.scale(1, verticalScale);\n            p.text(char.letter, horizontalTranslate, verticalTranslate);\n            p.pop();\n          });\n        });\n      });\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;\n"]},"metadata":{},"sourceType":"module"}