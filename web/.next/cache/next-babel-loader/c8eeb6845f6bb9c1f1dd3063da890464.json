{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\n\nvar _jsxFileName = \"/Users/pflaxalt/Repositories/_pfl/web/components/_interactive/DharmaCounter/DharmaCounter.tsx\",\n    _this3 = this;\n\nvar __jsx = React.createElement;\n// Core\nimport React from \"react\";\nimport { DharmaTypeClassName, DharmaTypeStyle } from \"../../_svg/DharmaType/styles.scss\"; // Begin Types\n// __________________________________________________________________________________________\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name DharmaCounter\n * @author Peter Laxalt\n *\n */\nexport var DharmaCounter =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(DharmaCounter, _React$PureComponent);\n\n  function DharmaCounter(props) {\n    var _this;\n\n    _classCallCheck(this, DharmaCounter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DharmaCounter).call(this, props));\n    _this.state = {\n      text: \"\",\n      characters: [],\n      viewBoxHeight: 0,\n      viewBoxWidth: 0,\n      characterWidth: 0,\n      characterVerticalTranslation: 0,\n      characterHorizontalScale: 0,\n      characterVerticalScale: 0,\n      isInitialized: false\n    };\n    _this.incrementLetterCount = _this.incrementLetterCount.bind(_assertThisInitialized(_this));\n    _this.decrementLetterCount = _this.decrementLetterCount.bind(_assertThisInitialized(_this));\n    _this.resetLetterCount = _this.resetLetterCount.bind(_assertThisInitialized(_this));\n    _this.updateLetterCount = _this.updateLetterCount.bind(_assertThisInitialized(_this));\n    _this.letterCountTimer = _this.letterCountTimer.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(DharmaCounter, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.text) {\n        // ____________________________________________\n        // Get text / create array\n        var text = this.props.text;\n        var splitCharacterArray = text.split(\"\");\n        var characterArray = splitCharacterArray.map(function (character, idx) {\n          return {\n            letter: character,\n            count: 1,\n            idx: idx,\n            copies: []\n          };\n        }); // ____________________________________________\n        // USE THESE TO TWEAK YOUR CHARACTERS TO FIT\n\n        var viewBoxHeight = 100;\n        var viewBoxWidth = 100;\n        var characterCount = splitCharacterArray.length;\n        var characterWidth = viewBoxWidth / characterCount;\n        var characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n\n        var characterHorizontalScale = 0.75; // Multiplied by the characterWidth\n\n        var characterVerticalScale = 1.38; // Multiplied by the characterWidth\n\n        this.setState({\n          text: text,\n          characters: characterArray,\n          viewBoxHeight: viewBoxHeight,\n          viewBoxWidth: viewBoxWidth,\n          characterWidth: characterWidth,\n          characterHorizontalScale: characterHorizontalScale,\n          characterVerticalScale: characterVerticalScale,\n          characterVerticalTranslation: characterVerticalTranslation,\n          isInitialized: true\n        });\n        this.letterCountTimer();\n      }\n    }\n  }, {\n    key: \"incrementLetterCount\",\n    value: function incrementLetterCount(id) {\n      this.setState({\n        characters: this.state.characters.map(function (character, idx) {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? character.count + 1 : character.count,\n            idx: idx,\n            copies: []\n          };\n        })\n      });\n      return;\n    }\n  }, {\n    key: \"decrementLetterCount\",\n    value: function decrementLetterCount(id) {\n      this.setState({\n        characters: this.state.characters.map(function (character, idx) {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? character.count - 1 : character.count,\n            idx: idx,\n            copies: []\n          };\n        })\n      });\n      return;\n    }\n  }, {\n    key: \"resetLetterCount\",\n    value: function resetLetterCount(id) {\n      this.setState({\n        characters: this.state.characters.map(function (character, idx) {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? 1 : character.count,\n            idx: idx,\n            copies: []\n          };\n        })\n      });\n      return;\n    }\n  }, {\n    key: \"updateLetterCount\",\n    value: function updateLetterCount(id) {\n      if (this.state.characters && this.state.characters.length > 0) {\n        var matchedCharacter = this.state.characters.filter(function (character) {\n          return character.idx == id;\n        })[0];\n        var maxCount = 4;\n\n        if (matchedCharacter) {\n          if (matchedCharacter.count === maxCount) {\n            this.resetLetterCount(id);\n          } else {\n            this.incrementLetterCount(id);\n          }\n        } else {\n          return;\n        }\n      } else {\n        return;\n      }\n\n      return;\n    }\n  }, {\n    key: \"letterCountTimer\",\n    value: function letterCountTimer() {\n      var _this2 = this;\n\n      function generateRandomInteger(min, max) {\n        return Math.floor(min + Math.random() * (max + 1 - min));\n      }\n\n      window.setInterval(function () {\n        return _this2.updateLetterCount(generateRandomInteger(0, _this2.state.characters.length));\n      }, 3000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // let {\n      //   viewBoxHeight,\n      //   viewBoxWidth,\n      //   characters,\n      //   characterWidth,\n      //   characterHorizontalScale,\n      //   characterVerticalScale,\n      //   characterVerticalTranslation,\n      // } = this.state;\n      // console.table(\"DharmaCounter state:\", this.state.characters);\n      return __jsx(DharmaCounterDisplay, _extends({}, this.state, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return DharmaCounter;\n}(React.PureComponent);\n\nvar DharmaCounterDisplay = function DharmaCounterDisplay(props) {\n  var viewBoxHeight = props.viewBoxHeight,\n      viewBoxWidth = props.viewBoxWidth,\n      characters = props.characters,\n      characterWidth = props.characterWidth,\n      characterHorizontalScale = props.characterHorizontalScale,\n      characterVerticalScale = props.characterVerticalScale,\n      characterVerticalTranslation = props.characterVerticalTranslation;\n  return __jsx(DharmaTypeStyle, {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 \".concat(viewBoxWidth, \" \").concat(viewBoxHeight),\n    preserveAspectRatio: \"none\",\n    className: \"\".concat(DharmaTypeClassName, \" \").concat(DharmaTypeClassName, \"--couter\"),\n    style: _defineProperty({}, \"--\".concat(DharmaTypeClassName, \"-font-size\"), \"\".concat(viewBoxHeight, \"px\")),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }, __jsx(\"filter\", {\n    id: \"displacementFilter\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }, __jsx(\"feTurbulence\", {\n    type: \"turbulence\",\n    baseFrequency: 0.05,\n    numOctaves: 1,\n    result: \"turbulence\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  }), __jsx(\"feDisplacementMap\", {\n    in2: \"turbulence\",\n    \"in\": \"SourceGraphic\",\n    scale: 3,\n    xChannelSelector: \"R\",\n    yChannelSelector: \"G\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  })), __jsx(\"g\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  }, characters.map(function (_char, idx) {\n    var countArray = _Array$from(Array(_char.count).keys());\n\n    return countArray.map(function (duplicate, idxx) {\n      var _ref2;\n\n      var adjustedDuplicate = _char.count > 1 ? _char.count : duplicate + 1;\n      var adjustedVerticalTranslation = viewBoxHeight / adjustedDuplicate * (idxx + 1) * characterVerticalTranslation;\n      var adjustedVerticalScale = characterVerticalScale / adjustedDuplicate;\n      return __jsx(\"g\", {\n        className: \"\".concat(DharmaTypeClassName, \"__character-wrapper\"),\n        \"data-char-id\": idx,\n        \"data-char-count\": duplicate,\n        key: idxx,\n        onClick: function onClick() {\n          return _this3.updateLetterCount(idx);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }, __jsx(\"filter\", {\n        id: \"displacementFilter__\".concat(idx, \"__\").concat(idxx),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }, __jsx(\"feTurbulence\", {\n        type: \"turbulence\",\n        baseFrequency: 0.6 * (idxx * 0.05),\n        numOctaves: 1 * (idxx + 20),\n        result: \"turbulence\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }), __jsx(\"feDisplacementMap\", {\n        in2: \"turbulence\",\n        \"in\": \"SourceGraphic\",\n        scale: 3 - idxx * 0.5,\n        xChannelSelector: \"R\",\n        yChannelSelector: \"G\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      })), __jsx(\"text\", {\n        className: \"\".concat(DharmaTypeClassName, \"__character\"),\n        transform: \"translate(\".concat(characterWidth * idx, \" \").concat(adjustedVerticalTranslation, \") scale(\").concat(characterHorizontalScale, \", \").concat(adjustedVerticalScale, \")\"),\n        style: (_ref2 = {}, _defineProperty(_ref2, \"--\".concat(DharmaTypeClassName, \"-key\"), idx), _defineProperty(_ref2, \"filter\", \"url(#displacementFilter__\".concat(idx, \"__\").concat(idxx, \")\")), _ref2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339\n        },\n        __self: this\n      }, __jsx(\"tspan\", {\n        className: \"\".concat(DharmaTypeClassName, \"__letter\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        },\n        __self: this\n      }, _char.letter)));\n    });\n  })));\n};","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/components/_interactive/DharmaCounter/DharmaCounter.tsx"],"names":["React","DharmaTypeClassName","DharmaTypeStyle","DharmaCounter","props","state","text","characters","viewBoxHeight","viewBoxWidth","characterWidth","characterVerticalTranslation","characterHorizontalScale","characterVerticalScale","isInitialized","incrementLetterCount","bind","decrementLetterCount","resetLetterCount","updateLetterCount","letterCountTimer","splitCharacterArray","split","characterArray","map","character","idx","letter","count","copies","characterCount","length","setState","id","matchedCharacter","filter","maxCount","generateRandomInteger","min","max","Math","floor","random","window","setInterval","PureComponent","DharmaCounterDisplay","char","countArray","Array","keys","duplicate","idxx","adjustedDuplicate","adjustedVerticalTranslation","adjustedVerticalScale"],"mappings":"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","sourcesContent":["// Core\nimport React from \"react\";\nimport {\n  DharmaTypeClassName,\n  DharmaTypeStyle,\n} from \"../../_svg/DharmaType/styles.scss\";\n\n// Begin Types\n// __________________________________________________________________________________________\n\ntype LXLT_DharmaCounter = {\n  text: string;\n};\n\ntype LXLT_DharmaCounterState = {\n  text: string;\n  characters: LXLT_DharmaChar[];\n\n  viewBoxHeight: number;\n  viewBoxWidth: number;\n\n  characterVerticalTranslation: number;\n  characterHorizontalScale: number;\n  characterVerticalScale: number;\n\n  characterWidth: number;\n\n  isInitialized: boolean;\n};\n\ntype LXLT_DharmaChar = {\n  letter: string;\n  count: number;\n  idx: number;\n  copies: {\n    id: number;\n    count: number;\n  }[];\n};\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name DharmaCounter\n * @author Peter Laxalt\n *\n */\nexport class DharmaCounter extends React.PureComponent<\n  LXLT_DharmaCounter,\n  LXLT_DharmaCounterState\n> {\n  constructor(props: LXLT_DharmaCounter) {\n    super(props);\n\n    this.state = {\n      text: \"\",\n      characters: [],\n\n      viewBoxHeight: 0,\n      viewBoxWidth: 0,\n      characterWidth: 0,\n\n      characterVerticalTranslation: 0,\n      characterHorizontalScale: 0,\n      characterVerticalScale: 0,\n\n      isInitialized: false,\n    };\n\n    this.incrementLetterCount = this.incrementLetterCount.bind(this);\n    this.decrementLetterCount = this.decrementLetterCount.bind(this);\n    this.resetLetterCount = this.resetLetterCount.bind(this);\n    this.updateLetterCount = this.updateLetterCount.bind(this);\n\n    this.letterCountTimer = this.letterCountTimer.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.text) {\n      // ____________________________________________\n      // Get text / create array\n      let { text } = this.props;\n\n      let splitCharacterArray = text.split(\"\");\n      let characterArray: LXLT_DharmaChar[] = splitCharacterArray.map(\n        (character: string, idx: number) => {\n          return {\n            letter: character,\n            count: 1,\n            idx: idx,\n            copies: [],\n          };\n        }\n      );\n\n      // ____________________________________________\n      // USE THESE TO TWEAK YOUR CHARACTERS TO FIT\n      let viewBoxHeight = 100;\n      let viewBoxWidth = 100;\n\n      let characterCount = splitCharacterArray.length;\n      let characterWidth = viewBoxWidth / characterCount;\n\n      let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n      let characterHorizontalScale = 0.75; // Multiplied by the characterWidth\n      let characterVerticalScale = 1.38; // Multiplied by the characterWidth\n\n      this.setState({\n        text: text,\n        characters: characterArray,\n\n        viewBoxHeight: viewBoxHeight,\n        viewBoxWidth: viewBoxWidth,\n\n        characterWidth: characterWidth,\n\n        characterHorizontalScale: characterHorizontalScale,\n        characterVerticalScale: characterVerticalScale,\n        characterVerticalTranslation: characterVerticalTranslation,\n\n        isInitialized: true,\n      });\n\n      this.letterCountTimer();\n    }\n  }\n\n  incrementLetterCount(id: number) {\n    this.setState({\n      characters: this.state.characters.map(\n        (character: LXLT_DharmaChar, idx: number) => {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? character.count + 1 : character.count,\n            idx: idx,\n            copies: [],\n          };\n        }\n      ),\n    });\n\n    return;\n  }\n\n  decrementLetterCount(id: number) {\n    this.setState({\n      characters: this.state.characters.map(\n        (character: LXLT_DharmaChar, idx: number) => {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? character.count - 1 : character.count,\n            idx: idx,\n            copies: [],\n          };\n        }\n      ),\n    });\n\n    return;\n  }\n\n  resetLetterCount(id: number) {\n    this.setState({\n      characters: this.state.characters.map(\n        (character: LXLT_DharmaChar, idx: number) => {\n          return {\n            letter: character.letter,\n            count: id == character.idx ? 1 : character.count,\n            idx: idx,\n            copies: [],\n          };\n        }\n      ),\n    });\n\n    return;\n  }\n\n  updateLetterCount(id: number) {\n    if (this.state.characters && this.state.characters.length > 0) {\n      let matchedCharacter: LXLT_DharmaChar = this.state.characters.filter(\n        (character: LXLT_DharmaChar) => character.idx == id\n      )[0];\n\n      let maxCount = 4;\n\n      if (matchedCharacter) {\n        if (matchedCharacter.count === maxCount) {\n          this.resetLetterCount(id);\n        } else {\n          this.incrementLetterCount(id);\n        }\n      } else {\n        return;\n      }\n    } else {\n      return;\n    }\n\n    return;\n  }\n\n  letterCountTimer() {\n    function generateRandomInteger(min, max) {\n      return Math.floor(min + Math.random() * (max + 1 - min));\n    }\n\n    window.setInterval(\n      () =>\n        this.updateLetterCount(\n          generateRandomInteger(0, this.state.characters.length)\n        ),\n      3000\n    );\n  }\n\n  render() {\n    // let {\n    //   viewBoxHeight,\n    //   viewBoxWidth,\n    //   characters,\n    //   characterWidth,\n\n    //   characterHorizontalScale,\n    //   characterVerticalScale,\n    //   characterVerticalTranslation,\n    // } = this.state;\n\n    // console.table(\"DharmaCounter state:\", this.state.characters);\n\n    return <DharmaCounterDisplay {...this.state} />;\n  }\n}\n\nconst DharmaCounterDisplay: React.FunctionComponent<LXLT_DharmaCounterState> = (\n  props\n) => {\n  let {\n    viewBoxHeight,\n    viewBoxWidth,\n    characters,\n    characterWidth,\n\n    characterHorizontalScale,\n    characterVerticalScale,\n    characterVerticalTranslation,\n  } = props;\n\n  return (\n    <DharmaTypeStyle\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox={`0 0 ${viewBoxWidth} ${viewBoxHeight}`}\n      preserveAspectRatio=\"none\"\n      className={`${DharmaTypeClassName} ${DharmaTypeClassName}--couter`}\n      style={{\n        [`--${DharmaTypeClassName}-font-size` as any]: `${viewBoxHeight}px`,\n      }}\n    >\n      <filter id={`displacementFilter`}>\n        <feTurbulence\n          type=\"turbulence\"\n          baseFrequency={0.05}\n          numOctaves={1}\n          result=\"turbulence\"\n        />\n        <feDisplacementMap\n          in2=\"turbulence\"\n          in=\"SourceGraphic\"\n          scale={3}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"G\"\n        />\n      </filter>\n\n      <g>\n        {characters.map((char: LXLT_DharmaChar, idx: number) => {\n          let countArray = Array.from(Array(char.count).keys());\n\n          return countArray.map((duplicate: number, idxx: number) => {\n            let adjustedDuplicate = char.count > 1 ? char.count : duplicate + 1;\n\n            let adjustedVerticalTranslation =\n              (viewBoxHeight / adjustedDuplicate) *\n              (idxx + 1) *\n              characterVerticalTranslation;\n\n            let adjustedVerticalScale =\n              characterVerticalScale / adjustedDuplicate;\n\n            return (\n              <g\n                className={`${DharmaTypeClassName}__character-wrapper`}\n                data-char-id={idx}\n                data-char-count={duplicate}\n                key={idxx}\n                onClick={() => this.updateLetterCount(idx)}\n              >\n                <filter id={`displacementFilter__${idx}__${idxx}`}>\n                  <feTurbulence\n                    type=\"turbulence\"\n                    baseFrequency={0.6 * (idxx * 0.05)}\n                    numOctaves={1 * (idxx + 20)}\n                    result=\"turbulence\"\n                  />\n                  <feDisplacementMap\n                    in2=\"turbulence\"\n                    in=\"SourceGraphic\"\n                    scale={3 - idxx * 0.5}\n                    xChannelSelector=\"R\"\n                    yChannelSelector=\"G\"\n                  />\n\n                  {/* Outline  */}\n                  {/* <feFlood\n                      flood-color=\"#32DFEC\"\n                      flood-opacity=\"1\"\n                      result=\"PINK\"\n                    />\n                    <feMorphology\n                      in=\"SourceAlpha\"\n                      result=\"DILATED\"\n                      operator=\"dilate\"\n                      radius=\".25\"\n                    />\n                    <feComposite\n                      in=\"PINK\"\n                      in2=\"DILATED\"\n                      operator=\"in\"\n                      result=\"OUTLINE\"\n                    />\n\n                    <feMerge>\n                      <feMergeNode in=\"OUTLINE\" />\n                      <feMergeNode in=\"SourceGraphic\" />\n                    </feMerge> */}\n                </filter>\n\n                <text\n                  className={`${DharmaTypeClassName}__character`}\n                  transform={`translate(${\n                    characterWidth * idx\n                  } ${adjustedVerticalTranslation}) scale(${characterHorizontalScale}, ${adjustedVerticalScale})`}\n                  style={{\n                    [`--${DharmaTypeClassName}-key` as any]: idx,\n                    filter: `url(#displacementFilter__${idx}__${idxx})`,\n                  }}\n                >\n                  <tspan className={`${DharmaTypeClassName}__letter`}>\n                    {char.letter}\n                  </tspan>\n                </text>\n              </g>\n            );\n          });\n        })}\n      </g>\n    </DharmaTypeStyle>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}