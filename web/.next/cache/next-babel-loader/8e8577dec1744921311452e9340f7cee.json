{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/pflaxalt/Repositories/_pfl/web/components/_interactive/DharmaCounter/DharmaCounter.tsx\";\nvar __jsx = React.createElement;\n// Core\nimport React from \"react\";\nimport { DharmaTypeClassName, DharmaTypeStyle } from \"../../_svg/DharmaType/styles.scss\"; // Begin Types\n// __________________________________________________________________________________________\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name DharmaCounter\n * @author Peter Laxalt\n *\n */\nexport var DharmaCounter =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(DharmaCounter, _React$PureComponent);\n\n  function DharmaCounter(props) {\n    var _this;\n\n    _classCallCheck(this, DharmaCounter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DharmaCounter).call(this, props));\n    _this.state = {\n      text: \"\",\n      characters: [],\n      viewBoxHeight: 0,\n      viewBoxWidth: 0,\n      characterWidth: 0,\n      characterVerticalTranslation: 0,\n      isInitialized: false\n    };\n    return _this;\n  }\n\n  _createClass(DharmaCounter, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.text) {\n        // ____________________________________________\n        // Get text / create array\n        var text = this.props.text;\n        var splitCharacterArray = text.split(\"\");\n        var characterArray = splitCharacterArray.map(function (character, idx) {\n          return {\n            letter: character,\n            count: 1,\n            idx: idx\n          };\n        }); // ____________________________________________\n        // USE THESE TO TWEAK YOUR CHARACTERS TO FIT\n\n        var viewBoxHeight = 173.21;\n        var viewBoxWidth = 215.21;\n        var characterCount = splitCharacterArray.length;\n        var characterWidth = viewBoxWidth / characterCount;\n        var characterVerticalTranslation = 0.983; // Multiplied by the viewBoxHeight\n\n        this.setState({\n          text: text,\n          characters: characterArray,\n          viewBoxHeight: viewBoxHeight,\n          viewBoxWidth: viewBoxWidth,\n          characterWidth: characterWidth,\n          characterVerticalTranslation: characterVerticalTranslation,\n          isInitialized: true\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          viewBoxHeight = _this$state.viewBoxHeight,\n          viewBoxWidth = _this$state.viewBoxWidth,\n          characters = _this$state.characters,\n          characterWidth = _this$state.characterWidth,\n          characterVerticalTranslation = _this$state.characterVerticalTranslation;\n      console.log(\"DharmaCounter state:\", this.state);\n      return __jsx(DharmaTypeStyle, {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 \".concat(viewBoxWidth, \" \").concat(viewBoxHeight),\n        preserveAspectRatio: \"none\",\n        className: \"\".concat(DharmaTypeClassName, \" \").concat(DharmaTypeClassName, \"--couter\"),\n        style: _defineProperty({}, \"--\".concat(DharmaTypeClassName, \"-font-size\"), \"\".concat(viewBoxHeight, \"px\")),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, __jsx(\"g\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, characters.map(function (_char, idx) {\n        return __jsx(\"g\", {\n          className: \"\".concat(DharmaTypeClassName, \"__character-wrapper\"),\n          key: idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, __jsx(\"text\", {\n          className: \"\".concat(DharmaTypeClassName, \"__character\"),\n          transform: \"translate(\".concat(characterWidth * idx, \" \").concat(viewBoxHeight * characterVerticalTranslation, \") scale(1.13, 1)\"),\n          style: _defineProperty({}, \"--\".concat(DharmaTypeClassName, \"-key\"), idx),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, __jsx(\"tspan\", {\n          className: \"\".concat(DharmaTypeClassName, \"__letter\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }, _char.letter)));\n      })));\n    }\n  }]);\n\n  return DharmaCounter;\n}(React.PureComponent);","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/components/_interactive/DharmaCounter/DharmaCounter.tsx"],"names":["React","DharmaTypeClassName","DharmaTypeStyle","DharmaCounter","props","state","text","characters","viewBoxHeight","viewBoxWidth","characterWidth","characterVerticalTranslation","isInitialized","splitCharacterArray","split","characterArray","map","character","idx","letter","count","characterCount","length","setState","console","log","char","PureComponent"],"mappings":"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","sourcesContent":["// Core\nimport React from \"react\";\nimport {\n  DharmaTypeClassName,\n  DharmaTypeStyle,\n} from \"../../_svg/DharmaType/styles.scss\";\n\n// Begin Types\n// __________________________________________________________________________________________\n\ntype LXLT_DharmaCounter = {\n  text: string;\n};\n\ntype LXLT_DharmaCounterState = {\n  text: string;\n  characters: LXLT_DharmaChar[];\n\n  viewBoxHeight: number;\n  viewBoxWidth: number;\n\n  characterVerticalTranslation: number;\n\n  characterWidth: number;\n\n  isInitialized: boolean;\n};\n\ntype LXLT_DharmaChar = {\n  letter: string;\n  count: number;\n  idx: number;\n};\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name DharmaCounter\n * @author Peter Laxalt\n *\n */\nexport class DharmaCounter extends React.PureComponent<\n  LXLT_DharmaCounter,\n  LXLT_DharmaCounterState\n> {\n  constructor(props: LXLT_DharmaCounter) {\n    super(props);\n\n    this.state = {\n      text: \"\",\n      characters: [],\n\n      viewBoxHeight: 0,\n      viewBoxWidth: 0,\n      characterWidth: 0,\n\n      characterVerticalTranslation: 0,\n\n      isInitialized: false,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.text) {\n      // ____________________________________________\n      // Get text / create array\n      let { text } = this.props;\n\n      let splitCharacterArray = text.split(\"\");\n      let characterArray: LXLT_DharmaChar[] = splitCharacterArray.map(\n        (character: string, idx: number) => {\n          return {\n            letter: character,\n            count: 1,\n            idx: idx,\n          };\n        }\n      );\n\n      // ____________________________________________\n      // USE THESE TO TWEAK YOUR CHARACTERS TO FIT\n      let viewBoxHeight = 173.21;\n      let viewBoxWidth = 215.21;\n\n      let characterCount = splitCharacterArray.length;\n      let characterWidth = viewBoxWidth / characterCount;\n\n      let characterVerticalTranslation = 0.983; // Multiplied by the viewBoxHeight\n\n      this.setState({\n        text: text,\n        characters: characterArray,\n\n        viewBoxHeight: viewBoxHeight,\n        viewBoxWidth: viewBoxWidth,\n\n        characterWidth: characterWidth,\n        characterVerticalTranslation: characterVerticalTranslation,\n\n        isInitialized: true,\n      });\n    }\n  }\n\n  render() {\n    let {\n      viewBoxHeight,\n      viewBoxWidth,\n      characters,\n      characterWidth,\n      characterVerticalTranslation,\n    } = this.state;\n\n    console.log(\"DharmaCounter state:\", this.state);\n\n    return (\n      <DharmaTypeStyle\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox={`0 0 ${viewBoxWidth} ${viewBoxHeight}`}\n        preserveAspectRatio=\"none\"\n        className={`${DharmaTypeClassName} ${DharmaTypeClassName}--couter`}\n        style={{\n          [`--${DharmaTypeClassName}-font-size` as any]: `${viewBoxHeight}px`,\n        }}\n      >\n        <g>\n          {characters.map((char: LXLT_DharmaChar, idx: number) => {\n            return (\n              <g\n                className={`${DharmaTypeClassName}__character-wrapper`}\n                key={idx}\n              >\n                <text\n                  className={`${DharmaTypeClassName}__character`}\n                  transform={`translate(${characterWidth * idx} ${\n                    viewBoxHeight * characterVerticalTranslation\n                  }) scale(1.13, 1)`}\n                  style={{\n                    [`--${DharmaTypeClassName}-key` as any]: idx,\n                  }}\n                >\n                  <tspan className={`${DharmaTypeClassName}__letter`}>\n                    {char.letter}\n                  </tspan>\n                </text>\n              </g>\n            );\n          })}\n        </g>\n      </DharmaTypeStyle>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}