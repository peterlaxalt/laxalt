{"ast":null,"code":"import * as THREE from \"three\";\n// import { GUI } from \"./jsm/libs/dat.gui.module.js\";\nimport { OrbitControls } from \"./jsm/controls/OrbitControls.js\"; // Begin Component\n// __________________________________________________________________________\n\nexport const ThreeCanvas = (container, CanvasTheme) => {\n  /**\n   * Setup\n   */\n  var mesh, renderer, scene, camera, controls, sketch; // var gui;\n\n  var API = {\n    offsetX: 0,\n    offsetY: 0,\n    repeatX: 0.25,\n    repeatY: 0.25,\n    rotation: Math.PI / 4,\n    // positive is counter-clockwise\n    centerX: 0.5,\n    centerY: 0.5\n  };\n  init();\n\n  function init() {\n    renderer = new THREE.WebGLRenderer({\n      alpha: true\n    });\n    sketch = container;\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    sketch.appendChild(renderer.domElement);\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 1000);\n    camera.position.set(0, 0, 25); // scene.background = new THREE.Color(\n    //   `${hexToRGB(CanvasTheme.background, 0)}`\n    // );\n\n    scene.add(camera);\n    /**\n     * Camera controls\n     */\n\n    controls = new OrbitControls(camera, renderer.domElement);\n    controls.movementSpeed = 10000;\n    controls.domElement = renderer.domElement;\n    controls.rollSpeed = Math.PI / 24;\n    controls.autoForward = true;\n    controls.dragToLook = true;\n    controls.enableZoom = false;\n    var geometry = new THREE.TorusKnotBufferGeometry(10, 3, 200, 200);\n    new THREE.TextureLoader().load(\"/projects/three/stripe-tile.png\", function (texture) {\n      texture.wrapS = texture.wrapT = THREE.RepeatWrapping; // texture.anisotropy = renderer.capabilities.getMaxAnisotropy();\n\n      texture.anisotropy = 1; //texture.matrixAutoUpdate = false; // default true; set to false to update texture.matrix manually\n\n      var material = new THREE.MeshBasicMaterial({\n        map: texture\n      });\n      mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh);\n      updateUvTransform();\n      animate();\n    });\n    window.addEventListener(\"resize\", onWindowResize, false);\n  } // our scale of the pattern\n\n\n  var repeatX = 0;\n  var repeatY = 0; // var frameCount = 0;\n\n  function animate() {\n    // call animate recursively\n    requestAnimationFrame(animate); // texture manipulation\n\n    var texture = mesh.material.map; // frameCount += 1;\n\n    repeatX += 0.01;\n    repeatY += 0.01;\n    texture.rotation += 0.0001;\n    texture.repeat = {\n      x: repeatX,\n      y: repeatY\n    }; // increase the mesh's rotation each frame\n\n    mesh.rotation.z += 0.0008;\n    mesh.rotation.x += 0.0008;\n    mesh.rotation.y += 0.0008; // render, or 'create a still image', of the scene\n    // this will create one still image / frame each time the animate\n    // function calls itself\n\n    renderer.render(scene, camera);\n  }\n\n  function render() {\n    renderer.render(scene, camera);\n  }\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    render();\n  }\n\n  function updateUvTransform() {\n    var texture = mesh.material.map;\n\n    if (texture.matrixAutoUpdate === true) {\n      texture.offset.set(API.offsetX, API.offsetY); // texture.repeat.set(API.repeatX, API.repeatY);\n\n      texture.center.set(API.centerX, API.centerY); // texture.rotation = API.rotation; // rotation is around [ 0.5, 0.5 ]\n    } else {\n      // one way...\n      //texture.matrix.setUvTransform( API.offsetX, API.offsetY, API.repeatX, API.repeatY, API.rotation, API.centerX, API.centerY );\n      // another way...\n      texture.matrix.identity().translate(-API.centerX, -API.centerY).translate(API.centerX, API.centerY).translate(API.offsetX, API.offsetY);\n    }\n\n    render();\n  }\n};","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/three/with-canvas-as-texture.ts"],"names":["THREE","OrbitControls","ThreeCanvas","container","CanvasTheme","mesh","renderer","scene","camera","controls","sketch","API","offsetX","offsetY","repeatX","repeatY","rotation","Math","PI","centerX","centerY","init","WebGLRenderer","alpha","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","appendChild","domElement","Scene","PerspectiveCamera","position","set","add","movementSpeed","rollSpeed","autoForward","dragToLook","enableZoom","geometry","TorusKnotBufferGeometry","TextureLoader","load","texture","wrapS","wrapT","RepeatWrapping","anisotropy","material","MeshBasicMaterial","map","Mesh","updateUvTransform","animate","addEventListener","onWindowResize","requestAnimationFrame","repeat","x","y","z","render","aspect","updateProjectionMatrix","matrixAutoUpdate","offset","center","matrix","identity","translate"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA;AACA,SAASC,aAAT,QAA8B,iCAA9B,C,CAEA;AACA;;AAOA,OAAO,MAAMC,WAAoC,GAAG,CAClDC,SADkD,EAElDC,WAFkD,KAG/C;AACH;AACF;AACA;AAEE,MAAIC,IAAJ,EAAUC,QAAV,EAAoBC,KAApB,EAA2BC,MAA3B,EAAmCC,QAAnC,EAA6CC,MAA7C,CALG,CAOH;;AAEA,MAAIC,GAAG,GAAG;AACRC,IAAAA,OAAO,EAAE,CADD;AAERC,IAAAA,OAAO,EAAE,CAFD;AAGRC,IAAAA,OAAO,EAAE,IAHD;AAIRC,IAAAA,OAAO,EAAE,IAJD;AAKRC,IAAAA,QAAQ,EAAEC,IAAI,CAACC,EAAL,GAAU,CALZ;AAKe;AACvBC,IAAAA,OAAO,EAAE,GAND;AAORC,IAAAA,OAAO,EAAE;AAPD,GAAV;AAUAC,EAAAA,IAAI;;AAEJ,WAASA,IAAT,GAAgB;AACdf,IAAAA,QAAQ,GAAG,IAAIN,KAAK,CAACsB,aAAV,CAAwB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAxB,CAAX;AACAb,IAAAA,MAAM,GAAGP,SAAT;AACAG,IAAAA,QAAQ,CAACkB,aAAT,CAAuBC,MAAM,CAACC,gBAA9B;AACApB,IAAAA,QAAQ,CAACqB,OAAT,CAAiBF,MAAM,CAACG,UAAxB,EAAoCH,MAAM,CAACI,WAA3C;AACAnB,IAAAA,MAAM,CAACoB,WAAP,CAAmBxB,QAAQ,CAACyB,UAA5B;AAEAxB,IAAAA,KAAK,GAAG,IAAIP,KAAK,CAACgC,KAAV,EAAR;AAEAxB,IAAAA,MAAM,GAAG,IAAIR,KAAK,CAACiC,iBAAV,CACP,EADO,EAEPR,MAAM,CAACG,UAAP,GAAoBH,MAAM,CAACI,WAFpB,EAGP,CAHO,EAIP,IAJO,CAAT;AAMArB,IAAAA,MAAM,CAAC0B,QAAP,CAAgBC,GAAhB,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,EAA1B,EAfc,CAiBd;AACA;AACA;;AACA5B,IAAAA,KAAK,CAAC6B,GAAN,CAAU5B,MAAV;AAEA;AACJ;AACA;;AACIC,IAAAA,QAAQ,GAAG,IAAIR,aAAJ,CAAkBO,MAAlB,EAA0BF,QAAQ,CAACyB,UAAnC,CAAX;AACAtB,IAAAA,QAAQ,CAAC4B,aAAT,GAAyB,KAAzB;AACA5B,IAAAA,QAAQ,CAACsB,UAAT,GAAsBzB,QAAQ,CAACyB,UAA/B;AACAtB,IAAAA,QAAQ,CAAC6B,SAAT,GAAqBrB,IAAI,CAACC,EAAL,GAAU,EAA/B;AACAT,IAAAA,QAAQ,CAAC8B,WAAT,GAAuB,IAAvB;AACA9B,IAAAA,QAAQ,CAAC+B,UAAT,GAAsB,IAAtB;AACA/B,IAAAA,QAAQ,CAACgC,UAAT,GAAsB,KAAtB;AAEA,QAAIC,QAAQ,GAAG,IAAI1C,KAAK,CAAC2C,uBAAV,CAAkC,EAAlC,EAAsC,CAAtC,EAAyC,GAAzC,EAA8C,GAA9C,CAAf;AAEA,QAAI3C,KAAK,CAAC4C,aAAV,GAA0BC,IAA1B,CACE,iCADF,EAEE,UAAUC,OAAV,EAAmB;AACjBA,MAAAA,OAAO,CAACC,KAAR,GAAgBD,OAAO,CAACE,KAAR,GAAgBhD,KAAK,CAACiD,cAAtC,CADiB,CAEjB;;AACAH,MAAAA,OAAO,CAACI,UAAR,GAAqB,CAArB,CAHiB,CAKjB;;AAEA,UAAIC,QAAQ,GAAG,IAAInD,KAAK,CAACoD,iBAAV,CAA4B;AAAEC,QAAAA,GAAG,EAAEP;AAAP,OAA5B,CAAf;AAEAzC,MAAAA,IAAI,GAAG,IAAIL,KAAK,CAACsD,IAAV,CAAeZ,QAAf,EAAyBS,QAAzB,CAAP;AACA5C,MAAAA,KAAK,CAAC6B,GAAN,CAAU/B,IAAV;AAEAkD,MAAAA,iBAAiB;AAEjBC,MAAAA,OAAO;AACR,KAjBH;AAoBA/B,IAAAA,MAAM,CAACgC,gBAAP,CAAwB,QAAxB,EAAkCC,cAAlC,EAAkD,KAAlD;AACD,GA7EE,CA+EH;;;AACA,MAAI5C,OAAO,GAAG,CAAd;AACA,MAAIC,OAAO,GAAG,CAAd,CAjFG,CAkFH;;AAEA,WAASyC,OAAT,GAAmB;AACjB;AACAG,IAAAA,qBAAqB,CAACH,OAAD,CAArB,CAFiB,CAIjB;;AACA,QAAIV,OAAO,GAAGzC,IAAI,CAAC8C,QAAL,CAAcE,GAA5B,CALiB,CAMjB;;AAEAvC,IAAAA,OAAO,IAAI,IAAX;AACAC,IAAAA,OAAO,IAAI,IAAX;AAEA+B,IAAAA,OAAO,CAAC9B,QAAR,IAAoB,MAApB;AACA8B,IAAAA,OAAO,CAACc,MAAR,GAAiB;AAAEC,MAAAA,CAAC,EAAE/C,OAAL;AAAcgD,MAAAA,CAAC,EAAE/C;AAAjB,KAAjB,CAZiB,CAcjB;;AACAV,IAAAA,IAAI,CAACW,QAAL,CAAc+C,CAAd,IAAmB,MAAnB;AACA1D,IAAAA,IAAI,CAACW,QAAL,CAAc6C,CAAd,IAAmB,MAAnB;AACAxD,IAAAA,IAAI,CAACW,QAAL,CAAc8C,CAAd,IAAmB,MAAnB,CAjBiB,CAmBjB;AACA;AACA;;AACAxD,IAAAA,QAAQ,CAAC0D,MAAT,CAAgBzD,KAAhB,EAAuBC,MAAvB;AACD;;AAED,WAASwD,MAAT,GAAkB;AAChB1D,IAAAA,QAAQ,CAAC0D,MAAT,CAAgBzD,KAAhB,EAAuBC,MAAvB;AACD;;AAED,WAASkD,cAAT,GAA0B;AACxBlD,IAAAA,MAAM,CAACyD,MAAP,GAAgBxC,MAAM,CAACG,UAAP,GAAoBH,MAAM,CAACI,WAA3C;AAEArB,IAAAA,MAAM,CAAC0D,sBAAP;AAEA5D,IAAAA,QAAQ,CAACqB,OAAT,CAAiBF,MAAM,CAACG,UAAxB,EAAoCH,MAAM,CAACI,WAA3C;AAEAmC,IAAAA,MAAM;AACP;;AAED,WAAST,iBAAT,GAA6B;AAC3B,QAAIT,OAAO,GAAGzC,IAAI,CAAC8C,QAAL,CAAcE,GAA5B;;AAEA,QAAIP,OAAO,CAACqB,gBAAR,KAA6B,IAAjC,EAAuC;AACrCrB,MAAAA,OAAO,CAACsB,MAAR,CAAejC,GAAf,CAAmBxB,GAAG,CAACC,OAAvB,EAAgCD,GAAG,CAACE,OAApC,EADqC,CAErC;;AACAiC,MAAAA,OAAO,CAACuB,MAAR,CAAelC,GAAf,CAAmBxB,GAAG,CAACQ,OAAvB,EAAgCR,GAAG,CAACS,OAApC,EAHqC,CAIrC;AACD,KALD,MAKO;AACL;AACA;AAEA;AACA0B,MAAAA,OAAO,CAACwB,MAAR,CACGC,QADH,GAEGC,SAFH,CAEa,CAAC7D,GAAG,CAACQ,OAFlB,EAE2B,CAACR,GAAG,CAACS,OAFhC,EAGGoD,SAHH,CAGa7D,GAAG,CAACQ,OAHjB,EAG0BR,GAAG,CAACS,OAH9B,EAIGoD,SAJH,CAIa7D,GAAG,CAACC,OAJjB,EAI0BD,GAAG,CAACE,OAJ9B;AAKD;;AAEDmD,IAAAA,MAAM;AACP;AACF,CApJM","sourcesContent":["import * as THREE from \"three\";\nimport { LXLT_ColorTheme } from \"../../constants/styles/Color\";\nimport { hexToRGB } from \"../../utils/hexToRGB\";\n// import { GUI } from \"./jsm/libs/dat.gui.module.js\";\nimport { OrbitControls } from \"./jsm/controls/OrbitControls.js\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_ThreeCanvasDisplay = (\n  container: HTMLDivElement,\n  CanvasTheme: LXLT_ColorTheme\n) => void;\n\nexport const ThreeCanvas: LXLT_ThreeCanvasDisplay = (\n  container,\n  CanvasTheme\n) => {\n  /**\n   * Setup\n   */\n\n  var mesh, renderer, scene, camera, controls, sketch;\n\n  // var gui;\n\n  var API = {\n    offsetX: 0,\n    offsetY: 0,\n    repeatX: 0.25,\n    repeatY: 0.25,\n    rotation: Math.PI / 4, // positive is counter-clockwise\n    centerX: 0.5,\n    centerY: 0.5,\n  };\n\n  init();\n\n  function init() {\n    renderer = new THREE.WebGLRenderer({ alpha: true });\n    sketch = container;\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    sketch.appendChild(renderer.domElement);\n\n    scene = new THREE.Scene();\n\n    camera = new THREE.PerspectiveCamera(\n      40,\n      window.innerWidth / window.innerHeight,\n      1,\n      1000\n    );\n    camera.position.set(0, 0, 25);\n\n    // scene.background = new THREE.Color(\n    //   `${hexToRGB(CanvasTheme.background, 0)}`\n    // );\n    scene.add(camera);\n\n    /**\n     * Camera controls\n     */\n    controls = new OrbitControls(camera, renderer.domElement);\n    controls.movementSpeed = 10000;\n    controls.domElement = renderer.domElement;\n    controls.rollSpeed = Math.PI / 24;\n    controls.autoForward = true;\n    controls.dragToLook = true;\n    controls.enableZoom = false;\n\n    var geometry = new THREE.TorusKnotBufferGeometry(10, 3, 200, 200);\n\n    new THREE.TextureLoader().load(\n      \"/projects/three/stripe-tile.png\",\n      function (texture) {\n        texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n        // texture.anisotropy = renderer.capabilities.getMaxAnisotropy();\n        texture.anisotropy = 1;\n\n        //texture.matrixAutoUpdate = false; // default true; set to false to update texture.matrix manually\n\n        var material = new THREE.MeshBasicMaterial({ map: texture });\n\n        mesh = new THREE.Mesh(geometry, material);\n        scene.add(mesh);\n\n        updateUvTransform();\n\n        animate();\n      }\n    );\n\n    window.addEventListener(\"resize\", onWindowResize, false);\n  }\n\n  // our scale of the pattern\n  var repeatX = 0;\n  var repeatY = 0;\n  // var frameCount = 0;\n\n  function animate() {\n    // call animate recursively\n    requestAnimationFrame(animate);\n\n    // texture manipulation\n    var texture = mesh.material.map;\n    // frameCount += 1;\n\n    repeatX += 0.01;\n    repeatY += 0.01;\n\n    texture.rotation += 0.0001;\n    texture.repeat = { x: repeatX, y: repeatY };\n\n    // increase the mesh's rotation each frame\n    mesh.rotation.z += 0.0008;\n    mesh.rotation.x += 0.0008;\n    mesh.rotation.y += 0.0008;\n\n    // render, or 'create a still image', of the scene\n    // this will create one still image / frame each time the animate\n    // function calls itself\n    renderer.render(scene, camera);\n  }\n\n  function render() {\n    renderer.render(scene, camera);\n  }\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n\n    camera.updateProjectionMatrix();\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n\n    render();\n  }\n\n  function updateUvTransform() {\n    var texture = mesh.material.map;\n\n    if (texture.matrixAutoUpdate === true) {\n      texture.offset.set(API.offsetX, API.offsetY);\n      // texture.repeat.set(API.repeatX, API.repeatY);\n      texture.center.set(API.centerX, API.centerY);\n      // texture.rotation = API.rotation; // rotation is around [ 0.5, 0.5 ]\n    } else {\n      // one way...\n      //texture.matrix.setUvTransform( API.offsetX, API.offsetY, API.repeatX, API.repeatY, API.rotation, API.centerX, API.centerY );\n\n      // another way...\n      texture.matrix\n        .identity()\n        .translate(-API.centerX, -API.centerY)\n        .translate(API.centerX, API.centerY)\n        .translate(API.offsetX, API.offsetY);\n    }\n\n    render();\n  }\n};\n"]},"metadata":{},"sourceType":"module"}