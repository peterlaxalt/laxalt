{"ast":null,"code":"/**\n *\n * Sin Wave Cone\n * @author Peter Laxalt\n * @description Simple Sin Wave Cone in p5.js\n *\n */\n// Begin Component\n//////////////////////////////////////////////////////////////////////\nexport default (function (W, H) {\n  return function (p) {\n    // Variables\n    var color = {\n      primary: \"red\",\n      primaryAlpha: \"red\",\n      secondary: \"cyan\",\n      bg: \"blue\",\n      white: \"#ffffff\"\n    };\n    var coordinates = []; // Setup\n\n    p.setup = function () {\n      p.createCanvas(W, H, p.WEBGL);\n      var gutter = 20;\n      var countX = p.ceil(p.width / gutter) + 1;\n      var countY = p.ceil(p.height / gutter) + 1;\n\n      for (var j = 0; j < countY; j++) {\n        for (var i = 0; i < countX; i++) {\n          coordinates.push(new p.Vector(gutter * i, gutter * j));\n        }\n      }\n\n      p.noFill();\n      p.stroke(color.secondary);\n    }; // Draw Loop\n\n\n    p.draw = function () {\n      p.background(color.bg);\n\n      for (var i = coordinates.length - 1; i >= 0; i--) {\n        var h = calcVec(coordinates[i].x - p.mouseX, coordinates[i].y - p.mouseY);\n        p.line(coordinates[i].x, coordinates[i].y, coordinates[i].x + 15 * p.cos(h.heading()), coordinates[i].y + 15 * p.sin(h.heading()));\n      }\n    };\n\n    var calcVec = function calcVec(x, y) {\n      return new p.Vector(y - x, -x - y);\n    };\n\n    p.windowResized = function () {\n      p.resizeCanvas(W, H);\n      p.background(\"yellow\");\n    };\n  };\n});","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/d3.tsx"],"names":["W","H","p","color","primary","primaryAlpha","secondary","bg","white","coordinates","setup","createCanvas","WEBGL","gutter","countX","ceil","width","countY","height","j","i","push","Vector","noFill","stroke","draw","background","length","h","calcVec","x","mouseX","y","mouseY","line","cos","heading","sin","windowResized","resizeCanvas"],"mappings":"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","sourcesContent":["/**\n *\n * Sin Wave Cone\n * @author Peter Laxalt\n * @description Simple Sin Wave Cone in p5.js\n *\n */\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport default (W: any, H: any) => (p: any) => {\n  // Variables\n  let color = {\n    primary: \"red\",\n    primaryAlpha: \"red\",\n    secondary: \"cyan\",\n    bg: \"blue\",\n    white: \"#ffffff\"\n  };\n\n  let coordinates: any[] = [];\n\n  // Setup\n  p.setup = () => {\n    p.createCanvas(W, H, p.WEBGL);\n\n    let gutter = 20;\n    let countX = p.ceil(p.width / gutter) + 1;\n    let countY = p.ceil(p.height / gutter) + 1;\n\n    for (let j = 0; j < countY; j++) {\n      for (let i = 0; i < countX; i++) {\n        coordinates.push(new p.Vector(gutter * i, gutter * j));\n      }\n    }\n\n    p.noFill();\n    p.stroke(color.secondary);\n  };\n\n  // Draw Loop\n  p.draw = () => {\n    p.background(color.bg);\n    for (let i = coordinates.length - 1; i >= 0; i--) {\n      let h = calcVec(coordinates[i].x - p.mouseX, coordinates[i].y - p.mouseY);\n      p.line(\n        coordinates[i].x,\n        coordinates[i].y,\n        coordinates[i].x + 15 * p.cos(h.heading()),\n        coordinates[i].y + 15 * p.sin(h.heading())\n      );\n    }\n  };\n\n  const calcVec = (x: number, y: number) => {\n    return new p.Vector(y - x, -x - y);\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n    p.background(\"yellow\");\n  };\n};\n"]},"metadata":{},"sourceType":"module"}