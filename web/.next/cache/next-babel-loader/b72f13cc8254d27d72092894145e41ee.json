{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as THREE from \"three\";\nimport { __DEBUG__ } from \"../../constants/site/Settings\";\nimport { WaterTexture } from \"./water-distort/WaterTexture\"; // Begin Component\n// __________________________________________________________________________\n\nexport class ThreeWaterCanvasClass {\n  constructor() {\n    _defineProperty(this, \"waterTexture\", void 0);\n\n    this.waterTexture = new WaterTexture({\n      debug: true\n    });\n    this.tick = this.tick.bind(this);\n    this.init();\n  }\n\n  init() {\n    this.tick();\n  }\n\n  tick() {\n    this.waterTexture.update();\n    requestAnimationFrame(this.tick);\n  }\n\n}\nconst ThreeWaterCanvas = new ThreeWaterCanvasClass(); // ______________________________________________________________________________________________________________\n\nexport const ThreeCanvas = (container, CanvasElement, CanvasTheme) => {\n  __DEBUG__ && console.log(\"ðŸ¤™ Three.js Canvas received:\", CanvasElement);\n  let camera, scene, renderer, mesh, material, sketch;\n  init();\n  setupCanvasDrawing();\n  animate();\n\n  function init() {\n    camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 6000);\n    camera.position.z = 500;\n    sketch = container;\n    scene = new THREE.Scene();\n    material = new THREE.MeshBasicMaterial();\n    mesh = new THREE.Mesh(new THREE.BoxBufferGeometry(350, 350, 350), material);\n    scene.add(mesh);\n    renderer = new THREE.WebGLRenderer({\n      antialias: false,\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    sketch.appendChild(renderer.domElement);\n    scene.background = new THREE.Color(0x000000);\n    window.addEventListener(\"resize\", onWindowResize, false);\n  }\n\n  function setupCanvasDrawing() {\n    material.map = new THREE.CanvasTexture(CanvasElement);\n  }\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  function animate() {\n    requestAnimationFrame(animate);\n    mesh.rotation.x += 0.01;\n    mesh.rotation.y += 0.01;\n    material.map.needsUpdate = true;\n    renderer.render(scene, camera);\n  }\n};","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/three/three-water-distort.canvas.ts"],"names":["THREE","__DEBUG__","WaterTexture","ThreeWaterCanvasClass","constructor","waterTexture","debug","tick","bind","init","update","requestAnimationFrame","ThreeWaterCanvas","ThreeCanvas","container","CanvasElement","CanvasTheme","console","log","camera","scene","renderer","mesh","material","sketch","setupCanvasDrawing","animate","PerspectiveCamera","window","innerWidth","innerHeight","position","z","Scene","MeshBasicMaterial","Mesh","BoxBufferGeometry","add","WebGLRenderer","antialias","alpha","setPixelRatio","devicePixelRatio","setSize","appendChild","domElement","background","Color","addEventListener","onWindowResize","map","CanvasTexture","aspect","updateProjectionMatrix","rotation","x","y","needsUpdate","render"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport { __DEBUG__ } from \"../../constants/site/Settings\";\nimport { LXLT_ColorTheme } from \"../../constants/styles/Color\";\nimport {\n  LXLT_WaterTextureOptions,\n  WaterTexture,\n} from \"./water-distort/WaterTexture\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_ThreeWaterCanvas = {\n  container: HTMLDivElement;\n  CanvasElement: HTMLCanvasElement;\n  CanvasTheme: LXLT_ColorTheme;\n};\n\nexport class ThreeWaterCanvasClass<LXLT_ThreeWaterCanvas> {\n  waterTexture: LXLT_WaterTextureOptions;\n\n  constructor() {\n    this.waterTexture = new WaterTexture({ debug: true });\n\n    this.tick = this.tick.bind(this);\n    this.init();\n  }\n  init() {\n    this.tick();\n  }\n  tick() {\n    this.waterTexture.update();\n    requestAnimationFrame(this.tick);\n  }\n}\n\nconst ThreeWaterCanvas = new ThreeWaterCanvasClass();\n\n// ______________________________________________________________________________________________________________\n\nexport type LXLT_ThreeCanvasDisplay = (\n  container: HTMLDivElement,\n  CanvasElement: HTMLCanvasElement,\n  CanvasTheme: LXLT_ColorTheme\n) => void;\n\nexport const ThreeCanvas: LXLT_ThreeCanvasDisplay = (\n  container,\n  CanvasElement,\n  CanvasTheme\n) => {\n  __DEBUG__ && console.log(\"ðŸ¤™ Three.js Canvas received:\", CanvasElement);\n\n  let camera, scene, renderer, mesh, material, sketch;\n\n  init();\n  setupCanvasDrawing();\n  animate();\n\n  function init() {\n    camera = new THREE.PerspectiveCamera(\n      50,\n      window.innerWidth / window.innerHeight,\n      1,\n      6000\n    );\n    camera.position.z = 500;\n\n    sketch = container;\n\n    scene = new THREE.Scene();\n\n    material = new THREE.MeshBasicMaterial();\n\n    mesh = new THREE.Mesh(new THREE.BoxBufferGeometry(350, 350, 350), material);\n    scene.add(mesh);\n\n    renderer = new THREE.WebGLRenderer({ antialias: false, alpha: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    sketch.appendChild(renderer.domElement);\n\n    scene.background = new THREE.Color(0x000000);\n\n    window.addEventListener(\"resize\", onWindowResize, false);\n  }\n\n  function setupCanvasDrawing() {\n    material.map = new THREE.CanvasTexture(CanvasElement);\n  }\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  function animate() {\n    requestAnimationFrame(animate);\n\n    mesh.rotation.x += 0.01;\n    mesh.rotation.y += 0.01;\n\n    material.map.needsUpdate = true;\n\n    renderer.render(scene, camera);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}