{"ast":null,"code":"import _defineProperty from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\nimport { ThreeCanvas } from \"../three/with-canvas-as-texture\"; // Begin Component\n// __________________________________________________________________________\n\nvar DharmaCanvasDisplay = function DharmaCanvasDisplay(W, H, ID, DharmaTheme, parentEl) {\n  return function (p) {\n    // _________________________________________________\n    // Config\n    // ____________________________\n    // Fonts\n    var dharmaFont; // ____________________________\n    // Typography\n\n    var text = \"LAXALT\";\n    var splitCharacterArray = text.split(\"\");\n    var characters = splitCharacterArray.map(function (character, idx) {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n        copies: 5,\n        copiesLastVisible: 0,\n        copiesAreVisible: false,\n        countIsIncrementing: true,\n        countIsDecrementing: false,\n        copiesAreIncrementing: true,\n        copiesAreDecrementing: false\n      };\n    });\n    var characterCount = splitCharacterArray.length;\n    var characterWidth = W / characterCount;\n    var characterSize = H * 1.25;\n    console.log(characterSize, \"characterSize\"); // ____________________________\n    // Counts\n    // let renderCount: number = 0;\n\n    var previousCountUpdateTime = 0;\n    var previousCopyUpdateTime = 0; // ____________________________\n    // Strokes\n\n    var strokeWidth = 4;\n    var strokeOffset = strokeWidth * 1.5; // ____________________________\n    // Limits\n\n    var maxCount = 3;\n    var minCount = 1;\n    var maxCopies = 12;\n    var minCopies = 1;\n    var frameRate = 10; // ____________________________\n    // Translation\n    // let previousVerticalTranslation: number = H / 2.25;\n\n    var verticalTranslationWhitespaceCompensation = 2.25;\n\n    var previousHorizontalTranslation = function previousHorizontalTranslation(idx) {\n      return -60 + (characterWidth * idx + characterWidth / 1.5 + strokeOffset);\n    }; // _________________________________________________\n    // Preload\n\n\n    p.preload = function () {\n      dharmaFont = p.loadFont(\"/fonts/dharma/dharma_regular.ttf\");\n    }; // _________________________________________________\n    // Setup\n\n\n    p.setup = function () {\n      // Our Canvas\n      p.createCanvas(W, H);\n      ThreeCanvas(_this.threeRootElement.el, _this.state.canvasElement, _this.props.colorThemeContext);\n      p.frameRate(frameRate);\n    }; // _________________________________________________\n    // Update Character\n\n\n    var updateCharacter = function updateCharacter(_char, idx) {\n      if (_char.count < maxCount && _char.countIsIncrementing) {\n        characters[idx] = _objectSpread(_objectSpread({}, _char), {}, {\n          count: _char.count + 1\n        });\n        previousCountUpdateTime = p.millis();\n        return;\n      } else if (_char.count === maxCount) {\n        characters[idx] = _objectSpread(_objectSpread({}, _char), {}, {\n          count: _char.count - 1,\n          countIsIncrementing: false,\n          countIsDecrementing: true\n        });\n        previousCountUpdateTime = p.millis();\n        return;\n      } else if (_char.count > minCount && _char.countIsDecrementing) {\n        characters[idx] = _objectSpread(_objectSpread({}, _char), {}, {\n          count: _char.count - 1,\n          countIsDecrementing: true\n        });\n        previousCountUpdateTime = p.millis();\n        return;\n      } else if (_char.count === minCount && _char.countIsDecrementing) {\n        characters[idx] = _objectSpread(_objectSpread({}, _char), {}, {\n          count: _char.count + 1,\n          countIsIncrementing: true,\n          countIsDecrementing: false\n        });\n        previousCountUpdateTime = p.millis();\n        return;\n      }\n\n      return;\n    }; // _________________________________________________\n    // Update Copies\n\n\n    var updateCopies = function updateCopies(_char2, idx) {\n      if (_char2.copies < maxCopies && _char2.copiesAreIncrementing) {\n        characters[idx] = _objectSpread(_objectSpread({}, _char2), {}, {\n          copies: _char2.copies + 1\n        });\n        previousCopyUpdateTime = p.millis();\n        return;\n      } else if (_char2.copies === maxCopies) {\n        characters[idx] = _objectSpread(_objectSpread({}, _char2), {}, {\n          copies: _char2.copies - 1,\n          copiesAreIncrementing: false,\n          copiesAreDecrementing: true\n        });\n        previousCopyUpdateTime = p.millis();\n        return;\n      } else if (_char2.copies > minCopies && _char2.copiesAreDecrementing) {\n        characters[idx] = _objectSpread(_objectSpread({}, _char2), {}, {\n          copies: _char2.copies - 1,\n          copiesAreDecrementing: true\n        });\n        previousCopyUpdateTime = p.millis();\n        return;\n      } else if (_char2.copies === minCopies && _char2.copiesAreDecrementing) {\n        characters[idx] = _objectSpread(_objectSpread({}, _char2), {}, {\n          copies: _char2.copies + 1,\n          copiesAreIncrementing: true,\n          copiesAreDecrementing: false\n        });\n        previousCopyUpdateTime = p.millis();\n        return;\n      }\n\n      return;\n    }; // _________________________________________________\n    // Draw\n\n\n    p.draw = function () {\n      p.background(DharmaTheme.background);\n      p.textFont(dharmaFont);\n      p.textSize(characterSize);\n      p.textAlign(p.CENTER, p.CENTER);\n      p.fill(\"\".concat(DharmaTheme.foreground));\n      p.strokeWeight(strokeWidth);\n      p.stroke(DharmaTheme.background);\n\n      if (H && W) {\n        // _________________________________________\n        // Loop through our copies\n        characters.map(function (_char3, idx) {\n          p.scale(1, 1);\n          var randomCharPick = Math.random() <= 0.5;\n\n          if (randomCharPick) {\n            updateCopies(_char3, idx);\n          }\n\n          if (randomCharPick && p.millis() - previousCountUpdateTime > 3000) {\n            updateCharacter(_char3, idx);\n          }\n\n          var countArray = Array.from(Array(_char3.count).keys());\n          countArray = countArray.map(function (countNumber) {\n            return countNumber + 1;\n          }); // _________________________________________\n          // Duplicate positions\n\n          countArray.map(function (countNumber, idxx) {\n            var verticalScale = 1 / (_char3.count * 0.95);\n            var verticalSkewDivisible = 2.75;\n            var characterSkewDivisible = 1.36;\n            var duplicateVerticalPosition = _char3.count == 1 ? H / verticalTranslationWhitespaceCompensation : characterSize / verticalSkewDivisible + characterSize / characterSkewDivisible * idxx; // _________________________________________\n            // Make copies\n\n            var copiesArray = Array.from(Array(_char3.copies).keys()); // let randomCopyPick = Math.random() <= 0.5;\n\n            copiesArray = copiesArray.map(function (copyNumber) {\n              return copyNumber + 1;\n            }); // let randomCopyPick = Math.random() <= 0.5;\n            // let copyTimer = p.millis() - previousCopiesVisibleTime > 2000;\n\n            previousCopyUpdateTime; // let isFirstCount = true;\n\n            copiesArray.map(function (copyNumber, idxxx) {\n              // let centerCoordsX = W / 2;\n              // let centerCoordsY = H / 2;\n              // let horizontalTranslate =\n              //   copyNumber !== 1\n              //     ? (previousHorizontalTranslation(idx) +\n              //         (strokeOffset / (p.mouseX / 100)) * copyNumber)\n              //     : previousHorizontalTranslation(idx) +\n              //       strokeOffset * copyNumber;\n              // let verticalTranslate =\n              //   copyNumber !== 1\n              //     ? (duplicateVerticalPosition - (strokeOffset / (p.mouseX / 100)) * copyNumber)\n              //     : duplicateVerticalPosition - strokeOffset * copyNumber;\n              var horizontalTranslate = previousHorizontalTranslation(idx) + strokeOffset * copyNumber;\n              var verticalTranslate = duplicateVerticalPosition - strokeOffset * copyNumber;\n              p.push();\n              p.scale(1, verticalScale);\n              p.text(_char3.letter, horizontalTranslate, verticalTranslate);\n              p.pop();\n            });\n          });\n        });\n      }\n    };\n\n    p.windowResized = function () {\n      p.resizeCanvas(W, H);\n    };\n  };\n};\n\nexport default DharmaCanvasDisplay;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/dharma-as-canvas.tsx"],"names":["ThreeCanvas","DharmaCanvasDisplay","W","H","ID","DharmaTheme","parentEl","p","dharmaFont","text","splitCharacterArray","split","characters","map","character","idx","letter","count","copies","copiesLastVisible","copiesAreVisible","countIsIncrementing","countIsDecrementing","copiesAreIncrementing","copiesAreDecrementing","characterCount","length","characterWidth","characterSize","console","log","previousCountUpdateTime","previousCopyUpdateTime","strokeWidth","strokeOffset","maxCount","minCount","maxCopies","minCopies","frameRate","verticalTranslationWhitespaceCompensation","previousHorizontalTranslation","preload","loadFont","setup","createCanvas","threeRootElement","el","state","canvasElement","props","colorThemeContext","updateCharacter","char","millis","updateCopies","draw","background","textFont","textSize","textAlign","CENTER","fill","foreground","strokeWeight","stroke","scale","randomCharPick","Math","random","countArray","Array","from","keys","countNumber","idxx","verticalScale","verticalSkewDivisible","characterSkewDivisible","duplicateVerticalPosition","copiesArray","copyNumber","idxxx","horizontalTranslate","verticalTranslate","push","pop","windowResized","resizeCanvas"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA,SAASA,WAAT,QAA4B,iCAA5B,C,CAEA;AACA;;AAkCA,IAAMC,mBAA6C,GAAG,SAAhDA,mBAAgD,CACpDC,CADoD,EAEpDC,CAFoD,EAGpDC,EAHoD,EAIpDC,WAJoD,EAKpDC,QALoD;AAAA,SAMjD,UAACC,CAAD,EAAW;AACd;AACA;AAEA;AACA;AACA,QAAIC,UAAJ,CANc,CAQd;AACA;;AACA,QAAIC,IAAI,GAAG,QAAX;AAEA,QAAIC,mBAAmB,GAAGD,IAAI,CAACE,KAAL,CAAW,EAAX,CAA1B;AACA,QAAIC,UAAmC,GAAGF,mBAAmB,CAACG,GAApB,CACxC,UAACC,SAAD,EAAoBC,GAApB,EAAoC;AAClC,aAAO;AACLC,QAAAA,MAAM,EAAEF,SADH;AAELG,QAAAA,KAAK,EAAE,CAFF;AAGLF,QAAAA,GAAG,EAAEA,GAHA;AAKLG,QAAAA,MAAM,EAAE,CALH;AAMLC,QAAAA,iBAAiB,EAAE,CANd;AAOLC,QAAAA,gBAAgB,EAAE,KAPb;AASLC,QAAAA,mBAAmB,EAAE,IAThB;AAULC,QAAAA,mBAAmB,EAAE,KAVhB;AAYLC,QAAAA,qBAAqB,EAAE,IAZlB;AAaLC,QAAAA,qBAAqB,EAAE;AAblB,OAAP;AAeD,KAjBuC,CAA1C;AAoBA,QAAIC,cAAsB,GAAGf,mBAAmB,CAACgB,MAAjD;AACA,QAAIC,cAAsB,GAAGzB,CAAC,GAAGuB,cAAjC;AACA,QAAIG,aAAqB,GAAGzB,CAAC,GAAG,IAAhC;AAEA0B,IAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ,EAA2B,eAA3B,EArCc,CAuCd;AACA;AACA;;AACA,QAAIG,uBAA+B,GAAG,CAAtC;AACA,QAAIC,sBAA8B,GAAG,CAArC,CA3Cc,CA6Cd;AACA;;AACA,QAAIC,WAAmB,GAAG,CAA1B;AACA,QAAIC,YAAoB,GAAGD,WAAW,GAAG,GAAzC,CAhDc,CAkDd;AACA;;AACA,QAAIE,QAAQ,GAAG,CAAf;AACA,QAAIC,QAAQ,GAAG,CAAf;AAEA,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIC,SAAS,GAAG,CAAhB;AAEA,QAAIC,SAAS,GAAG,EAAhB,CA1Dc,CA4Dd;AACA;AACA;;AAEA,QAAIC,yCAAiD,GAAG,IAAxD;;AACA,QAAMC,6BAA6B,GAAG,SAAhCA,6BAAgC,CAAC1B,GAAD;AAAA,aACpC,CAAC,EAAD,IAAOY,cAAc,GAAGZ,GAAjB,GAAuBY,cAAc,GAAG,GAAxC,GAA8CO,YAArD,CADoC;AAAA,KAAtC,CAjEc,CAoEd;AACA;;;AACA3B,IAAAA,CAAC,CAACmC,OAAF,GAAY,YAAM;AAChBlC,MAAAA,UAAU,GAAGD,CAAC,CAACoC,QAAF,oCAAb;AACD,KAFD,CAtEc,CA0Ed;AACA;;;AACApC,IAAAA,CAAC,CAACqC,KAAF,GAAU,YAAM;AACd;AACArC,MAAAA,CAAC,CAACsC,YAAF,CAAe3C,CAAf,EAAkBC,CAAlB;AAEAH,MAAAA,WAAW,CACT,KAAI,CAAC8C,gBAAL,CAAsBC,EADb,EAET,KAAI,CAACC,KAAL,CAAWC,aAFF,EAGT,KAAI,CAACC,KAAL,CAAWC,iBAHF,CAAX;AAMA5C,MAAAA,CAAC,CAACgC,SAAF,CAAYA,SAAZ;AACD,KAXD,CA5Ec,CAyFd;AACA;;;AACA,QAAMa,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAA8BtC,GAA9B,EAA8C;AACpE,UAAIsC,KAAI,CAACpC,KAAL,GAAakB,QAAb,IAAyBkB,KAAI,CAAChC,mBAAlC,EAAuD;AACrDT,QAAAA,UAAU,CAACG,GAAD,CAAV,mCACKsC,KADL;AAEEpC,UAAAA,KAAK,EAAEoC,KAAI,CAACpC,KAAL,GAAa;AAFtB;AAKAc,QAAAA,uBAAuB,GAAGxB,CAAC,CAAC+C,MAAF,EAA1B;AAEA;AACD,OATD,MASO,IAAID,KAAI,CAACpC,KAAL,KAAekB,QAAnB,EAA6B;AAClCvB,QAAAA,UAAU,CAACG,GAAD,CAAV,mCACKsC,KADL;AAEEpC,UAAAA,KAAK,EAAEoC,KAAI,CAACpC,KAAL,GAAa,CAFtB;AAGEI,UAAAA,mBAAmB,EAAE,KAHvB;AAIEC,UAAAA,mBAAmB,EAAE;AAJvB;AAOAS,QAAAA,uBAAuB,GAAGxB,CAAC,CAAC+C,MAAF,EAA1B;AAEA;AACD,OAXM,MAWA,IAAID,KAAI,CAACpC,KAAL,GAAamB,QAAb,IAAyBiB,KAAI,CAAC/B,mBAAlC,EAAuD;AAC5DV,QAAAA,UAAU,CAACG,GAAD,CAAV,mCACKsC,KADL;AAEEpC,UAAAA,KAAK,EAAEoC,KAAI,CAACpC,KAAL,GAAa,CAFtB;AAGEK,UAAAA,mBAAmB,EAAE;AAHvB;AAMAS,QAAAA,uBAAuB,GAAGxB,CAAC,CAAC+C,MAAF,EAA1B;AAEA;AACD,OAVM,MAUA,IAAID,KAAI,CAACpC,KAAL,KAAemB,QAAf,IAA2BiB,KAAI,CAAC/B,mBAApC,EAAyD;AAC9DV,QAAAA,UAAU,CAACG,GAAD,CAAV,mCACKsC,KADL;AAEEpC,UAAAA,KAAK,EAAEoC,KAAI,CAACpC,KAAL,GAAa,CAFtB;AAGEI,UAAAA,mBAAmB,EAAE,IAHvB;AAIEC,UAAAA,mBAAmB,EAAE;AAJvB;AAOAS,QAAAA,uBAAuB,GAAGxB,CAAC,CAAC+C,MAAF,EAA1B;AAEA;AACD;;AAED;AACD,KA7CD,CA3Fc,CA0Id;AACA;;;AACA,QAAMC,YAAY,GAAG,SAAfA,YAAe,CAACF,MAAD,EAA8BtC,GAA9B,EAA8C;AACjE,UAAIsC,MAAI,CAACnC,MAAL,GAAcmB,SAAd,IAA2BgB,MAAI,CAAC9B,qBAApC,EAA2D;AACzDX,QAAAA,UAAU,CAACG,GAAD,CAAV,mCACKsC,MADL;AAEEnC,UAAAA,MAAM,EAAEmC,MAAI,CAACnC,MAAL,GAAc;AAFxB;AAKAc,QAAAA,sBAAsB,GAAGzB,CAAC,CAAC+C,MAAF,EAAzB;AAEA;AACD,OATD,MASO,IAAID,MAAI,CAACnC,MAAL,KAAgBmB,SAApB,EAA+B;AACpCzB,QAAAA,UAAU,CAACG,GAAD,CAAV,mCACKsC,MADL;AAEEnC,UAAAA,MAAM,EAAEmC,MAAI,CAACnC,MAAL,GAAc,CAFxB;AAGEK,UAAAA,qBAAqB,EAAE,KAHzB;AAIEC,UAAAA,qBAAqB,EAAE;AAJzB;AAOAQ,QAAAA,sBAAsB,GAAGzB,CAAC,CAAC+C,MAAF,EAAzB;AAEA;AACD,OAXM,MAWA,IAAID,MAAI,CAACnC,MAAL,GAAcoB,SAAd,IAA2Be,MAAI,CAAC7B,qBAApC,EAA2D;AAChEZ,QAAAA,UAAU,CAACG,GAAD,CAAV,mCACKsC,MADL;AAEEnC,UAAAA,MAAM,EAAEmC,MAAI,CAACnC,MAAL,GAAc,CAFxB;AAGEM,UAAAA,qBAAqB,EAAE;AAHzB;AAMAQ,QAAAA,sBAAsB,GAAGzB,CAAC,CAAC+C,MAAF,EAAzB;AAEA;AACD,OAVM,MAUA,IAAID,MAAI,CAACnC,MAAL,KAAgBoB,SAAhB,IAA6Be,MAAI,CAAC7B,qBAAtC,EAA6D;AAClEZ,QAAAA,UAAU,CAACG,GAAD,CAAV,mCACKsC,MADL;AAEEnC,UAAAA,MAAM,EAAEmC,MAAI,CAACnC,MAAL,GAAc,CAFxB;AAGEK,UAAAA,qBAAqB,EAAE,IAHzB;AAIEC,UAAAA,qBAAqB,EAAE;AAJzB;AAOAQ,QAAAA,sBAAsB,GAAGzB,CAAC,CAAC+C,MAAF,EAAzB;AAEA;AACD;;AAED;AACD,KA7CD,CA5Ic,CA2Ld;AACA;;;AACA/C,IAAAA,CAAC,CAACiD,IAAF,GAAS,YAAM;AACbjD,MAAAA,CAAC,CAACkD,UAAF,CAAapD,WAAW,CAACoD,UAAzB;AAEAlD,MAAAA,CAAC,CAACmD,QAAF,CAAWlD,UAAX;AAEAD,MAAAA,CAAC,CAACoD,QAAF,CAAW/B,aAAX;AAEArB,MAAAA,CAAC,CAACqD,SAAF,CAAYrD,CAAC,CAACsD,MAAd,EAAsBtD,CAAC,CAACsD,MAAxB;AAEAtD,MAAAA,CAAC,CAACuD,IAAF,WAAUzD,WAAW,CAAC0D,UAAtB;AACAxD,MAAAA,CAAC,CAACyD,YAAF,CAAe/B,WAAf;AACA1B,MAAAA,CAAC,CAAC0D,MAAF,CAAS5D,WAAW,CAACoD,UAArB;;AAEA,UAAItD,CAAC,IAAID,CAAT,EAAY;AACV;AACA;AACAU,QAAAA,UAAU,CAACC,GAAX,CAAe,UAACwC,MAAD,EAA8BtC,GAA9B,EAA8C;AAC3DR,UAAAA,CAAC,CAAC2D,KAAF,CAAQ,CAAR,EAAW,CAAX;AAEA,cAAIC,cAAc,GAAGC,IAAI,CAACC,MAAL,MAAiB,GAAtC;;AAEA,cAAIF,cAAJ,EAAoB;AAClBZ,YAAAA,YAAY,CAACF,MAAD,EAAOtC,GAAP,CAAZ;AACD;;AAED,cAAIoD,cAAc,IAAI5D,CAAC,CAAC+C,MAAF,KAAavB,uBAAb,GAAuC,IAA7D,EAAmE;AACjEqB,YAAAA,eAAe,CAACC,MAAD,EAAOtC,GAAP,CAAf;AACD;;AAED,cAAIuD,UAAoB,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAAClB,MAAI,CAACpC,KAAN,CAAL,CAAkBwD,IAAlB,EAAX,CAA3B;AAEAH,UAAAA,UAAU,GAAGA,UAAU,CAACzD,GAAX,CAAe,UAAC6D,WAAD,EAAyB;AACnD,mBAAOA,WAAW,GAAG,CAArB;AACD,WAFY,CAAb,CAf2D,CAmB3D;AACA;;AACAJ,UAAAA,UAAU,CAACzD,GAAX,CAAe,UAAC6D,WAAD,EAAsBC,IAAtB,EAAuC;AACpD,gBAAIC,aAAa,GAAG,KAAKvB,MAAI,CAACpC,KAAL,GAAa,IAAlB,CAApB;AAEA,gBAAI4D,qBAA6B,GAAG,IAApC;AACA,gBAAIC,sBAA8B,GAAG,IAArC;AAEA,gBAAIC,yBAAiC,GACnC1B,MAAI,CAACpC,KAAL,IAAc,CAAd,GACId,CAAC,GAAGqC,yCADR,GAEIZ,aAAa,GAAGiD,qBAAhB,GACCjD,aAAa,GAAGkD,sBAAjB,GAA2CH,IAJjD,CANoD,CAYpD;AACA;;AACA,gBAAIK,WAAqB,GAAGT,KAAK,CAACC,IAAN,CAAWD,KAAK,CAAClB,MAAI,CAACnC,MAAN,CAAL,CAAmBuD,IAAnB,EAAX,CAA5B,CAdoD,CAepD;;AAEAO,YAAAA,WAAW,GAAGA,WAAW,CAACnE,GAAZ,CAAgB,UAACoE,UAAD,EAAwB;AACpD,qBAAOA,UAAU,GAAG,CAApB;AACD,aAFa,CAAd,CAjBoD,CAqBpD;AACA;;AACAjD,YAAAA,sBAAsB,CAvB8B,CAyBpD;;AAEAgD,YAAAA,WAAW,CAACnE,GAAZ,CAAgB,UAACoE,UAAD,EAAqBC,KAArB,EAAuC;AACrD;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,kBAAIC,mBAAmB,GACrB1C,6BAA6B,CAAC1B,GAAD,CAA7B,GAAqCmB,YAAY,GAAG+C,UADtD;AAGA,kBAAIG,iBAAiB,GACnBL,yBAAyB,GAAG7C,YAAY,GAAG+C,UAD7C;AAGA1E,cAAAA,CAAC,CAAC8E,IAAF;AACA9E,cAAAA,CAAC,CAAC2D,KAAF,CAAQ,CAAR,EAAWU,aAAX;AACArE,cAAAA,CAAC,CAACE,IAAF,CAAO4C,MAAI,CAACrC,MAAZ,EAAoBmE,mBAApB,EAAyCC,iBAAzC;AACA7E,cAAAA,CAAC,CAAC+E,GAAF;AACD,aA1BD;AA2BD,WAtDD;AAuDD,SA5ED;AA6ED;AACF,KA9FD;;AAgGA/E,IAAAA,CAAC,CAACgF,aAAF,GAAkB,YAAM;AACtBhF,MAAAA,CAAC,CAACiF,YAAF,CAAetF,CAAf,EAAkBC,CAAlB;AACD,KAFD;AAGD,GAtSqD;AAAA,CAAtD;;AAwSA,eAAeF,mBAAf","sourcesContent":["/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n\nimport p5, { Font } from \"p5\";\nimport { LXLT_ColorTheme } from \"../../constants/styles/Color\";\nimport { ThreeCanvas } from \"../three/with-canvas-as-texture\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_DharmaCanvas = {\n  W: number;\n  H: number;\n  ID: number;\n  BG: LXLT_ColorTheme;\n  parentEl: HTMLDivElement;\n};\n\nexport type LXLT_DharmaCanvasDisplay = (\n  W: number,\n  H: number,\n  ID: number,\n  BG: LXLT_ColorTheme,\n  parentEl: HTMLDivElement\n) => (p: p5) => void;\n\ntype LXLT_DharmaCanvasChar = {\n  letter: string;\n  count: number;\n  idx: number;\n\n  copies: number;\n  copiesLastVisible: number;\n  copiesAreVisible: boolean;\n\n  copiesAreIncrementing: boolean;\n  copiesAreDecrementing: boolean;\n\n  countIsIncrementing: boolean;\n  countIsDecrementing: boolean;\n};\n\nconst DharmaCanvasDisplay: LXLT_DharmaCanvasDisplay = (\n  W,\n  H,\n  ID,\n  DharmaTheme,\n  parentEl\n) => (p: p5) => {\n  // _________________________________________________\n  // Config\n\n  // ____________________________\n  // Fonts\n  let dharmaFont: Font;\n\n  // ____________________________\n  // Typography\n  let text = \"LAXALT\";\n\n  let splitCharacterArray = text.split(\"\");\n  let characters: LXLT_DharmaCanvasChar[] = splitCharacterArray.map(\n    (character: string, idx: number) => {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n\n        copies: 5,\n        copiesLastVisible: 0,\n        copiesAreVisible: false,\n\n        countIsIncrementing: true,\n        countIsDecrementing: false,\n\n        copiesAreIncrementing: true,\n        copiesAreDecrementing: false,\n      };\n    }\n  );\n\n  let characterCount: number = splitCharacterArray.length;\n  let characterWidth: number = W / characterCount;\n  let characterSize: number = H * 1.25;\n\n  console.log(characterSize, \"characterSize\");\n\n  // ____________________________\n  // Counts\n  // let renderCount: number = 0;\n  let previousCountUpdateTime: number = 0;\n  let previousCopyUpdateTime: number = 0;\n\n  // ____________________________\n  // Strokes\n  let strokeWidth: number = 4;\n  let strokeOffset: number = strokeWidth * 1.5;\n\n  // ____________________________\n  // Limits\n  let maxCount = 3;\n  let minCount = 1;\n\n  let maxCopies = 12;\n  let minCopies = 1;\n\n  let frameRate = 10;\n\n  // ____________________________\n  // Translation\n  // let previousVerticalTranslation: number = H / 2.25;\n\n  let verticalTranslationWhitespaceCompensation: number = 2.25;\n  const previousHorizontalTranslation = (idx: number) =>\n    -60 + (characterWidth * idx + characterWidth / 1.5 + strokeOffset);\n\n  // _________________________________________________\n  // Preload\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  };\n\n  // _________________________________________________\n  // Setup\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H);\n\n    ThreeCanvas(\n      this.threeRootElement.el,\n      this.state.canvasElement,\n      this.props.colorThemeContext\n    );\n\n    p.frameRate(frameRate);\n  };\n\n  // _________________________________________________\n  // Update Character\n  const updateCharacter = (char: LXLT_DharmaCanvasChar, idx: number) => {\n    if (char.count < maxCount && char.countIsIncrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count + 1,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    } else if (char.count === maxCount) {\n      characters[idx] = {\n        ...char,\n        count: char.count - 1,\n        countIsIncrementing: false,\n        countIsDecrementing: true,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    } else if (char.count > minCount && char.countIsDecrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count - 1,\n        countIsDecrementing: true,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    } else if (char.count === minCount && char.countIsDecrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count + 1,\n        countIsIncrementing: true,\n        countIsDecrementing: false,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    }\n\n    return;\n  };\n\n  // _________________________________________________\n  // Update Copies\n  const updateCopies = (char: LXLT_DharmaCanvasChar, idx: number) => {\n    if (char.copies < maxCopies && char.copiesAreIncrementing) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies + 1,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    } else if (char.copies === maxCopies) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies - 1,\n        copiesAreIncrementing: false,\n        copiesAreDecrementing: true,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    } else if (char.copies > minCopies && char.copiesAreDecrementing) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies - 1,\n        copiesAreDecrementing: true,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    } else if (char.copies === minCopies && char.copiesAreDecrementing) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies + 1,\n        copiesAreIncrementing: true,\n        copiesAreDecrementing: false,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    }\n\n    return;\n  };\n\n  // _________________________________________________\n  // Draw\n  p.draw = () => {\n    p.background(DharmaTheme.background);\n\n    p.textFont(dharmaFont);\n\n    p.textSize(characterSize);\n\n    p.textAlign(p.CENTER, p.CENTER);\n\n    p.fill(`${DharmaTheme.foreground}`);\n    p.strokeWeight(strokeWidth);\n    p.stroke(DharmaTheme.background);\n\n    if (H && W) {\n      // _________________________________________\n      // Loop through our copies\n      characters.map((char: LXLT_DharmaCanvasChar, idx: number) => {\n        p.scale(1, 1);\n\n        let randomCharPick = Math.random() <= 0.5;\n\n        if (randomCharPick) {\n          updateCopies(char, idx);\n        }\n\n        if (randomCharPick && p.millis() - previousCountUpdateTime > 3000) {\n          updateCharacter(char, idx);\n        }\n\n        let countArray: number[] = Array.from(Array(char.count).keys());\n\n        countArray = countArray.map((countNumber: number) => {\n          return countNumber + 1;\n        });\n\n        // _________________________________________\n        // Duplicate positions\n        countArray.map((countNumber: number, idxx: number) => {\n          let verticalScale = 1 / (char.count * 0.95);\n\n          let verticalSkewDivisible: number = 2.75;\n          let characterSkewDivisible: number = 1.36;\n\n          let duplicateVerticalPosition: number =\n            char.count == 1\n              ? H / verticalTranslationWhitespaceCompensation\n              : characterSize / verticalSkewDivisible +\n                (characterSize / characterSkewDivisible) * idxx;\n\n          // _________________________________________\n          // Make copies\n          let copiesArray: number[] = Array.from(Array(char.copies).keys());\n          // let randomCopyPick = Math.random() <= 0.5;\n\n          copiesArray = copiesArray.map((copyNumber: number) => {\n            return copyNumber + 1;\n          });\n\n          // let randomCopyPick = Math.random() <= 0.5;\n          // let copyTimer = p.millis() - previousCopiesVisibleTime > 2000;\n          previousCopyUpdateTime;\n\n          // let isFirstCount = true;\n\n          copiesArray.map((copyNumber: number, idxxx: number) => {\n            // let centerCoordsX = W / 2;\n            // let centerCoordsY = H / 2;\n\n            // let horizontalTranslate =\n            //   copyNumber !== 1\n            //     ? (previousHorizontalTranslation(idx) +\n            //         (strokeOffset / (p.mouseX / 100)) * copyNumber)\n            //     : previousHorizontalTranslation(idx) +\n            //       strokeOffset * copyNumber;\n\n            // let verticalTranslate =\n            //   copyNumber !== 1\n            //     ? (duplicateVerticalPosition - (strokeOffset / (p.mouseX / 100)) * copyNumber)\n            //     : duplicateVerticalPosition - strokeOffset * copyNumber;\n\n            let horizontalTranslate =\n              previousHorizontalTranslation(idx) + strokeOffset * copyNumber;\n\n            let verticalTranslate =\n              duplicateVerticalPosition - strokeOffset * copyNumber;\n\n            p.push();\n            p.scale(1, verticalScale);\n            p.text(char.letter, horizontalTranslate, verticalTranslate);\n            p.pop();\n          });\n        });\n      });\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;\n"]},"metadata":{},"sourceType":"module"}