{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Core\nimport * as THREE from \"three\"; // Settings\n\n// Textures\nimport { EffectComposer, RenderPass, EffectPass } from \"postprocessing\"; // Textures\n\nimport { TouchTexture } from \"./water-distort/TouchTexture\";\nimport WaterEffect from \"./water-distort/WaterEffect\"; // Begin Component\n// __________________________________________________________________________\n\nexport class ThreeWaterCanvasClass {\n  // ______________________________\n  // Types\n  // ______________________________\n  // Constructor\n  constructor(options) {\n    _defineProperty(this, \"touchTexture\", void 0);\n\n    _defineProperty(this, \"waterEffect\", void 0);\n\n    _defineProperty(this, \"renderer\", void 0);\n\n    _defineProperty(this, \"camera\", void 0);\n\n    _defineProperty(this, \"scene\", void 0);\n\n    _defineProperty(this, \"composer\", void 0);\n\n    _defineProperty(this, \"clock\", void 0);\n\n    _defineProperty(this, \"material\", void 0);\n\n    _defineProperty(this, \"mesh\", void 0);\n\n    _defineProperty(this, \"canvasElement\", void 0);\n\n    this.touchTexture = new TouchTexture({\n      debug: false\n    });\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: false\n    });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    options.canvasContainer.append(this.renderer.domElement);\n    this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 10000);\n    this.camera.position.z = 50;\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(0xffffff);\n    this.canvasElement = options.canvasElement;\n    this.tick = this.tick.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this); // Post Processing\n\n    this.composer = new EffectComposer(this.renderer);\n    this.clock = new THREE.Clock();\n    this.init();\n  }\n\n  initComposer() {\n    const renderPass = new RenderPass(this.scene, this.camera);\n    this.waterEffect = new WaterEffect({\n      texture: this.touchTexture.texture\n    });\n    const waterPass = new EffectPass(this.camera, this.waterEffect);\n    renderPass.renderToScreen = false;\n    waterPass.renderToScreen = true;\n    this.composer.addPass(renderPass);\n    this.composer.addPass(waterPass);\n  }\n\n  addPlane() {\n    let geometry = new THREE.PlaneBufferGeometry(30, 30, 1, 1);\n    let material = new THREE.MeshNormalMaterial();\n    let mesh = new THREE.Mesh(geometry, material);\n    window.addEventListener(\"mousemove\", this.onMouseMove);\n    this.scene.add(mesh);\n  }\n\n  init() {\n    this.initComposer();\n    this.addPlane();\n    this.tick();\n  }\n\n  onMouseMove(ev) {\n    const point = {\n      x: ev.clientX / window.innerWidth,\n      y: ev.clientY / window.innerHeight\n    };\n    this.touchTexture.addPoint(point);\n  }\n\n  render() {\n    this.composer.render(this.clock.getDelta());\n  }\n\n  tick() {\n    this.render();\n    this.touchTexture.update();\n    requestAnimationFrame(this.tick);\n  }\n\n}\nexport const ThreeWaterCanvas = (canvasContainer, canvasElement, canvasTheme) => {\n  const myWaterCanvas = new ThreeWaterCanvasClass({\n    canvasContainer,\n    canvasElement,\n    canvasTheme\n  });\n  return myWaterCanvas;\n}; // // ______________________________________________________________________________________________________________\n// export type LXLT_ThreeCanvasDisplay = (\n//   container: HTMLDivElement,\n//   CanvasElement: HTMLCanvasElement,\n//   CanvasTheme: LXLT_ColorTheme\n// ) => void;\n// export const ThreeCanvas: LXLT_ThreeCanvasDisplay = (\n//   container,\n//   CanvasElement,\n//   CanvasTheme\n// ) => {\n//   __DEBUG__ && console.log(\"ðŸ¤™ Three.js Canvas received:\", CanvasElement);\n//   let camera, scene, renderer, mesh, material, sketch;\n//   init();\n//   setupCanvasDrawing();\n//   animate();\n//   function init() {\n//     camera = new THREE.PerspectiveCamera(\n//       50,\n//       window.innerWidth / window.innerHeight,\n//       1,\n//       6000\n//     );\n//     camera.position.z = 500;\n//     sketch = container;\n//     scene = new THREE.Scene();\n//     material = new THREE.MeshBasicMaterial();\n//     mesh = new THREE.Mesh(new THREE.BoxBufferGeometry(350, 350, 350), material);\n//     scene.add(mesh);\n//     renderer = new THREE.WebGLRenderer({ antialias: false, alpha: true });\n//     renderer.setPixelRatio(window.devicePixelRatio);\n//     renderer.setSize(window.innerWidth, window.innerHeight);\n//     sketch.appendChild(renderer.domElement);\n//     scene.background = new THREE.Color(0x000000);\n//     window.addEventListener(\"resize\", onWindowResize, false);\n//   }\n//   function setupCanvasDrawing() {\n//     material.map = new THREE.CanvasTexture(CanvasElement);\n//   }\n//   function onWindowResize() {\n//     camera.aspect = window.innerWidth / window.innerHeight;\n//     camera.updateProjectionMatrix();\n//     renderer.setSize(window.innerWidth, window.innerHeight);\n//   }\n//   function animate() {\n//     requestAnimationFrame(animate);\n//     mesh.rotation.x += 0.01;\n//     mesh.rotation.y += 0.01;\n//     material.map.needsUpdate = true;\n//     renderer.render(scene, camera);\n//   }\n// };","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/three/three-water-distort.canvas.ts"],"names":["THREE","EffectComposer","RenderPass","EffectPass","TouchTexture","WaterEffect","ThreeWaterCanvasClass","constructor","options","touchTexture","debug","renderer","WebGLRenderer","antialias","setSize","window","innerWidth","innerHeight","setPixelRatio","devicePixelRatio","canvasContainer","append","domElement","camera","PerspectiveCamera","position","z","scene","Scene","background","Color","canvasElement","tick","bind","onMouseMove","composer","clock","Clock","init","initComposer","renderPass","waterEffect","texture","waterPass","renderToScreen","addPass","addPlane","geometry","PlaneBufferGeometry","material","MeshNormalMaterial","mesh","Mesh","addEventListener","add","ev","point","x","clientX","y","clientY","addPoint","render","getDelta","update","requestAnimationFrame","ThreeWaterCanvas","canvasTheme","myWaterCanvas"],"mappings":"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","sourcesContent":["// Core\nimport * as THREE from \"three\";\n\n// Settings\nimport { __DEBUG__ } from \"../../constants/site/Settings\";\n\n// Types\nimport { LXLT_ColorTheme } from \"../../constants/styles/Color\";\n\n// Textures\nimport { EffectComposer, RenderPass, EffectPass } from \"postprocessing\";\n\n// Textures\nimport {\n  LXLT_TouchTexturePoint,\n  TouchTexture,\n} from \"./water-distort/TouchTexture\";\nimport WaterEffect from \"./water-distort/WaterEffect\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_ThreeWaterCanvas = {\n  canvasContainer: HTMLDivElement;\n  canvasElement: HTMLCanvasElement;\n  canvasTheme: LXLT_ColorTheme;\n};\n\nexport class ThreeWaterCanvasClass {\n  // ______________________________\n  // Types\n  touchTexture: TouchTexture;\n  waterEffect: WaterEffect;\n  renderer: THREE.WebGLRenderer;\n  camera: THREE.PerspectiveCamera;\n  scene: THREE.Scene;\n  composer: any;\n  clock: THREE.Clock;\n  material: THREE.MeshBasicMaterial;\n  mesh: THREE.Mesh;\n  canvasElement: HTMLCanvasElement;\n\n  // ______________________________\n  // Constructor\n  constructor(options: LXLT_ThreeWaterCanvas) {\n    this.touchTexture = new TouchTexture({ debug: false });\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: false,\n    });\n\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n\n    options.canvasContainer.append(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(\n      45,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      10000\n    );\n    this.camera.position.z = 50;\n\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(0xffffff);\n\n    this.canvasElement = options.canvasElement;\n\n    this.tick = this.tick.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n\n    // Post Processing\n    this.composer = new EffectComposer(this.renderer);\n    this.clock = new THREE.Clock();\n\n    this.init();\n  }\n\n  initComposer() {\n    const renderPass = new RenderPass(this.scene, this.camera);\n\n    this.waterEffect = new WaterEffect({ texture: this.touchTexture.texture });\n\n    const waterPass = new EffectPass(this.camera, this.waterEffect);\n\n    renderPass.renderToScreen = false;\n    waterPass.renderToScreen = true;\n    this.composer.addPass(renderPass);\n    this.composer.addPass(waterPass);\n  }\n\n  addPlane() {\n    let geometry = new THREE.PlaneBufferGeometry(30, 30, 1, 1);\n    let material = new THREE.MeshNormalMaterial();\n    let mesh = new THREE.Mesh(geometry, material);\n\n    window.addEventListener(\"mousemove\", this.onMouseMove);\n    this.scene.add(mesh);\n  }\n\n  init() {\n    this.initComposer();\n    this.addPlane();\n    this.tick();\n  }\n\n  onMouseMove(ev: MouseEvent) {\n    const point: LXLT_TouchTexturePoint = {\n      x: ev.clientX / window.innerWidth,\n      y: ev.clientY / window.innerHeight,\n    };\n    this.touchTexture.addPoint(point);\n  }\n\n  render() {\n    this.composer.render(this.clock.getDelta());\n  }\n\n  tick() {\n    this.render();\n    this.touchTexture.update();\n\n    requestAnimationFrame(this.tick);\n  }\n}\n\nexport const ThreeWaterCanvas = (\n  canvasContainer: HTMLDivElement,\n  canvasElement: HTMLCanvasElement,\n  canvasTheme: LXLT_ColorTheme\n): ThreeWaterCanvasClass => {\n  const myWaterCanvas = new ThreeWaterCanvasClass({\n    canvasContainer,\n    canvasElement,\n    canvasTheme,\n  });\n\n  return myWaterCanvas;\n};\n\n// // ______________________________________________________________________________________________________________\n\n// export type LXLT_ThreeCanvasDisplay = (\n//   container: HTMLDivElement,\n//   CanvasElement: HTMLCanvasElement,\n//   CanvasTheme: LXLT_ColorTheme\n// ) => void;\n\n// export const ThreeCanvas: LXLT_ThreeCanvasDisplay = (\n//   container,\n//   CanvasElement,\n//   CanvasTheme\n// ) => {\n//   __DEBUG__ && console.log(\"ðŸ¤™ Three.js Canvas received:\", CanvasElement);\n\n//   let camera, scene, renderer, mesh, material, sketch;\n\n//   init();\n//   setupCanvasDrawing();\n//   animate();\n\n//   function init() {\n//     camera = new THREE.PerspectiveCamera(\n//       50,\n//       window.innerWidth / window.innerHeight,\n//       1,\n//       6000\n//     );\n//     camera.position.z = 500;\n\n//     sketch = container;\n\n//     scene = new THREE.Scene();\n\n//     material = new THREE.MeshBasicMaterial();\n\n//     mesh = new THREE.Mesh(new THREE.BoxBufferGeometry(350, 350, 350), material);\n//     scene.add(mesh);\n\n//     renderer = new THREE.WebGLRenderer({ antialias: false, alpha: true });\n//     renderer.setPixelRatio(window.devicePixelRatio);\n//     renderer.setSize(window.innerWidth, window.innerHeight);\n//     sketch.appendChild(renderer.domElement);\n\n//     scene.background = new THREE.Color(0x000000);\n\n//     window.addEventListener(\"resize\", onWindowResize, false);\n//   }\n\n//   function setupCanvasDrawing() {\n//     material.map = new THREE.CanvasTexture(CanvasElement);\n//   }\n\n//   function onWindowResize() {\n//     camera.aspect = window.innerWidth / window.innerHeight;\n//     camera.updateProjectionMatrix();\n\n//     renderer.setSize(window.innerWidth, window.innerHeight);\n//   }\n\n//   function animate() {\n//     requestAnimationFrame(animate);\n\n//     mesh.rotation.x += 0.01;\n//     mesh.rotation.y += 0.01;\n\n//     material.map.needsUpdate = true;\n\n//     renderer.render(scene, camera);\n//   }\n// };\n"]},"metadata":{},"sourceType":"module"}