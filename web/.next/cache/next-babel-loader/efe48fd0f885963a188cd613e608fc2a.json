{"ast":null,"code":"/**\n *\n * Sin Wave Cone\n * @author Peter Laxalt\n * @description Simple Sin Wave Cone in p5.js\n *\n */\n// Begin Component\n//////////////////////////////////////////////////////////////////////\nexport default ((W, H) => p => {\n  // Variables\n  let color = {\n    primary: \"red\",\n    primaryAlpha: \"red\",\n    secondary: \"cyan\",\n    bg: \"blue\",\n    white: \"#ffffff\"\n  };\n  let coordinates = []; // Setup\n\n  p.setup = () => {\n    p.createCanvas(W, H, p.WEBGL);\n    let gutter = 20;\n    let countX = p.ceil(p.width / gutter) + 1;\n    let countY = p.ceil(p.height / gutter) + 1;\n\n    for (let j = 0; j < countY; j++) {\n      for (let i = 0; i < countX; i++) {\n        coordinates.push(new p.p5.Vector(gutter * i, gutter * j));\n      }\n    }\n\n    p.noFill();\n    p.stroke(color.secondary);\n  }; // Draw Loop\n\n\n  p.draw = () => {\n    p.background(color.bg);\n\n    for (let i = coordinates.length - 1; i >= 0; i--) {\n      let h = calcVec(coordinates[i].x - p.mouseX, coordinates[i].y - p.mouseY);\n      p.line(coordinates[i].x, coordinates[i].y, coordinates[i].x + 15 * p.cos(h.heading()), coordinates[i].y + 15 * p.sin(h.heading()));\n    }\n  };\n\n  const calcVec = (x, y) => {\n    return new p.p5.Vector(y - x, -x - y);\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n    p.background(\"yellow\");\n  };\n});","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/d3.tsx"],"names":["W","H","p","color","primary","primaryAlpha","secondary","bg","white","coordinates","setup","createCanvas","WEBGL","gutter","countX","ceil","width","countY","height","j","i","push","p5","Vector","noFill","stroke","draw","background","length","h","calcVec","x","mouseX","y","mouseY","line","cos","heading","sin","windowResized","resizeCanvas"],"mappings":"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","sourcesContent":["/**\n *\n * Sin Wave Cone\n * @author Peter Laxalt\n * @description Simple Sin Wave Cone in p5.js\n *\n */\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport default (W: any, H: any) => (p: any) => {\n  // Variables\n  let color = {\n    primary: \"red\",\n    primaryAlpha: \"red\",\n    secondary: \"cyan\",\n    bg: \"blue\",\n    white: \"#ffffff\"\n  };\n\n  let coordinates: any[] = [];\n\n  // Setup\n  p.setup = () => {\n    p.createCanvas(W, H, p.WEBGL);\n\n    let gutter = 20;\n    let countX = p.ceil(p.width / gutter) + 1;\n    let countY = p.ceil(p.height / gutter) + 1;\n\n    for (let j = 0; j < countY; j++) {\n      for (let i = 0; i < countX; i++) {\n        coordinates.push(new p.p5.Vector(gutter * i, gutter * j));\n      }\n    }\n\n    p.noFill();\n    p.stroke(color.secondary);\n  };\n\n  // Draw Loop\n  p.draw = () => {\n    p.background(color.bg);\n    for (let i = coordinates.length - 1; i >= 0; i--) {\n      let h = calcVec(coordinates[i].x - p.mouseX, coordinates[i].y - p.mouseY);\n      p.line(\n        coordinates[i].x,\n        coordinates[i].y,\n        coordinates[i].x + 15 * p.cos(h.heading()),\n        coordinates[i].y + 15 * p.sin(h.heading())\n      );\n    }\n  };\n\n  const calcVec = (x: number, y: number) => {\n    return new p.p5.Vector(y - x, -x - y);\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n    p.background(\"yellow\");\n  };\n};\n"]},"metadata":{},"sourceType":"module"}