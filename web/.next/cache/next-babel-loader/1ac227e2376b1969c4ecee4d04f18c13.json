{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/pflaxalt/Repositories/_pfl/web/components/ThemePicker/ThemePicker.tsx\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      \", \"\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n// Core\nimport React from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { CssUtils } from \"../../constants/styles/CssUtils\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemePickerClassName, ThemePickerStyle } from \"./styles.scss\"; // Begin Types\n// __________________________________________________________________________________________\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemePicker\n * @author Peter Laxalt\n *\n */\nexport var ThemePicker =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(ThemePicker, _React$PureComponent);\n\n  function ThemePicker(props) {\n    var _this;\n\n    _classCallCheck(this, ThemePicker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ThemePicker).call(this, props));\n    _this.state = {\n      activeTheme: {\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Foreground\n      },\n      availableThemes: [{\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Foreground\n      }, {\n        name: \"lightcyan\",\n        primary: Theme.Color.Galaxy,\n        secondary: Theme.Color.Galaxy,\n        background: \"lightcyan\",\n        foreground: Theme.Color.Galaxy\n      }, {\n        name: \"goldenrod\",\n        primary: Theme.Color.Galaxy,\n        secondary: Theme.Color.Galaxy,\n        background: \"goldenrod\",\n        foreground: Theme.Color.Galaxy\n      }, {\n        name: \"honeydew\",\n        primary: Theme.Color.Galaxy,\n        secondary: Theme.Color.Galaxy,\n        background: \"honeydew\",\n        foreground: Theme.Color.Galaxy\n      }]\n    };\n    _this.setNewTheme = _this.setNewTheme.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ThemePicker, [{\n    key: \"setNewTheme\",\n    value: function setNewTheme(theme) {\n      this.setState({\n        activeTheme: theme\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          activeTheme = _this$state.activeTheme,\n          availableThemes = _this$state.availableThemes;\n      var SetGlobalTheme = createGlobalStyle(_templateObject(), activeTheme ? CssUtils.CreateTheme(activeTheme.primary, activeTheme.secondary, activeTheme.background, activeTheme.foreground) : \"\");\n      return __jsx(React.Fragment, null, activeTheme && activeTheme.name !== \"default\" ? __jsx(SetGlobalTheme, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }) : null, __jsx(ThemePickerStyle, {\n        className: \"\".concat(ThemePickerClassName),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, availableThemes ? availableThemes.map(function (themeItem, idx) {\n        return __jsx(\"div\", {\n          className: \"\".concat(ThemePickerClassName, \"__option \").concat(ThemePickerClassName, \"__option--\").concat(themeItem.name),\n          onClick: function onClick() {\n            return _this2.setNewTheme(themeItem);\n          },\n          key: idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        });\n      }) : null));\n    }\n  }]);\n\n  return ThemePicker;\n}(React.PureComponent);","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/components/ThemePicker/ThemePicker.tsx"],"names":["React","createGlobalStyle","CssUtils","Theme","ThemePickerClassName","ThemePickerStyle","ThemePicker","props","state","activeTheme","name","primary","Color","Primary","secondary","Secondary","background","Background","foreground","Foreground","availableThemes","Galaxy","setNewTheme","bind","theme","setState","SetGlobalTheme","CreateTheme","map","themeItem","idx","PureComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,QAAT,QAAyB,iCAAzB;AACA,SAASC,KAAT,QAAsB,uBAAtB;AACA,SAASC,oBAAT,EAA+BC,gBAA/B,QAAuD,eAAvD,C,CAEA;AACA;;AAiBA;AACA;;AAEA;;;;;AAKA,WAAaC,WAAb;AAAA;AAAA;AAAA;;AAIE,uBAAYC,KAAZ,EAAqC;AAAA;;AAAA;;AACnC,qFAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE;AACXC,QAAAA,IAAI,EAAE,SADK;AAEXC,QAAAA,OAAO,EAAER,KAAK,CAACS,KAAN,CAAYC,OAFV;AAGXC,QAAAA,SAAS,EAAEX,KAAK,CAACS,KAAN,CAAYG,SAHZ;AAIXC,QAAAA,UAAU,EAAEb,KAAK,CAACS,KAAN,CAAYK,UAJb;AAKXC,QAAAA,UAAU,EAAEf,KAAK,CAACS,KAAN,CAAYO;AALb,OADF;AAQXC,MAAAA,eAAe,EAAE,CACf;AACEV,QAAAA,IAAI,EAAE,SADR;AAEEC,QAAAA,OAAO,EAAER,KAAK,CAACS,KAAN,CAAYC,OAFvB;AAGEC,QAAAA,SAAS,EAAEX,KAAK,CAACS,KAAN,CAAYG,SAHzB;AAIEC,QAAAA,UAAU,EAAEb,KAAK,CAACS,KAAN,CAAYK,UAJ1B;AAKEC,QAAAA,UAAU,EAAEf,KAAK,CAACS,KAAN,CAAYO;AAL1B,OADe,EAQf;AACET,QAAAA,IAAI,EAAE,WADR;AAEEC,QAAAA,OAAO,EAAER,KAAK,CAACS,KAAN,CAAYS,MAFvB;AAGEP,QAAAA,SAAS,EAAEX,KAAK,CAACS,KAAN,CAAYS,MAHzB;AAIEL,QAAAA,UAAU,EAAE,WAJd;AAKEE,QAAAA,UAAU,EAAEf,KAAK,CAACS,KAAN,CAAYS;AAL1B,OARe,EAef;AACEX,QAAAA,IAAI,EAAE,WADR;AAEEC,QAAAA,OAAO,EAAER,KAAK,CAACS,KAAN,CAAYS,MAFvB;AAGEP,QAAAA,SAAS,EAAEX,KAAK,CAACS,KAAN,CAAYS,MAHzB;AAIEL,QAAAA,UAAU,EAAE,WAJd;AAKEE,QAAAA,UAAU,EAAEf,KAAK,CAACS,KAAN,CAAYS;AAL1B,OAfe,EAsBf;AACEX,QAAAA,IAAI,EAAE,UADR;AAEEC,QAAAA,OAAO,EAAER,KAAK,CAACS,KAAN,CAAYS,MAFvB;AAGEP,QAAAA,SAAS,EAAEX,KAAK,CAACS,KAAN,CAAYS,MAHzB;AAIEL,QAAAA,UAAU,EAAE,UAJd;AAKEE,QAAAA,UAAU,EAAEf,KAAK,CAACS,KAAN,CAAYS;AAL1B,OAtBe;AARN,KAAb;AAwCA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,+BAAnB;AA3CmC;AA4CpC;;AAhDH;AAAA;AAAA,gCAkDcC,KAlDd,EAkDiC;AAC7B,WAAKC,QAAL,CAAc;AACZhB,QAAAA,WAAW,EAAEe;AADD,OAAd;AAGD;AAtDH;AAAA;AAAA,6BAwDW;AAAA;;AAAA,wBACgC,KAAKhB,KADrC;AAAA,UACDC,WADC,eACDA,WADC;AAAA,UACYW,eADZ,eACYA,eADZ;AAGP,UAAMM,cAAc,GAAGzB,iBAAH,oBAEhBQ,WAAW,GACPP,QAAQ,CAACyB,WAAT,CACElB,WAAW,CAACE,OADd,EAEEF,WAAW,CAACK,SAFd,EAGEL,WAAW,CAACO,UAHd,EAIEP,WAAW,CAACS,UAJd,CADO,GAOP,EATY,CAApB;AAaA,aACE,4BACGT,WAAW,IAAIA,WAAW,CAACC,IAAZ,KAAqB,SAApC,GACC,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,GAEG,IAHN,EAIE,MAAC,gBAAD;AAAkB,QAAA,SAAS,YAAKN,oBAAL,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGgB,eAAe,GACZA,eAAe,CAACQ,GAAhB,CAAoB,UAACC,SAAD,EAAwBC,GAAxB,EAAwC;AAC1D,eACE;AACE,UAAA,SAAS,YAAK1B,oBAAL,sBAAqCA,oBAArC,uBAAsEyB,SAAS,CAACnB,IAAhF,CADX;AAEE,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACY,WAAL,CAAiBO,SAAjB,CAAN;AAAA,WAFX;AAGE,UAAA,GAAG,EAAEC,GAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,OARD,CADY,GAUZ,IAXN,CAJF,CADF;AAoBD;AA5FH;;AAAA;AAAA,EAAiC9B,KAAK,CAAC+B,aAAvC","sourcesContent":["// Core\nimport React from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { CssUtils } from \"../../constants/styles/CssUtils\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemePickerClassName, ThemePickerStyle } from \"./styles.scss\";\n\n// Begin Types\n// __________________________________________________________________________________________\n\ntype LXLT_ThemePicker = {};\n\ntype LXLT_Theme = {\n  name: \"default\" | \"lightcyan\" | \"goldenrod\" | \"honeydew\";\n  primary: string;\n  secondary: string;\n  background: string;\n  foreground: string;\n};\n\ntype LXLT_ThemePickerState = {\n  availableThemes: LXLT_Theme[];\n  activeTheme?: LXLT_Theme;\n};\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemePicker\n * @author Peter Laxalt\n *\n */\nexport class ThemePicker extends React.PureComponent<\n  LXLT_ThemePicker,\n  LXLT_ThemePickerState\n> {\n  constructor(props: LXLT_ThemePicker) {\n    super(props);\n\n    this.state = {\n      activeTheme: {\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Foreground,\n      },\n      availableThemes: [\n        {\n          name: \"default\",\n          primary: Theme.Color.Primary,\n          secondary: Theme.Color.Secondary,\n          background: Theme.Color.Background,\n          foreground: Theme.Color.Foreground,\n        },\n        {\n          name: \"lightcyan\",\n          primary: Theme.Color.Galaxy,\n          secondary: Theme.Color.Galaxy,\n          background: \"lightcyan\",\n          foreground: Theme.Color.Galaxy,\n        },\n        {\n          name: \"goldenrod\",\n          primary: Theme.Color.Galaxy,\n          secondary: Theme.Color.Galaxy,\n          background: \"goldenrod\",\n          foreground: Theme.Color.Galaxy,\n        },\n        {\n          name: \"honeydew\",\n          primary: Theme.Color.Galaxy,\n          secondary: Theme.Color.Galaxy,\n          background: \"honeydew\",\n          foreground: Theme.Color.Galaxy,\n        },\n      ],\n    };\n\n    this.setNewTheme = this.setNewTheme.bind(this);\n  }\n\n  setNewTheme(theme: LXLT_Theme) {\n    this.setState({\n      activeTheme: theme,\n    });\n  }\n\n  render() {\n    let { activeTheme, availableThemes } = this.state;\n\n    const SetGlobalTheme = createGlobalStyle`\n      ${\n        activeTheme\n          ? CssUtils.CreateTheme(\n              activeTheme.primary,\n              activeTheme.secondary,\n              activeTheme.background,\n              activeTheme.foreground\n            )\n          : \"\"\n      }\n    `;\n\n    return (\n      <>\n        {activeTheme && activeTheme.name !== \"default\" ? (\n          <SetGlobalTheme />\n        ) : null}\n        <ThemePickerStyle className={`${ThemePickerClassName}`}>\n          {availableThemes\n            ? availableThemes.map((themeItem: LXLT_Theme, idx: number) => {\n                return (\n                  <div\n                    className={`${ThemePickerClassName}__option ${ThemePickerClassName}__option--${themeItem.name}`}\n                    onClick={() => this.setNewTheme(themeItem)}\n                    key={idx}\n                  />\n                );\n              })\n            : null}\n        </ThemePickerStyle>\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}