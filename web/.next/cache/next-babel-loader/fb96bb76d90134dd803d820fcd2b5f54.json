{"ast":null,"code":"import * as THREE from \"three\";\nexport const ThreeCanvas = (container, CanvasTheme) => {\n  const canvas = document.querySelector(\"#defaultCanvas0\"); // @ts-ignore\n\n  const renderer = new THREE.WebGLRenderer({\n    canvas\n  });\n  const fov = 75;\n  const aspect = 2; // the canvas default\n\n  const near = 0.1;\n  const far = 5;\n  const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n  camera.position.z = 2;\n  const scene = new THREE.Scene();\n  const boxWidth = 1;\n  const boxHeight = 1;\n  const boxDepth = 1;\n  const geometry = new THREE.BoxGeometry(boxWidth, boxHeight, boxDepth);\n  const cubes = []; // just an array we can use to rotate the cubes\n  // @ts-ignore\n\n  const texture = new THREE.CanvasTexture(canvas);\n  const material = new THREE.MeshBasicMaterial({\n    map: texture\n  });\n  const cube = new THREE.Mesh(geometry, material);\n  scene.add(cube);\n  cubes.push(cube); // add to our list of cubes to rotate\n\n  function resizeRendererToDisplaySize(renderer) {\n    const canvas = renderer.domElement;\n    const width = canvas.clientWidth;\n    const height = canvas.clientHeight;\n    const needResize = canvas.width !== width || canvas.height !== height;\n\n    if (needResize) {\n      renderer.setSize(width, height, false);\n    }\n\n    return needResize;\n  }\n\n  function render(time) {\n    time *= 0.001;\n\n    if (resizeRendererToDisplaySize(renderer)) {\n      const canvas = renderer.domElement;\n      camera.aspect = canvas.clientWidth / canvas.clientHeight;\n      camera.updateProjectionMatrix();\n    }\n\n    texture.needsUpdate = true;\n    cubes.forEach((cube, ndx) => {\n      const speed = 0.2 + ndx * 0.1;\n      const rot = time * speed;\n      cube.rotation.x = rot;\n      cube.rotation.y = rot;\n    });\n    renderer.render(scene, camera);\n    requestAnimationFrame(render);\n  }\n\n  requestAnimationFrame(render);\n};","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/three/with-canvas-as-texture.ts"],"names":["THREE","ThreeCanvas","container","CanvasTheme","canvas","document","querySelector","renderer","WebGLRenderer","fov","aspect","near","far","camera","PerspectiveCamera","position","z","scene","Scene","boxWidth","boxHeight","boxDepth","geometry","BoxGeometry","cubes","texture","CanvasTexture","material","MeshBasicMaterial","map","cube","Mesh","add","push","resizeRendererToDisplaySize","domElement","width","clientWidth","height","clientHeight","needResize","setSize","render","time","updateProjectionMatrix","needsUpdate","forEach","ndx","speed","rot","rotation","x","y","requestAnimationFrame"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport { LXLT_ColorTheme } from \"../../constants/styles/Color\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_ThreeCanvasDisplay = (\n  container: HTMLDivElement,\n  CanvasTheme: LXLT_ColorTheme\n) => void;\n\nexport const ThreeCanvas: LXLT_ThreeCanvasDisplay = (\n  container,\n  CanvasTheme\n) => {\n  const canvas = document.querySelector(\"#defaultCanvas0\");\n  // @ts-ignore\n  const renderer = new THREE.WebGLRenderer({ canvas });\n\n  const fov = 75;\n  const aspect = 2; // the canvas default\n  const near = 0.1;\n  const far = 5;\n  const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n  camera.position.z = 2;\n\n  const scene = new THREE.Scene();\n\n  const boxWidth = 1;\n  const boxHeight = 1;\n  const boxDepth = 1;\n  const geometry = new THREE.BoxGeometry(boxWidth, boxHeight, boxDepth);\n\n  const cubes = []; // just an array we can use to rotate the cubes\n  // @ts-ignore\n  const texture = new THREE.CanvasTexture(canvas);\n\n  const material = new THREE.MeshBasicMaterial({\n    map: texture,\n  });\n  const cube = new THREE.Mesh(geometry, material);\n  scene.add(cube);\n  cubes.push(cube); // add to our list of cubes to rotate\n\n  function resizeRendererToDisplaySize(renderer) {\n    const canvas = renderer.domElement;\n    const width = canvas.clientWidth;\n    const height = canvas.clientHeight;\n    const needResize = canvas.width !== width || canvas.height !== height;\n    if (needResize) {\n      renderer.setSize(width, height, false);\n    }\n    return needResize;\n  }\n\n  function render(time) {\n    time *= 0.001;\n\n    if (resizeRendererToDisplaySize(renderer)) {\n      const canvas = renderer.domElement;\n      camera.aspect = canvas.clientWidth / canvas.clientHeight;\n      camera.updateProjectionMatrix();\n    }\n\n    texture.needsUpdate = true;\n\n    cubes.forEach((cube, ndx) => {\n      const speed = 0.2 + ndx * 0.1;\n      const rot = time * speed;\n      cube.rotation.x = rot;\n      cube.rotation.y = rot;\n    });\n\n    renderer.render(scene, camera);\n\n    requestAnimationFrame(render);\n  }\n\n  requestAnimationFrame(render);\n};\n"]},"metadata":{},"sourceType":"module"}