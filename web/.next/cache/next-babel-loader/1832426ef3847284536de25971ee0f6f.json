{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      \", \"\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n// Core\nimport React, { useContext } from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { ColorContext } from \"../../constants/styles/Color\";\nimport { CssUtils } from \"../../constants/styles/CssUtils\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemePickerClassName, ThemePickerStyle } from \"./styles.scss\"; // Begin Types\n// __________________________________________________________________________________________\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemePickerWithHook\n * @author Peter Laxalt\n *\n */\nexport var ThemePickerWithHook =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(ThemePickerWithHook, _React$PureComponent);\n\n  function ThemePickerWithHook(props) {\n    var _this;\n\n    _classCallCheck(this, ThemePickerWithHook);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ThemePickerWithHook).call(this, props));\n    _this.state = {\n      activeTheme: {\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Text\n      },\n      availableThemes: [{\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Primary\n      }, {\n        name: \"goldenrod\",\n        primary: \"#393349\",\n        secondary: \"#393349\",\n        background: \"#DAA520\",\n        foreground: \"#393349\"\n      }, {\n        name: \"cadetblue\",\n        primary: \"#FFF8DC\",\n        secondary: \"#FFF8DC\",\n        background: \"#5F9EA0\",\n        foreground: \"#FFF8DC\"\n      }, {\n        name: \"orangered\",\n        primary: \"#FFF8DC\",\n        secondary: \"#FFF8DC\",\n        background: \"#FF4500\",\n        foreground: \"#FFF8DC\"\n      }, {\n        name: \"white\",\n        primary: Theme.Color.Black,\n        secondary: Theme.Color.Black,\n        background: Theme.Color.White,\n        foreground: Theme.Color.Black\n      }, {\n        name: \"galaxy\",\n        primary: \"#FFF8DC\",\n        secondary: \"#FFF8DC\",\n        background: Theme.Color.Galaxy,\n        foreground: \"#FFF8DC\"\n      }]\n    };\n    _this.setNewTheme = _this.setNewTheme.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ThemePickerWithHook, [{\n    key: \"setNewTheme\",\n    value: function setNewTheme(theme) {\n      var setTheme = this.props.setTheme;\n      this.setState({\n        activeTheme: theme\n      });\n      setTheme(theme);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          activeTheme = _this$state.activeTheme,\n          availableThemes = _this$state.availableThemes;\n      var SetGlobalTheme = createGlobalStyle(_templateObject(), activeTheme ? CssUtils.CreateTheme(activeTheme.primary, activeTheme.secondary, activeTheme.background, activeTheme.foreground) : \"\");\n      return __jsx(React.Fragment, null, activeTheme && activeTheme.name !== \"default\" ? __jsx(SetGlobalTheme, null) : null, __jsx(ThemePickerStyle, {\n        className: \"\".concat(ThemePickerClassName)\n      }, availableThemes ? availableThemes.map(function (themeItem, idx) {\n        return __jsx(\"div\", {\n          className: \"\".concat(ThemePickerClassName, \"__option \").concat(ThemePickerClassName, \"__option--\").concat(themeItem.name === activeTheme.name ? \"active\" : \"inactive\"),\n          style: {\n            backgroundColor: themeItem.background\n          },\n          onClick: function onClick() {\n            return _this2.setNewTheme(themeItem);\n          },\n          key: idx\n        });\n      }) : null));\n    }\n  }]);\n\n  return ThemePickerWithHook;\n}(React.PureComponent);\nexport var ThemePicker = function ThemePicker() {\n  var _useContext = useContext(ColorContext),\n      setTheme = _useContext.setTheme;\n\n  return __jsx(ThemePickerWithHook, {\n    setTheme: setTheme\n  });\n};","map":null,"metadata":{},"sourceType":"module"}