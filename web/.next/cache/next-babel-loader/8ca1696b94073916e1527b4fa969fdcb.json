{"ast":null,"code":"import _classCallCheck from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n// Core\nimport * as THREE from \"three\"; // Settings\n\n// Textures\nimport { EffectComposer, RenderPass, EffectPass } from \"postprocessing\"; // Textures\n\nimport { TouchTexture } from \"./water-distort/TouchTexture\";\nimport WaterEffect from \"./water-distort/WaterEffect\"; // Begin Component\n// __________________________________________________________________________\n\nexport var ThreeWaterCanvasClass = /*#__PURE__*/function () {\n  // ______________________________\n  // Types\n  // ______________________________\n  // Constructor\n  function ThreeWaterCanvasClass(options) {\n    _classCallCheck(this, ThreeWaterCanvasClass);\n\n    _defineProperty(this, \"touchTexture\", void 0);\n\n    _defineProperty(this, \"waterEffect\", void 0);\n\n    _defineProperty(this, \"renderer\", void 0);\n\n    _defineProperty(this, \"camera\", void 0);\n\n    _defineProperty(this, \"scene\", void 0);\n\n    _defineProperty(this, \"composer\", void 0);\n\n    _defineProperty(this, \"clock\", void 0);\n\n    _defineProperty(this, \"material\", void 0);\n\n    _defineProperty(this, \"mesh\", void 0);\n\n    this.touchTexture = new TouchTexture({\n      debug: false\n    });\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: false\n    });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    options.canvasContainer.append(this.renderer.domElement);\n    this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 10000);\n    this.camera.position.z = 50;\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(0xFFFFFF);\n    this.material = new THREE.MeshBasicMaterial();\n    this.mesh = new THREE.Mesh(new THREE.BoxBufferGeometry(350, 350, 350), this.material);\n    this.material.map = new THREE.CanvasTexture(options.canvasElement);\n    this.scene.add(this.mesh);\n    this.tick = this.tick.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this); // Post Processing\n\n    this.composer = new EffectComposer(this.renderer);\n    this.clock = new THREE.Clock();\n    this.init();\n  }\n\n  _createClass(ThreeWaterCanvasClass, [{\n    key: \"initComposer\",\n    value: function initComposer() {\n      var renderPass = new RenderPass(this.scene, this.camera);\n      this.waterEffect = new WaterEffect({\n        texture: this.touchTexture.texture\n      });\n      var waterPass = new EffectPass(this.camera, this.waterEffect);\n      renderPass.renderToScreen = false;\n      waterPass.renderToScreen = true;\n      this.composer.addPass(renderPass);\n      this.composer.addPass(waterPass);\n    }\n  }, {\n    key: \"addPlane\",\n    value: function addPlane() {\n      var geometry = new THREE.PlaneBufferGeometry(30, 30, 1, 1);\n      var material = new THREE.MeshNormalMaterial();\n      var mesh = new THREE.Mesh(geometry, material);\n      window.addEventListener(\"mousemove\", this.onMouseMove);\n      this.scene.add(mesh);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      this.initComposer();\n      this.addPlane();\n      this.tick();\n    }\n  }, {\n    key: \"onMouseMove\",\n    value: function onMouseMove(ev) {\n      var point = {\n        x: ev.clientX / window.innerWidth,\n        y: ev.clientY / window.innerHeight\n      };\n      this.touchTexture.addPoint(point);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.composer.render(this.clock.getDelta());\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      this.render();\n      this.touchTexture.update();\n      this.mesh.rotation.x += 0.01;\n      this.mesh.rotation.y += 0.01;\n      requestAnimationFrame(this.tick);\n    }\n  }]);\n\n  return ThreeWaterCanvasClass;\n}();\nexport var ThreeWaterCanvas = function ThreeWaterCanvas(canvasContainer, canvasElement, canvasTheme) {\n  var myWaterCanvas = new ThreeWaterCanvasClass({\n    canvasContainer: canvasContainer,\n    canvasElement: canvasElement,\n    canvasTheme: canvasTheme\n  });\n  return myWaterCanvas;\n}; // // ______________________________________________________________________________________________________________\n// export type LXLT_ThreeCanvasDisplay = (\n//   container: HTMLDivElement,\n//   CanvasElement: HTMLCanvasElement,\n//   CanvasTheme: LXLT_ColorTheme\n// ) => void;\n// export const ThreeCanvas: LXLT_ThreeCanvasDisplay = (\n//   container,\n//   CanvasElement,\n//   CanvasTheme\n// ) => {\n//   __DEBUG__ && console.log(\"ðŸ¤™ Three.js Canvas received:\", CanvasElement);\n//   let camera, scene, renderer, mesh, material, sketch;\n//   init();\n//   setupCanvasDrawing();\n//   animate();\n//   function init() {\n//     camera = new THREE.PerspectiveCamera(\n//       50,\n//       window.innerWidth / window.innerHeight,\n//       1,\n//       6000\n//     );\n//     camera.position.z = 500;\n//     sketch = container;\n//     scene = new THREE.Scene();\n//     material = new THREE.MeshBasicMaterial();\n//     mesh = new THREE.Mesh(new THREE.BoxBufferGeometry(350, 350, 350), material);\n//     scene.add(mesh);\n//     renderer = new THREE.WebGLRenderer({ antialias: false, alpha: true });\n//     renderer.setPixelRatio(window.devicePixelRatio);\n//     renderer.setSize(window.innerWidth, window.innerHeight);\n//     sketch.appendChild(renderer.domElement);\n//     scene.background = new THREE.Color(0x000000);\n//     window.addEventListener(\"resize\", onWindowResize, false);\n//   }\n//   function setupCanvasDrawing() {\n//     material.map = new THREE.CanvasTexture(CanvasElement);\n//   }\n//   function onWindowResize() {\n//     camera.aspect = window.innerWidth / window.innerHeight;\n//     camera.updateProjectionMatrix();\n//     renderer.setSize(window.innerWidth, window.innerHeight);\n//   }\n//   function animate() {\n//     requestAnimationFrame(animate);\n//     mesh.rotation.x += 0.01;\n//     mesh.rotation.y += 0.01;\n//     material.map.needsUpdate = true;\n//     renderer.render(scene, camera);\n//   }\n// };\n\n_c = ThreeWaterCanvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreeWaterCanvas\");","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/three/three-water-distort.canvas.ts"],"names":["THREE","EffectComposer","RenderPass","EffectPass","TouchTexture","WaterEffect","ThreeWaterCanvasClass","options","touchTexture","debug","renderer","WebGLRenderer","antialias","setSize","window","innerWidth","innerHeight","setPixelRatio","devicePixelRatio","canvasContainer","append","domElement","camera","PerspectiveCamera","position","z","scene","Scene","background","Color","material","MeshBasicMaterial","mesh","Mesh","BoxBufferGeometry","map","CanvasTexture","canvasElement","add","tick","bind","onMouseMove","composer","clock","Clock","init","renderPass","waterEffect","texture","waterPass","renderToScreen","addPass","geometry","PlaneBufferGeometry","MeshNormalMaterial","addEventListener","initComposer","addPlane","ev","point","x","clientX","y","clientY","addPoint","render","getDelta","update","rotation","requestAnimationFrame","ThreeWaterCanvas","canvasTheme","myWaterCanvas"],"mappings":";;;AAAA;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB,C,CAEA;;AAMA;AACA,SAASC,cAAT,EAAyBC,UAAzB,EAAqCC,UAArC,QAAuD,gBAAvD,C,CAEA;;AACA,SAEEC,YAFF,QAGO,8BAHP;AAIA,OAAOC,WAAP,MAAwB,6BAAxB,C,CAEA;AACA;;AAQA,WAAaC,qBAAb;AACE;AACA;AAWA;AACA;AACA,iCAAYC,OAAZ,EAA4C;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAC1C,SAAKC,YAAL,GAAoB,IAAIJ,YAAJ,CAAiB;AAAEK,MAAAA,KAAK,EAAE;AAAT,KAAjB,CAApB;AAEA,SAAKC,QAAL,GAAgB,IAAIV,KAAK,CAACW,aAAV,CAAwB;AACtCC,MAAAA,SAAS,EAAE;AAD2B,KAAxB,CAAhB;AAIA,SAAKF,QAAL,CAAcG,OAAd,CAAsBC,MAAM,CAACC,UAA7B,EAAyCD,MAAM,CAACE,WAAhD;AACA,SAAKN,QAAL,CAAcO,aAAd,CAA4BH,MAAM,CAACI,gBAAnC;AAEAX,IAAAA,OAAO,CAACY,eAAR,CAAwBC,MAAxB,CAA+B,KAAKV,QAAL,CAAcW,UAA7C;AAEA,SAAKC,MAAL,GAAc,IAAItB,KAAK,CAACuB,iBAAV,CACZ,EADY,EAEZT,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAFf,EAGZ,GAHY,EAIZ,KAJY,CAAd;AAMA,SAAKM,MAAL,CAAYE,QAAZ,CAAqBC,CAArB,GAAyB,EAAzB;AAEA,SAAKC,KAAL,GAAa,IAAI1B,KAAK,CAAC2B,KAAV,EAAb;AACA,SAAKD,KAAL,CAAWE,UAAX,GAAwB,IAAI5B,KAAK,CAAC6B,KAAV,CAAgB,QAAhB,CAAxB;AAGA,SAAKC,QAAL,GAAgB,IAAI9B,KAAK,CAAC+B,iBAAV,EAAhB;AAEA,SAAKC,IAAL,GAAY,IAAIhC,KAAK,CAACiC,IAAV,CAAe,IAAIjC,KAAK,CAACkC,iBAAV,CAA4B,GAA5B,EAAiC,GAAjC,EAAsC,GAAtC,CAAf,EAA2D,KAAKJ,QAAhE,CAAZ;AAEA,SAAKA,QAAL,CAAcK,GAAd,GAAoB,IAAInC,KAAK,CAACoC,aAAV,CAAwB7B,OAAO,CAAC8B,aAAhC,CAApB;AAEA,SAAKX,KAAL,CAAWY,GAAX,CAAe,KAAKN,IAApB;AAEA,SAAKO,IAAL,GAAY,KAAKA,IAAL,CAAUC,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB,CAjC0C,CAmC1C;;AACA,SAAKE,QAAL,GAAgB,IAAIzC,cAAJ,CAAmB,KAAKS,QAAxB,CAAhB;AACA,SAAKiC,KAAL,GAAa,IAAI3C,KAAK,CAAC4C,KAAV,EAAb;AAEA,SAAKC,IAAL;AACD;;AAvDH;AAAA;AAAA,mCAyDiB;AACb,UAAMC,UAAU,GAAG,IAAI5C,UAAJ,CAAe,KAAKwB,KAApB,EAA2B,KAAKJ,MAAhC,CAAnB;AAEA,WAAKyB,WAAL,GAAmB,IAAI1C,WAAJ,CAAgB;AAAE2C,QAAAA,OAAO,EAAE,KAAKxC,YAAL,CAAkBwC;AAA7B,OAAhB,CAAnB;AAEA,UAAMC,SAAS,GAAG,IAAI9C,UAAJ,CAAe,KAAKmB,MAApB,EAA4B,KAAKyB,WAAjC,CAAlB;AAEAD,MAAAA,UAAU,CAACI,cAAX,GAA4B,KAA5B;AACAD,MAAAA,SAAS,CAACC,cAAV,GAA2B,IAA3B;AACA,WAAKR,QAAL,CAAcS,OAAd,CAAsBL,UAAtB;AACA,WAAKJ,QAAL,CAAcS,OAAd,CAAsBF,SAAtB;AACD;AApEH;AAAA;AAAA,+BAsEa;AACT,UAAIG,QAAQ,GAAG,IAAIpD,KAAK,CAACqD,mBAAV,CAA8B,EAA9B,EAAkC,EAAlC,EAAsC,CAAtC,EAAyC,CAAzC,CAAf;AACA,UAAIvB,QAAQ,GAAG,IAAI9B,KAAK,CAACsD,kBAAV,EAAf;AACA,UAAItB,IAAI,GAAG,IAAIhC,KAAK,CAACiC,IAAV,CAAemB,QAAf,EAAyBtB,QAAzB,CAAX;AAEAhB,MAAAA,MAAM,CAACyC,gBAAP,CAAwB,WAAxB,EAAqC,KAAKd,WAA1C;AACA,WAAKf,KAAL,CAAWY,GAAX,CAAeN,IAAf;AACD;AA7EH;AAAA;AAAA,2BA+ES;AACL,WAAKwB,YAAL;AACA,WAAKC,QAAL;AACA,WAAKlB,IAAL;AACD;AAnFH;AAAA;AAAA,gCAqFcmB,EArFd,EAqF8B;AAC1B,UAAMC,KAA6B,GAAG;AACpCC,QAAAA,CAAC,EAAEF,EAAE,CAACG,OAAH,GAAa/C,MAAM,CAACC,UADa;AAEpC+C,QAAAA,CAAC,EAAEJ,EAAE,CAACK,OAAH,GAAajD,MAAM,CAACE;AAFa,OAAtC;AAIA,WAAKR,YAAL,CAAkBwD,QAAlB,CAA2BL,KAA3B;AACD;AA3FH;AAAA;AAAA,6BA6FW;AACP,WAAKjB,QAAL,CAAcuB,MAAd,CAAqB,KAAKtB,KAAL,CAAWuB,QAAX,EAArB;AACD;AA/FH;AAAA;AAAA,2BAiGS;AACL,WAAKD,MAAL;AACA,WAAKzD,YAAL,CAAkB2D,MAAlB;AAEA,WAAKnC,IAAL,CAAUoC,QAAV,CAAmBR,CAAnB,IAAwB,IAAxB;AACA,WAAK5B,IAAL,CAAUoC,QAAV,CAAmBN,CAAnB,IAAwB,IAAxB;AAEAO,MAAAA,qBAAqB,CAAC,KAAK9B,IAAN,CAArB;AACD;AAzGH;;AAAA;AAAA;AA4GA,OAAO,IAAM+B,gBAAgB,GAAG,SAAnBA,gBAAmB,CAC9BnD,eAD8B,EAE9BkB,aAF8B,EAG9BkC,WAH8B,EAIJ;AAC1B,MAAMC,aAAa,GAAG,IAAIlE,qBAAJ,CAA0B;AAC9Ca,IAAAA,eAAe,EAAfA,eAD8C;AAE9CkB,IAAAA,aAAa,EAAbA,aAF8C;AAG9CkC,IAAAA,WAAW,EAAXA;AAH8C,GAA1B,CAAtB;AAMA,SAAOC,aAAP;AACD,CAZM,C,CAcP;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;;KApFaF,gB","sourcesContent":["// Core\nimport * as THREE from \"three\";\n\n// Settings\nimport { __DEBUG__ } from \"../../constants/site/Settings\";\n\n// Types\nimport { LXLT_ColorTheme } from \"../../constants/styles/Color\";\n\n// Textures\nimport { EffectComposer, RenderPass, EffectPass } from \"postprocessing\";\n\n// Textures\nimport {\n  LXLT_TouchTexturePoint,\n  TouchTexture,\n} from \"./water-distort/TouchTexture\";\nimport WaterEffect from \"./water-distort/WaterEffect\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_ThreeWaterCanvas = {\n  canvasContainer: HTMLDivElement;\n  canvasElement: HTMLCanvasElement;\n  canvasTheme: LXLT_ColorTheme;\n};\n\nexport class ThreeWaterCanvasClass {\n  // ______________________________\n  // Types\n  touchTexture: TouchTexture;\n  waterEffect: WaterEffect;\n  renderer: THREE.WebGLRenderer;\n  camera: THREE.PerspectiveCamera;\n  scene: THREE.Scene;\n  composer: any;\n  clock: THREE.Clock;\n  material: THREE.MeshBasicMaterial;\n  mesh: THREE.Mesh;\n\n  // ______________________________\n  // Constructor\n  constructor(options: LXLT_ThreeWaterCanvas) {\n    this.touchTexture = new TouchTexture({ debug: false });\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: false,\n    });\n\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n\n    options.canvasContainer.append(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(\n      45,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      10000\n    );\n    this.camera.position.z = 50;\n\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(0xFFFFFF);\n\n\n    this.material = new THREE.MeshBasicMaterial();\n\n    this.mesh = new THREE.Mesh(new THREE.BoxBufferGeometry(350, 350, 350), this.material);\n\n    this.material.map = new THREE.CanvasTexture(options.canvasElement);\n\n    this.scene.add(this.mesh);\n\n    this.tick = this.tick.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n\n    // Post Processing\n    this.composer = new EffectComposer(this.renderer);\n    this.clock = new THREE.Clock();\n\n    this.init();\n  }\n\n  initComposer() {\n    const renderPass = new RenderPass(this.scene, this.camera);\n\n    this.waterEffect = new WaterEffect({ texture: this.touchTexture.texture });\n\n    const waterPass = new EffectPass(this.camera, this.waterEffect);\n\n    renderPass.renderToScreen = false;\n    waterPass.renderToScreen = true;\n    this.composer.addPass(renderPass);\n    this.composer.addPass(waterPass);\n  }\n\n  addPlane() {\n    let geometry = new THREE.PlaneBufferGeometry(30, 30, 1, 1);\n    let material = new THREE.MeshNormalMaterial();\n    let mesh = new THREE.Mesh(geometry, material);\n\n    window.addEventListener(\"mousemove\", this.onMouseMove);\n    this.scene.add(mesh);\n  }\n\n  init() {\n    this.initComposer();\n    this.addPlane();\n    this.tick();\n  }\n\n  onMouseMove(ev: MouseEvent) {\n    const point: LXLT_TouchTexturePoint = {\n      x: ev.clientX / window.innerWidth,\n      y: ev.clientY / window.innerHeight,\n    };\n    this.touchTexture.addPoint(point);\n  }\n\n  render() {\n    this.composer.render(this.clock.getDelta());\n  }\n\n  tick() {\n    this.render();\n    this.touchTexture.update();\n\n    this.mesh.rotation.x += 0.01;\n    this.mesh.rotation.y += 0.01;\n\n    requestAnimationFrame(this.tick);\n  }\n}\n\nexport const ThreeWaterCanvas = (\n  canvasContainer: HTMLDivElement,\n  canvasElement: HTMLCanvasElement,\n  canvasTheme: LXLT_ColorTheme\n): ThreeWaterCanvasClass => {\n  const myWaterCanvas = new ThreeWaterCanvasClass({\n    canvasContainer,\n    canvasElement,\n    canvasTheme,\n  });\n\n  return myWaterCanvas;\n};\n\n// // ______________________________________________________________________________________________________________\n\n// export type LXLT_ThreeCanvasDisplay = (\n//   container: HTMLDivElement,\n//   CanvasElement: HTMLCanvasElement,\n//   CanvasTheme: LXLT_ColorTheme\n// ) => void;\n\n// export const ThreeCanvas: LXLT_ThreeCanvasDisplay = (\n//   container,\n//   CanvasElement,\n//   CanvasTheme\n// ) => {\n//   __DEBUG__ && console.log(\"ðŸ¤™ Three.js Canvas received:\", CanvasElement);\n\n//   let camera, scene, renderer, mesh, material, sketch;\n\n//   init();\n//   setupCanvasDrawing();\n//   animate();\n\n//   function init() {\n//     camera = new THREE.PerspectiveCamera(\n//       50,\n//       window.innerWidth / window.innerHeight,\n//       1,\n//       6000\n//     );\n//     camera.position.z = 500;\n\n//     sketch = container;\n\n//     scene = new THREE.Scene();\n\n//     material = new THREE.MeshBasicMaterial();\n\n//     mesh = new THREE.Mesh(new THREE.BoxBufferGeometry(350, 350, 350), material);\n//     scene.add(mesh);\n\n//     renderer = new THREE.WebGLRenderer({ antialias: false, alpha: true });\n//     renderer.setPixelRatio(window.devicePixelRatio);\n//     renderer.setSize(window.innerWidth, window.innerHeight);\n//     sketch.appendChild(renderer.domElement);\n\n//     scene.background = new THREE.Color(0x000000);\n\n//     window.addEventListener(\"resize\", onWindowResize, false);\n//   }\n\n//   function setupCanvasDrawing() {\n//     material.map = new THREE.CanvasTexture(CanvasElement);\n//   }\n\n//   function onWindowResize() {\n//     camera.aspect = window.innerWidth / window.innerHeight;\n//     camera.updateProjectionMatrix();\n\n//     renderer.setSize(window.innerWidth, window.innerHeight);\n//   }\n\n//   function animate() {\n//     requestAnimationFrame(animate);\n\n//     mesh.rotation.x += 0.01;\n//     mesh.rotation.y += 0.01;\n\n//     material.map.needsUpdate = true;\n\n//     renderer.render(scene, camera);\n//   }\n// };\n"]},"metadata":{},"sourceType":"module"}