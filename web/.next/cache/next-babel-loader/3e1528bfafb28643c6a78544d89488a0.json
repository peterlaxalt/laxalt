{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\nimport { Theme } from \"../../constants/Theme\"; // Begin Component\n// __________________________________________________________________________\n\nvar DharmaCanvasDisplay = function DharmaCanvasDisplay(W, H, ID, BG) {\n  return function (p) {\n    // _________________________________________________\n    // Config\n    // ____________________________\n    // Fonts\n    var dharmaFont; // ____________________________\n    // Typography\n\n    var text = \"LAXALT\";\n    var splitCharacterArray = text.split(\"\");\n    var characters = splitCharacterArray.map(function (character, idx) {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n        copies: 5,\n        countIsIncrementing: true,\n        countIsDecrementing: false,\n        copiesAreIncrementing: true,\n        copiesAreDecrementing: false\n      };\n    });\n    var characterCount = splitCharacterArray.length;\n    var characterWidth = W / characterCount;\n    var characterSize = H * 1.25;\n    console.log(characterSize, \"characterSize\"); // ____________________________\n    // Counts\n    // let renderCount: number = 0;\n\n    var previousCountUpdateTime = 0;\n    var previousCopyUpdateTime = 0; // ____________________________\n    // Strokes\n\n    var strokeWidth = 4;\n    var strokeOffset = strokeWidth * 1.5; // ____________________________\n    // Limits\n\n    var maxCount = 6;\n    var minCount = 1;\n    var maxCopies = 12;\n    var minCopies = 1; // ____________________________\n    // Translation\n    // let previousVerticalTranslation: number = H / 2.25;\n\n    var verticalTranslationWhitespaceCompensation = 2.25;\n\n    var previousHorizontalTranslation = function previousHorizontalTranslation(idx) {\n      return -60 + (characterWidth * idx + characterWidth / 1.5 + strokeOffset);\n    }; // _________________________________________________\n    // Preload\n\n\n    p.preload = function () {\n      dharmaFont = p.loadFont(\"/fonts/dharma/dharma_regular.ttf\");\n    }; // _________________________________________________\n    // Setup\n\n\n    p.setup = function () {\n      // Our Canvas\n      p.createCanvas(W, H);\n    }; // _________________________________________________\n    // Update Character\n\n\n    var updateCharacter = function updateCharacter(_char, idx) {\n      if (_char.count < maxCount && _char.countIsIncrementing) {\n        characters[idx] = _objectSpread({}, _char, {\n          count: _char.count + 1\n        });\n        previousCountUpdateTime = p.millis();\n        return;\n      } else if (_char.count === maxCount) {\n        characters[idx] = _objectSpread({}, _char, {\n          count: _char.count - 1,\n          countIsIncrementing: false,\n          countIsDecrementing: true\n        });\n        previousCountUpdateTime = p.millis();\n        return;\n      } else if (_char.count > minCount && _char.countIsDecrementing) {\n        characters[idx] = _objectSpread({}, _char, {\n          count: _char.count - 1,\n          countIsDecrementing: true\n        });\n        previousCountUpdateTime = p.millis();\n        return;\n      } else if (_char.count === minCount && _char.countIsDecrementing) {\n        characters[idx] = _objectSpread({}, _char, {\n          count: _char.count + 1,\n          countIsIncrementing: true,\n          countIsDecrementing: false\n        });\n        previousCountUpdateTime = p.millis();\n        return;\n      }\n\n      return;\n    }; // _________________________________________________\n    // Update Copies\n\n\n    var updateCopies = function updateCopies(_char2, idx) {\n      if (_char2.copies < maxCopies && _char2.copiesAreIncrementing) {\n        characters[idx] = _objectSpread({}, _char2, {\n          copies: _char2.copies + 1\n        });\n        previousCopyUpdateTime = p.millis();\n        return;\n      } else if (_char2.copies === maxCopies) {\n        characters[idx] = _objectSpread({}, _char2, {\n          copies: _char2.copies - 1,\n          copiesAreIncrementing: false,\n          copiesAreDecrementing: true\n        });\n        previousCopyUpdateTime = p.millis();\n        return;\n      } else if (_char2.copies > minCopies && _char2.copiesAreDecrementing) {\n        characters[idx] = _objectSpread({}, _char2, {\n          copies: _char2.copies - 1,\n          copiesAreDecrementing: true\n        });\n        previousCopyUpdateTime = p.millis();\n        return;\n      } else if (_char2.copies === minCopies && _char2.copiesAreDecrementing) {\n        characters[idx] = _objectSpread({}, _char2, {\n          copies: _char2.copies + 1,\n          copiesAreIncrementing: true,\n          copiesAreDecrementing: false\n        });\n        previousCopyUpdateTime = p.millis();\n        return;\n      }\n\n      return;\n    }; // _________________________________________________\n    // Draw\n\n\n    p.draw = function () {\n      p.background(BG);\n      p.textFont(dharmaFont);\n      p.textSize(characterSize);\n      p.textAlign(p.CENTER, p.CENTER);\n      p.fill(\"\".concat(Theme.Color.Galaxy));\n      p.strokeWeight(strokeWidth);\n      p.stroke(BG);\n\n      if (H && W) {\n        // _________________________________________\n        // Loop through our copies\n        characters.map(function (_char3, idx) {\n          p.scale(1, 1);\n          var randomCharPick = Math.random() <= 0.5;\n\n          if (randomCharPick) {\n            console.log(\"yep\");\n            updateCopies(_char3, idx);\n          } else {\n            console.log(\"nope\");\n          }\n\n          if (randomCharPick && p.millis() - previousCountUpdateTime > 3000) {\n            updateCharacter(_char3, idx);\n          }\n\n          var countArray = _Array$from(Array(_char3.count).keys());\n\n          countArray = countArray.map(function (countNumber) {\n            return countNumber + 1;\n          }); // _________________________________________\n          // Duplicate positions\n\n          countArray.map(function (countNumber, idxx) {\n            var verticalScale = 1 / (_char3.count * 0.95);\n            var verticalSkewDivisible = 2.75;\n            var characterSkewDivisible = 1.36;\n            var duplicateVerticalPosition = _char3.count == 1 ? H / verticalTranslationWhitespaceCompensation : characterSize / verticalSkewDivisible + characterSize / characterSkewDivisible * idxx; // _________________________________________\n            // Make copies\n\n            var copiesArray = _Array$from(Array(_char3.copies).keys()); // let randomCopyPick = Math.random() <= 0.5;\n\n\n            copiesArray = copiesArray.map(function (copyNumber) {\n              return copyNumber + 1;\n            }); // let randomCopyPick = Math.random() <= 0.5;\n\n            var copyTimer = p.millis() - previousCopyUpdateTime > 6000;\n            copiesArray.map(function (copyNumber, idxxx) {\n              // let centerCoordsX = W / 2;\n              // let centerCoordsY = H / 2;\n              // let horizontalTranslate =\n              //   copyNumber !== 1\n              //     ? (previousHorizontalTranslation(idx) +\n              //         (strokeOffset / (p.mouseX / 100)) * copyNumber)\n              //     : previousHorizontalTranslation(idx) +\n              //       strokeOffset * copyNumber;\n              // let verticalTranslate =\n              //   copyNumber !== 1\n              //     ? (duplicateVerticalPosition - (strokeOffset / (p.mouseX / 100)) * copyNumber)\n              //     : duplicateVerticalPosition - strokeOffset * copyNumber;\n              var horizontalTranslate = previousHorizontalTranslation(idx) + strokeOffset * copyNumber;\n              var verticalTranslate = duplicateVerticalPosition - strokeOffset * copyNumber;\n              var isFirstCount = true;\n\n              if (isFirstCount) {\n                p.push();\n                p.scale(1, verticalScale);\n                p.text(_char3.letter, horizontalTranslate, verticalTranslate);\n                p.pop();\n                isFirstCount = false;\n                previousCopyUpdateTime = p.millis();\n              } else if (copyTimer) {\n                p.push();\n                p.scale(1, verticalScale);\n                p.text(_char3.letter, horizontalTranslate, verticalTranslate);\n                p.pop();\n                previousCopyUpdateTime = p.millis();\n              } else {\n                return null;\n              }\n            });\n          });\n        });\n      }\n    };\n\n    p.windowResized = function () {\n      p.resizeCanvas(W, H);\n    };\n  };\n};\n\nexport default DharmaCanvasDisplay;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/dharma.tsx"],"names":["Theme","DharmaCanvasDisplay","W","H","ID","BG","p","dharmaFont","text","splitCharacterArray","split","characters","map","character","idx","letter","count","copies","countIsIncrementing","countIsDecrementing","copiesAreIncrementing","copiesAreDecrementing","characterCount","length","characterWidth","characterSize","console","log","previousCountUpdateTime","previousCopyUpdateTime","strokeWidth","strokeOffset","maxCount","minCount","maxCopies","minCopies","verticalTranslationWhitespaceCompensation","previousHorizontalTranslation","preload","loadFont","setup","createCanvas","updateCharacter","char","millis","updateCopies","draw","background","textFont","textSize","textAlign","CENTER","fill","Color","Galaxy","strokeWeight","stroke","scale","randomCharPick","Math","random","countArray","Array","keys","countNumber","idxx","verticalScale","verticalSkewDivisible","characterSkewDivisible","duplicateVerticalPosition","copiesArray","copyNumber","copyTimer","idxxx","horizontalTranslate","verticalTranslate","isFirstCount","push","pop","windowResized","resizeCanvas"],"mappings":"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","sourcesContent":["/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n\nimport p5, { Font } from \"p5\";\nimport { Theme } from \"../../constants/Theme\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_DharmaCanvas = {\n  W: number;\n  H: number;\n  ID: number;\n  BG: string;\n};\n\nexport type LXLT_DharmaCanvasDisplay = (\n  W: number,\n  H: number,\n  ID: number,\n  BG: string\n) => (p: p5) => void;\n\ntype LXLT_DharmaCanvasChar = {\n  letter: string;\n  count: number;\n  idx: number;\n\n  copies: number;\n\n  copiesAreIncrementing: boolean;\n  copiesAreDecrementing: boolean;\n\n  countIsIncrementing: boolean;\n  countIsDecrementing: boolean;\n};\n\nconst DharmaCanvasDisplay: LXLT_DharmaCanvasDisplay = (W, H, ID, BG) => (\n  p: p5\n) => {\n  // _________________________________________________\n  // Config\n\n  // ____________________________\n  // Fonts\n  let dharmaFont: Font;\n\n  // ____________________________\n  // Typography\n  let text = \"LAXALT\";\n\n  let splitCharacterArray = text.split(\"\");\n  let characters: LXLT_DharmaCanvasChar[] = splitCharacterArray.map(\n    (character: string, idx: number) => {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n\n        copies: 5,\n\n        countIsIncrementing: true,\n        countIsDecrementing: false,\n\n        copiesAreIncrementing: true,\n        copiesAreDecrementing: false,\n      };\n    }\n  );\n\n  let characterCount: number = splitCharacterArray.length;\n  let characterWidth: number = W / characterCount;\n  let characterSize: number = H * 1.25;\n\n  console.log(characterSize, \"characterSize\");\n\n  // ____________________________\n  // Counts\n  // let renderCount: number = 0;\n  let previousCountUpdateTime: number = 0;\n  let previousCopyUpdateTime: number = 0;\n\n  // ____________________________\n  // Strokes\n  let strokeWidth: number = 4;\n  let strokeOffset: number = strokeWidth * 1.5;\n\n  // ____________________________\n  // Limits\n  let maxCount = 6;\n  let minCount = 1;\n\n  let maxCopies = 12;\n  let minCopies = 1;\n\n  // ____________________________\n  // Translation\n  // let previousVerticalTranslation: number = H / 2.25;\n\n  let verticalTranslationWhitespaceCompensation: number = 2.25;\n  const previousHorizontalTranslation = (idx: number) =>\n    -60 + (characterWidth * idx + characterWidth / 1.5 + strokeOffset);\n\n  // _________________________________________________\n  // Preload\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  };\n\n  // _________________________________________________\n  // Setup\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H);\n  };\n\n  // _________________________________________________\n  // Update Character\n  const updateCharacter = (char: LXLT_DharmaCanvasChar, idx: number) => {\n    if (char.count < maxCount && char.countIsIncrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count + 1,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    } else if (char.count === maxCount) {\n      characters[idx] = {\n        ...char,\n        count: char.count - 1,\n        countIsIncrementing: false,\n        countIsDecrementing: true,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    } else if (char.count > minCount && char.countIsDecrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count - 1,\n        countIsDecrementing: true,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    } else if (char.count === minCount && char.countIsDecrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count + 1,\n        countIsIncrementing: true,\n        countIsDecrementing: false,\n      };\n\n      previousCountUpdateTime = p.millis();\n\n      return;\n    }\n\n    return;\n  };\n\n  // _________________________________________________\n  // Update Copies\n  const updateCopies = (char: LXLT_DharmaCanvasChar, idx: number) => {\n    if (char.copies < maxCopies && char.copiesAreIncrementing) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies + 1,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    } else if (char.copies === maxCopies) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies - 1,\n        copiesAreIncrementing: false,\n        copiesAreDecrementing: true,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    } else if (char.copies > minCopies && char.copiesAreDecrementing) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies - 1,\n        copiesAreDecrementing: true,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    } else if (char.copies === minCopies && char.copiesAreDecrementing) {\n      characters[idx] = {\n        ...char,\n        copies: char.copies + 1,\n        copiesAreIncrementing: true,\n        copiesAreDecrementing: false,\n      };\n\n      previousCopyUpdateTime = p.millis();\n\n      return;\n    }\n\n    return;\n  };\n\n  // _________________________________________________\n  // Draw\n  p.draw = () => {\n    p.background(BG);\n\n    p.textFont(dharmaFont);\n\n    p.textSize(characterSize);\n\n    p.textAlign(p.CENTER, p.CENTER);\n\n    p.fill(`${Theme.Color.Galaxy}`);\n    p.strokeWeight(strokeWidth);\n    p.stroke(BG);\n\n    if (H && W) {\n      // _________________________________________\n      // Loop through our copies\n      characters.map((char: LXLT_DharmaCanvasChar, idx: number) => {\n        p.scale(1, 1);\n\n        let randomCharPick = Math.random() <= 0.5;\n\n        if (randomCharPick) {\n          console.log(\"yep\");\n\n          updateCopies(char, idx);\n        } else {\n          console.log(\"nope\");\n        }\n\n        if (randomCharPick && p.millis() - previousCountUpdateTime > 3000) {\n          updateCharacter(char, idx);\n        }\n\n        let countArray: number[] = Array.from(Array(char.count).keys());\n\n        countArray = countArray.map((countNumber: number) => {\n          return countNumber + 1;\n        });\n\n        // _________________________________________\n        // Duplicate positions\n        countArray.map((countNumber: number, idxx: number) => {\n          let verticalScale = 1 / (char.count * 0.95);\n\n          let verticalSkewDivisible: number = 2.75;\n          let characterSkewDivisible: number = 1.36;\n\n          let duplicateVerticalPosition: number =\n            char.count == 1\n              ? H / verticalTranslationWhitespaceCompensation\n              : characterSize / verticalSkewDivisible +\n                (characterSize / characterSkewDivisible) * idxx;\n\n          // _________________________________________\n          // Make copies\n          let copiesArray: number[] = Array.from(Array(char.copies).keys());\n          // let randomCopyPick = Math.random() <= 0.5;\n\n          copiesArray = copiesArray.map((copyNumber: number) => {\n            return copyNumber + 1;\n          });\n\n          // let randomCopyPick = Math.random() <= 0.5;\n          let copyTimer = p.millis() - previousCopyUpdateTime > 6000;\n\n          copiesArray.map((copyNumber: number, idxxx: number) => {\n            // let centerCoordsX = W / 2;\n            // let centerCoordsY = H / 2;\n\n            // let horizontalTranslate =\n            //   copyNumber !== 1\n            //     ? (previousHorizontalTranslation(idx) +\n            //         (strokeOffset / (p.mouseX / 100)) * copyNumber)\n            //     : previousHorizontalTranslation(idx) +\n            //       strokeOffset * copyNumber;\n\n            // let verticalTranslate =\n            //   copyNumber !== 1\n            //     ? (duplicateVerticalPosition - (strokeOffset / (p.mouseX / 100)) * copyNumber)\n            //     : duplicateVerticalPosition - strokeOffset * copyNumber;\n\n            let horizontalTranslate =\n              previousHorizontalTranslation(idx) + strokeOffset * copyNumber;\n\n            let verticalTranslate =\n              duplicateVerticalPosition - strokeOffset * copyNumber;\n\n            let isFirstCount = true;\n\n            if (isFirstCount) {\n              p.push();\n              p.scale(1, verticalScale);\n              p.text(char.letter, horizontalTranslate, verticalTranslate);\n              p.pop();\n\n              isFirstCount = false;\n              previousCopyUpdateTime = p.millis();\n            } else if (copyTimer) {\n              p.push();\n              p.scale(1, verticalScale);\n              p.text(char.letter, horizontalTranslate, verticalTranslate);\n              p.pop();\n\n              previousCopyUpdateTime = p.millis();\n            } else {\n              return null;\n            }\n          });\n        });\n      });\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;\n"]},"metadata":{},"sourceType":"module"}