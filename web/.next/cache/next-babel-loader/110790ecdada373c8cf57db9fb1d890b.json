{"ast":null,"code":"import _classCallCheck from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n *\n * * @see https://tympanus.net/codrops/2019/10/08/creating-a-water-like-distortion-effect-with-three-js/\n *\n */\n// ____________________________________________________________________________________\nimport * as THREE from \"three\";\nimport { Effect } from \"postprocessing\";\nexport var WaterEffect = /*#__PURE__*/function (_Effect) {\n  _inherits(WaterEffect, _Effect);\n\n  var _super = _createSuper(WaterEffect);\n\n  function WaterEffect() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      texture: undefined\n    };\n\n    _classCallCheck(this, WaterEffect);\n\n    return _super.call(this, \"WaterEffect\", fragment, {\n      uniforms: new Map([[\"uTexture\", new THREE.Uniform(options.texture)]])\n    });\n  }\n\n  return WaterEffect;\n}(Effect);\nexport default WaterEffect;\nvar fragment = \"\\n\\nuniform sampler2D uTexture;\\n#define PI 3.14159265359\\n\\nvoid mainUv(inout vec2 uv) {\\n        vec4 tex = texture2D(uTexture, uv);\\n        float angle = -((tex.r) * (PI * 2.) - PI) ;\\n        float vx = -(tex.r *2. - 1.);\\n        float vy = -(tex.g *2. - 1.);\\n        float intensity = tex.b;\\n        uv.x += vx * 0.2 * intensity ;\\n        uv.y += vy * 0.2  *intensity;\\n        // uv.xy *= 1. - 0.5 * smoothstep( 0., 1., intensity) ;\\n        // uv.x +=  0.2 * intensity;\\n        // uv.y +=  0.2  *intensity;\\n    }\\n\\n\\n\";","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/three/water-distort/WaterEffect.ts"],"names":["THREE","Effect","WaterEffect","options","texture","undefined","fragment","uniforms","Map","Uniform"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,gBAAvB;AAEA,WAAaC,WAAb;AAAA;;AAAA;;AACE,yBAA0E;AAAA,QAA9DC,OAA8D,uEAAxB;AAAEC,MAAAA,OAAO,EAAEC;AAAX,KAAwB;;AAAA;;AAAA,6BAClE,aADkE,EACnDC,QADmD,EACzC;AAC7BC,MAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ,CAAC,CAAC,UAAD,EAAa,IAAIR,KAAK,CAACS,OAAV,CAAkBN,OAAO,CAACC,OAA1B,CAAb,CAAD,CAAR;AADmB,KADyC;AAIzE;;AALH;AAAA,EAAiCH,MAAjC;AAQA,eAAeC,WAAf;AAEA,IAAMI,QAAQ,yhBAAd","sourcesContent":["/**\n *\n * * @see https://tympanus.net/codrops/2019/10/08/creating-a-water-like-distortion-effect-with-three-js/\n *\n */\n\n// ____________________________________________________________________________________\n\nimport * as THREE from \"three\";\nimport { Effect } from \"postprocessing\";\n\nexport class WaterEffect extends Effect {\n  constructor(options: { texture: THREE.Texture } = { texture: undefined }) {\n    super(\"WaterEffect\", fragment, {\n      uniforms: new Map([[\"uTexture\", new THREE.Uniform(options.texture)]]),\n    });\n  }\n}\n\nexport default WaterEffect;\n\nconst fragment = `\n\nuniform sampler2D uTexture;\n#define PI 3.14159265359\n\nvoid mainUv(inout vec2 uv) {\n        vec4 tex = texture2D(uTexture, uv);\n        float angle = -((tex.r) * (PI * 2.) - PI) ;\n        float vx = -(tex.r *2. - 1.);\n        float vy = -(tex.g *2. - 1.);\n        float intensity = tex.b;\n        uv.x += vx * 0.2 * intensity ;\n        uv.y += vy * 0.2  *intensity;\n        // uv.xy *= 1. - 0.5 * smoothstep( 0., 1., intensity) ;\n        // uv.x +=  0.2 * intensity;\n        // uv.y +=  0.2  *intensity;\n    }\n\n\n`;\n"]},"metadata":{},"sourceType":"module"}