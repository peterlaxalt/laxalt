{"ast":null,"code":"export default (function (W, H) {\n  return function (p) {\n    var x = 0;\n    var scale = 50;\n    var initialScale = 0;\n    var color = {\n      primary: \"rgba(208, 112, 166, .3)\",\n      primaryAlpha: \"rgba(208, 112, 166, 1)\",\n      secondary: \"#FFF4F7\",\n      bg: \"#1C170C\",\n      white: \"#ffffff\"\n    };\n\n    p.setup = function () {\n      // Our Canvas\n      var sketchCanvas = p.createCanvas(p.windowWidth, p.windowHeight);\n      sketchCanvas.parent(\"sketch\");\n    };\n\n    p.draw = function () {\n      scale += 1;\n      initialScale = 400;\n      x = x * 1.1 + 2;\n      p.noFill();\n      p.stroke(color.primary);\n\n      if (p.mouseX > 0 || p.mouseY > 0) {\n        p.ellipse(p.mouseX, p.mouseY, Math.sin(scale) * (Math.sin(scale) * initialScale), Math.sin(scale) * (Math.sin(scale) * initialScale));\n        p.smooth();\n      } else {\n        p.ellipse(p.windowWidth / 2, p.windowHeight / 2, Math.sin(scale) * (Math.sin(scale) * initialScale), Math.sin(scale) * (Math.sin(scale) * initialScale));\n        p.smooth();\n      }\n    };\n\n    p.windowResized = function () {\n      p.resizeCanvas(W, H);\n    };\n  };\n});","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/d1.tsx"],"names":["W","H","p","x","scale","initialScale","color","primary","primaryAlpha","secondary","bg","white","setup","sketchCanvas","createCanvas","windowWidth","windowHeight","parent","draw","noFill","stroke","mouseX","mouseY","ellipse","Math","sin","smooth","windowResized","resizeCanvas"],"mappings":"AAAA,gBAAe,UAACA,CAAD,EAASC,CAAT;AAAA,SAAoB,UAACC,CAAD,EAAY;AAC7C,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIC,YAAY,GAAG,CAAnB;AAEA,QAAIC,KAAK,GAAG;AACVC,MAAAA,OAAO,EAAE,yBADC;AAEVC,MAAAA,YAAY,EAAE,wBAFJ;AAGVC,MAAAA,SAAS,EAAE,SAHD;AAIVC,MAAAA,EAAE,EAAE,SAJM;AAKVC,MAAAA,KAAK,EAAE;AALG,KAAZ;;AAQAT,IAAAA,CAAC,CAACU,KAAF,GAAU,YAAW;AACnB;AACA,UAAIC,YAAY,GAAGX,CAAC,CAACY,YAAF,CAAeZ,CAAC,CAACa,WAAjB,EAA8Bb,CAAC,CAACc,YAAhC,CAAnB;AACAH,MAAAA,YAAY,CAACI,MAAb,CAAoB,QAApB;AACD,KAJD;;AAMAf,IAAAA,CAAC,CAACgB,IAAF,GAAS,YAAW;AAClBd,MAAAA,KAAK,IAAI,CAAT;AACAC,MAAAA,YAAY,GAAG,GAAf;AACAF,MAAAA,CAAC,GAAGA,CAAC,GAAG,GAAJ,GAAU,CAAd;AAEAD,MAAAA,CAAC,CAACiB,MAAF;AACAjB,MAAAA,CAAC,CAACkB,MAAF,CAASd,KAAK,CAACC,OAAf;;AAEA,UAAIL,CAAC,CAACmB,MAAF,GAAW,CAAX,IAAgBnB,CAAC,CAACoB,MAAF,GAAW,CAA/B,EAAkC;AAChCpB,QAAAA,CAAC,CAACqB,OAAF,CACErB,CAAC,CAACmB,MADJ,EAEEnB,CAAC,CAACoB,MAFJ,EAGEE,IAAI,CAACC,GAAL,CAASrB,KAAT,KAAmBoB,IAAI,CAACC,GAAL,CAASrB,KAAT,IAAkBC,YAArC,CAHF,EAIEmB,IAAI,CAACC,GAAL,CAASrB,KAAT,KAAmBoB,IAAI,CAACC,GAAL,CAASrB,KAAT,IAAkBC,YAArC,CAJF;AAMAH,QAAAA,CAAC,CAACwB,MAAF;AACD,OARD,MAQO;AACLxB,QAAAA,CAAC,CAACqB,OAAF,CACErB,CAAC,CAACa,WAAF,GAAgB,CADlB,EAEEb,CAAC,CAACc,YAAF,GAAiB,CAFnB,EAGEQ,IAAI,CAACC,GAAL,CAASrB,KAAT,KAAmBoB,IAAI,CAACC,GAAL,CAASrB,KAAT,IAAkBC,YAArC,CAHF,EAIEmB,IAAI,CAACC,GAAL,CAASrB,KAAT,KAAmBoB,IAAI,CAACC,GAAL,CAASrB,KAAT,IAAkBC,YAArC,CAJF;AAMAH,QAAAA,CAAC,CAACwB,MAAF;AACD;AACF,KAzBD;;AA2BAxB,IAAAA,CAAC,CAACyB,aAAF,GAAkB,YAAW;AAC3BzB,MAAAA,CAAC,CAAC0B,YAAF,CAAe5B,CAAf,EAAkBC,CAAlB;AACD,KAFD;AAGD,GAjDc;AAAA,CAAf","sourcesContent":["export default (W: any, H: any) => (p: any) => {\n  let x = 0;\n  let scale = 50;\n  let initialScale = 0;\n\n  let color = {\n    primary: \"rgba(208, 112, 166, .3)\",\n    primaryAlpha: \"rgba(208, 112, 166, 1)\",\n    secondary: \"#FFF4F7\",\n    bg: \"#1C170C\",\n    white: \"#ffffff\"\n  };\n\n  p.setup = function() {\n    // Our Canvas\n    let sketchCanvas = p.createCanvas(p.windowWidth, p.windowHeight);\n    sketchCanvas.parent(\"sketch\");\n  };\n\n  p.draw = function() {\n    scale += 1;\n    initialScale = 400;\n    x = x * 1.1 + 2;\n\n    p.noFill();\n    p.stroke(color.primary);\n\n    if (p.mouseX > 0 || p.mouseY > 0) {\n      p.ellipse(\n        p.mouseX,\n        p.mouseY,\n        Math.sin(scale) * (Math.sin(scale) * initialScale),\n        Math.sin(scale) * (Math.sin(scale) * initialScale)\n      );\n      p.smooth();\n    } else {\n      p.ellipse(\n        p.windowWidth / 2,\n        p.windowHeight / 2,\n        Math.sin(scale) * (Math.sin(scale) * initialScale),\n        Math.sin(scale) * (Math.sin(scale) * initialScale)\n      );\n      p.smooth();\n    }\n  };\n\n  p.windowResized = function() {\n    p.resizeCanvas(W, H);\n  };\n};\n"]},"metadata":{},"sourceType":"module"}