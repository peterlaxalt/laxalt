{"ast":null,"code":"import _classCallCheck from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"/Users/pflaxalt/Repositories/_pfl/web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n// ____________________________________________________________________________________\n\n/**\n *\n * @name WaterTexture\n * @see https://tympanus.net/codrops/2019/10/08/creating-a-water-like-distortion-effect-with-three-js/\n *\n */\nexport var WaterTexture = /*#__PURE__*/function () {\n  // _________________________________\n  // Types\n  // _________________________________\n  // Constructor\n  function WaterTexture(options) {\n    _classCallCheck(this, WaterTexture);\n\n    _defineProperty(this, \"size\", void 0);\n\n    _defineProperty(this, \"radius\", void 0);\n\n    _defineProperty(this, \"width\", void 0);\n\n    _defineProperty(this, \"height\", void 0);\n\n    _defineProperty(this, \"canvas\", void 0);\n\n    _defineProperty(this, \"ctx\", void 0);\n\n    _defineProperty(this, \"debug\", void 0);\n\n    _defineProperty(this, \"points\", void 0);\n\n    _defineProperty(this, \"maxAge\", void 0);\n\n    _defineProperty(this, \"last\", void 0);\n\n    this.size = 64;\n    this.radius = this.size * 0.1;\n    this.width = this.height = this.size;\n    this.size = 64;\n    this.radius = this.size * 0.1;\n    this.points = [];\n    this.maxAge = 64;\n    this.last = null;\n\n    if (options.debug) {\n      this.width = window.innerWidth;\n      this.height = window.innerHeight;\n      this.radius = this.width * 0.05;\n    }\n\n    this.initTexture();\n    if (options.debug) document.body.append(this.canvas);\n  }\n  /**\n   *\n   * @description Initialize our canvas\n   *\n   */\n\n\n  _createClass(WaterTexture, [{\n    key: \"initTexture\",\n    value: function initTexture() {\n      this.canvas = document.createElement(\"canvas\");\n      this.canvas.id = \"WaterTexture\";\n      this.canvas.width = this.width;\n      this.canvas.height = this.height;\n      this.ctx = this.canvas.getContext(\"2d\");\n      this.clear();\n    }\n    /**\n     *\n     * @description Note that addPoint() receives normalized values, from 0 to 1.\n     * If the canvas happens to resize, we can use the normalized points to draw using the correct size.\n     *\n     */\n\n  }, {\n    key: \"addPoint\",\n    value: function addPoint(point) {\n      var force = 0;\n      var vx = 0;\n      var vy = 0;\n      var last = this.last;\n\n      if (last) {\n        var relativeX = point.x - last.x;\n        var relativeY = point.y - last.y; // Distance formula\n\n        var distanceSquared = relativeX * relativeX + relativeY * relativeY;\n        var distance = Math.sqrt(distanceSquared); // Calculate Unit Vector\n\n        vx = relativeX / distance;\n        vy = relativeY / distance;\n        force = Math.min(distanceSquared * 10000, 1);\n      }\n\n      this.last = {\n        x: point.x,\n        y: point.y\n      };\n      this.points.push({\n        x: point.x,\n        y: point.y,\n        age: 0,\n        force: force,\n        vx: vx,\n        vy: vy\n      });\n    }\n    /**\n     *\n     * @description Letâ€™s create drawPoint(point) to start drawing the ripples:\n     * Convert the normalized point coordinates into canvas coordinates. Then, draw a happy little circle.\n     *\n     */\n\n  }, {\n    key: \"drawPoint\",\n    value: function drawPoint(point) {\n      // Convert normalized position into canvas coordinates\n      var pos = {\n        x: point.x * this.width,\n        y: point.y * this.height\n      };\n      var radius = this.radius;\n      this.ctx.beginPath();\n      this.ctx.arc(pos.x, pos.y, radius, 0, Math.PI * 2);\n      this.ctx.fill();\n      var ctx = this.ctx; // Lower the opacity as it gets older\n\n      var intensity = 1;\n      intensity = 1 - point.age / this.maxAge;\n      var color = \"255,255,255\";\n      var offset = this.width * 5; // 1. Give the shadow a high offset.\n\n      ctx.shadowOffsetX = offset;\n      ctx.shadowOffsetY = offset;\n      ctx.shadowBlur = radius * 1;\n      ctx.shadowColor = \"rgba(\".concat(color, \",\").concat(0.2 * intensity, \")\");\n      this.ctx.beginPath();\n      this.ctx.fillStyle = \"rgba(255,0,0,1)\"; // 2. Move the circle to the other direction of the offset\n\n      this.ctx.arc(pos.x - offset, pos.y - offset, radius, 0, Math.PI * 2);\n      this.ctx.fill();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.ctx.fillStyle = \"black\";\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this = this;\n\n      this.clear();\n      var agePart = 1 / this.maxAge;\n      this.points.forEach(function (point, i) {\n        var slowAsOlder = 1 - point.age / _this.maxAge;\n        var force = point.force * agePart * slowAsOlder;\n        point.x += point.vx * force;\n        point.y += point.vy * force;\n        point.age += 1;\n\n        if (point.age > _this.maxAge) {\n          _this.points.splice(i, 1);\n        }\n      });\n      this.points.forEach(function (point) {\n        _this.drawPoint(point);\n      });\n    }\n  }]);\n\n  return WaterTexture;\n}();","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/three/water-distort/WaterTexture.ts"],"names":["WaterTexture","options","size","radius","width","height","points","maxAge","last","debug","window","innerWidth","innerHeight","initTexture","document","body","append","canvas","createElement","id","ctx","getContext","clear","point","force","vx","vy","relativeX","x","relativeY","y","distanceSquared","distance","Math","sqrt","min","push","age","pos","beginPath","arc","PI","fill","intensity","color","offset","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","fillStyle","fillRect","agePart","forEach","i","slowAsOlder","splice","drawPoint"],"mappings":"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","sourcesContent":["// ____________________________________________________________________________________\n\nexport type LXLT_WaterTextureOptions = {\n  debug?: boolean;\n};\n\nexport type LXLT_WaterTexturePoint = {\n  x: number;\n  y: number;\n  age?: number;\n  force?: number;\n  vx?: number;\n  vy?: number;\n};\n\n/**\n *\n * @name WaterTexture\n * @see https://tympanus.net/codrops/2019/10/08/creating-a-water-like-distortion-effect-with-three-js/\n *\n */\n\nexport class WaterTexture {\n  // _________________________________\n  // Types\n  size: number;\n  radius: number;\n  width: number;\n  height: number;\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  debug?: boolean;\n  points: LXLT_WaterTexturePoint[];\n  maxAge: number;\n  last: LXLT_WaterTexturePoint;\n\n  // _________________________________\n  // Constructor\n  constructor(options: LXLT_WaterTextureOptions) {\n    this.size = 64;\n    this.radius = this.size * 0.1;\n    this.width = this.height = this.size;\n\n    this.size = 64;\n    this.radius = this.size * 0.1;\n\n    this.points = [];\n    this.maxAge = 64;\n\n    this.last = null;\n\n    if (options.debug) {\n      this.width = window.innerWidth;\n      this.height = window.innerHeight;\n      this.radius = this.width * 0.05;\n    }\n\n    this.initTexture();\n    if (options.debug) document.body.append(this.canvas);\n  }\n\n  /**\n   *\n   * @description Initialize our canvas\n   *\n   */\n  initTexture() {\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.id = \"WaterTexture\";\n    this.canvas.width = this.width;\n    this.canvas.height = this.height;\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.clear();\n  }\n\n  /**\n   *\n   * @description Note that addPoint() receives normalized values, from 0 to 1.\n   * If the canvas happens to resize, we can use the normalized points to draw using the correct size.\n   *\n   */\n\n  addPoint(point: LXLT_WaterTexturePoint) {\n    let force = 0;\n    let vx = 0;\n    let vy = 0;\n    const last = this.last;\n    if (last) {\n      const relativeX = point.x - last.x;\n      const relativeY = point.y - last.y;\n      // Distance formula\n      const distanceSquared = relativeX * relativeX + relativeY * relativeY;\n      const distance = Math.sqrt(distanceSquared);\n      // Calculate Unit Vector\n      vx = relativeX / distance;\n      vy = relativeY / distance;\n\n      force = Math.min(distanceSquared * 10000, 1);\n    }\n\n    this.last = {\n      x: point.x,\n      y: point.y,\n    };\n    this.points.push({ x: point.x, y: point.y, age: 0, force, vx, vy });\n  }\n\n  /**\n   *\n   * @description Letâ€™s create drawPoint(point) to start drawing the ripples:\n   * Convert the normalized point coordinates into canvas coordinates. Then, draw a happy little circle.\n   *\n   */\n  drawPoint(point: LXLT_WaterTexturePoint) {\n    // Convert normalized position into canvas coordinates\n    let pos = {\n      x: point.x * this.width,\n      y: point.y * this.height,\n    };\n    const radius = this.radius;\n\n    this.ctx.beginPath();\n    this.ctx.arc(pos.x, pos.y, radius, 0, Math.PI * 2);\n    this.ctx.fill();\n\n    const ctx = this.ctx;\n    // Lower the opacity as it gets older\n    let intensity = 1;\n    intensity = 1 - point.age / this.maxAge;\n\n    let color = \"255,255,255\";\n\n    let offset = this.width * 5;\n    // 1. Give the shadow a high offset.\n    ctx.shadowOffsetX = offset;\n    ctx.shadowOffsetY = offset;\n    ctx.shadowBlur = radius * 1;\n    ctx.shadowColor = `rgba(${color},${0.2 * intensity})`;\n\n    this.ctx.beginPath();\n    this.ctx.fillStyle = \"rgba(255,0,0,1)\";\n    // 2. Move the circle to the other direction of the offset\n    this.ctx.arc(pos.x - offset, pos.y - offset, radius, 0, Math.PI * 2);\n    this.ctx.fill();\n  }\n\n  clear() {\n    this.ctx.fillStyle = \"black\";\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  update() {\n    this.clear();\n    let agePart = 1 / this.maxAge;\n    this.points.forEach((point, i) => {\n      let slowAsOlder = 1 - point.age / this.maxAge;\n      let force = point.force * agePart * slowAsOlder;\n      point.x += point.vx * force;\n      point.y += point.vy * force;\n      point.age += 1;\n      if (point.age > this.maxAge) {\n        this.points.splice(i, 1);\n      }\n    });\n    this.points.forEach((point) => {\n      this.drawPoint(point);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}