{"ast":null,"code":"import * as THREE from \"three\";\nimport { __DEBUG__ } from \"../../constants/site/Settings\";\nexport var ThreeCanvas = function ThreeCanvas(container, CanvasElement, CanvasTheme) {\n  __DEBUG__ && console.log(\"ðŸ¤™ Three.js Canvas received:\", CanvasElement);\n  var camera, scene, renderer, mesh, material, sketch;\n  var drawStartPos = new THREE.Vector2();\n  init();\n  setupCanvasDrawing();\n  animate();\n\n  function init() {\n    camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 2000);\n    camera.position.z = 500;\n    sketch = container;\n    scene = new THREE.Scene();\n    material = new THREE.MeshBasicMaterial();\n    mesh = new THREE.Mesh(new THREE.BoxBufferGeometry(200, 200, 200), material);\n    scene.add(mesh);\n    renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    sketch.appendChild(renderer.domElement);\n    scene.background = new THREE.Color(0xffffff);\n    window.addEventListener(\"resize\", onWindowResize, false);\n  } // Sets up the drawing canvas and adds it as the material map\n\n\n  function setupCanvasDrawing() {\n    // get canvas and context\n    var drawingCanvas = document.getElementById(\"drawing-canvas\");\n    var drawingContext = drawingCanvas.getContext(\"2d\"); // draw white background\n\n    drawingContext.fillStyle = \"blue\";\n    drawingContext.fillRect(0, 0, 128, 128); // set canvas as material.map (this could be done to any map, bump, displacement etc.)\n\n    material.map = new THREE.CanvasTexture(drawingCanvas); // set the variable to keep track of when to draw\n\n    var paint = false; // add canvas event listeners\n\n    drawingCanvas.addEventListener(\"pointerdown\", function (e) {\n      paint = true;\n      drawStartPos.set(e.offsetX, e.offsetY);\n    });\n    drawingCanvas.addEventListener(\"pointermove\", function (e) {\n      if (paint) draw(drawingContext, e.offsetX, e.offsetY);\n    });\n    drawingCanvas.addEventListener(\"pointerup\", function () {\n      paint = false;\n    });\n    drawingCanvas.addEventListener(\"pointerleave\", function () {\n      paint = false;\n    });\n  }\n\n  function draw(drawContext, x, y) {\n    drawContext.moveTo(drawStartPos.x, drawStartPos.y);\n    drawContext.strokeStyle = \"#000000\";\n    drawContext.lineTo(x, y);\n    drawContext.stroke(); // reset drawing start position to current position.\n\n    drawStartPos.set(x, y); // need to flag the map as needing updating.\n\n    material.map.needsUpdate = true;\n  }\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  function animate() {\n    requestAnimationFrame(animate);\n    mesh.rotation.x += 0.01;\n    mesh.rotation.y += 0.01;\n    material.map.needsUpdate = true;\n    renderer.render(scene, camera);\n  }\n};\n_c = ThreeCanvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreeCanvas\");","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/three/with-canvas-as-texture.ts"],"names":["THREE","__DEBUG__","ThreeCanvas","container","CanvasElement","CanvasTheme","console","log","camera","scene","renderer","mesh","material","sketch","drawStartPos","Vector2","init","setupCanvasDrawing","animate","PerspectiveCamera","window","innerWidth","innerHeight","position","z","Scene","MeshBasicMaterial","Mesh","BoxBufferGeometry","add","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","appendChild","domElement","background","Color","addEventListener","onWindowResize","drawingCanvas","document","getElementById","drawingContext","getContext","fillStyle","fillRect","map","CanvasTexture","paint","e","set","offsetX","offsetY","draw","drawContext","x","y","moveTo","strokeStyle","lineTo","stroke","needsUpdate","aspect","updateProjectionMatrix","requestAnimationFrame","rotation","render"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport { __DEBUG__ } from \"../../constants/site/Settings\";\nimport { LXLT_ColorTheme } from \"../../constants/styles/Color\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_ThreeCanvasDisplay = (\n  container: HTMLDivElement,\n  CanvasElement: HTMLCanvasElement,\n  CanvasTheme: LXLT_ColorTheme\n) => void;\n\nexport const ThreeCanvas: LXLT_ThreeCanvasDisplay = (\n  container,\n  CanvasElement,\n  CanvasTheme\n) => {\n  __DEBUG__ && console.log(\"ðŸ¤™ Three.js Canvas received:\", CanvasElement);\n\n  let camera, scene, renderer, mesh, material, sketch;\n  const drawStartPos = new THREE.Vector2();\n\n  init();\n  setupCanvasDrawing();\n  animate();\n\n  function init() {\n    camera = new THREE.PerspectiveCamera(\n      50,\n      window.innerWidth / window.innerHeight,\n      1,\n      2000\n    );\n    camera.position.z = 500;\n\n    sketch = container;\n\n    scene = new THREE.Scene();\n\n    material = new THREE.MeshBasicMaterial();\n\n    mesh = new THREE.Mesh(new THREE.BoxBufferGeometry(200, 200, 200), material);\n    scene.add(mesh);\n\n    renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    sketch.appendChild(renderer.domElement);\n\n    scene.background = new THREE.Color(0xffffff);\n\n    window.addEventListener(\"resize\", onWindowResize, false);\n  }\n\n  // Sets up the drawing canvas and adds it as the material map\n\n  function setupCanvasDrawing() {\n    // get canvas and context\n\n    const drawingCanvas: HTMLCanvasElement = document.getElementById(\n      \"drawing-canvas\"\n    ) as HTMLCanvasElement;\n    const drawingContext = drawingCanvas.getContext(\"2d\");\n\n    // draw white background\n\n    drawingContext.fillStyle = \"blue\";\n    drawingContext.fillRect(0, 0, 128, 128);\n\n    // set canvas as material.map (this could be done to any map, bump, displacement etc.)\n\n    material.map = new THREE.CanvasTexture(drawingCanvas);\n\n    // set the variable to keep track of when to draw\n\n    let paint = false;\n\n    // add canvas event listeners\n    drawingCanvas.addEventListener(\"pointerdown\", function (e) {\n      paint = true;\n      drawStartPos.set(e.offsetX, e.offsetY);\n    });\n\n    drawingCanvas.addEventListener(\"pointermove\", function (e) {\n      if (paint) draw(drawingContext, e.offsetX, e.offsetY);\n    });\n\n    drawingCanvas.addEventListener(\"pointerup\", function () {\n      paint = false;\n    });\n\n    drawingCanvas.addEventListener(\"pointerleave\", function () {\n      paint = false;\n    });\n  }\n\n  function draw(drawContext, x, y) {\n    drawContext.moveTo(drawStartPos.x, drawStartPos.y);\n    drawContext.strokeStyle = \"#000000\";\n    drawContext.lineTo(x, y);\n    drawContext.stroke();\n    // reset drawing start position to current position.\n    drawStartPos.set(x, y);\n    // need to flag the map as needing updating.\n    material.map.needsUpdate = true;\n  }\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  function animate() {\n    requestAnimationFrame(animate);\n\n    mesh.rotation.x += 0.01;\n    mesh.rotation.y += 0.01;\n\n    material.map.needsUpdate = true;\n\n    renderer.render(scene, camera);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}