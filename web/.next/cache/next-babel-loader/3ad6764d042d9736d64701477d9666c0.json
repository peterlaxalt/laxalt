{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\n\n/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\nimport { Theme } from \"../../constants/Theme\"; // Begin Component\n// __________________________________________________________________________\n\nvar DharmaCanvasDisplay = function DharmaCanvasDisplay(W, H, ID, BG) {\n  return function (p) {\n    // _________________________________________________\n    // Config\n    var dharmaFont;\n    var text = \"LAXALT\";\n    var splitCharacterArray = text.split(\"\");\n    var characters = splitCharacterArray.map(function (character, idx) {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n        copies: Math.random() <= 0.5\n      };\n    });\n    var renderCount = 1;\n    var strokeWidth = 2;\n    var lastPosition = 0;\n    var characterCount = splitCharacterArray.length;\n    var characterWidth = W / characterCount; // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n    // let characterVerticalTranslation: number = 0.993; // Multiplied by the viewBoxHeight\n    // let characterHorizontalScale: number = 0.75; // Multiplied by the characterWidth\n    // let characterVerticalScale: number = 1.38; // Multiplied by the characterWidth\n    // _________________________________________________\n    // Preload\n\n    p.preload = function () {\n      dharmaFont = p.loadFont(\"/fonts/dharma/dharma_regular.ttf\");\n    }; // _________________________________________________\n    // Setup\n\n\n    p.setup = function () {\n      // Our Canvas\n      // p.createCanvas(W, H, p.WEBGL);\n      p.createCanvas(W, H);\n    }; // _________________________________________________\n    // Draw\n\n\n    p.draw = function () {\n      // rect gives us some geometry on the screen\n      // p.background(BG);\n      p.textFont(dharmaFont);\n      p.textLeading(0);\n      p.textSize(H * 1.25);\n      p.fill(\"\".concat(Theme.Color.Galaxy));\n      p.strokeWeight(strokeWidth);\n      p.stroke(BG);\n\n      if (H > 50 && W > 50) {\n        characters.map(function (_char, idx) {\n          var countArray = _Array$from(Array(_char.count).keys());\n\n          if (p.mouseIsPressed) {\n            return countArray.map(function (duplicate, idxx) {\n              lastPosition = H / 2.25 + strokeWidth * 2 * renderCount;\n              p.text(_char.letter, // W / -2 + characterWidth / 2 + characterWidth * idx,\n              characterWidth * idx + characterWidth / 2 + strokeWidth * 2 * renderCount * -1, lastPosition);\n              renderCount += 1;\n            });\n          } else {\n            return countArray.map(function (duplicate, idxx) {\n              lastPosition = H / 2.25 + strokeWidth * 2;\n              p.text(_char.letter, // W / -2 + characterWidth / 2 + characterWidth * idx,\n              characterWidth * idx + characterWidth / 2, lastPosition);\n            });\n          }\n        });\n      }\n\n      p.textAlign(p.CENTER, p.CENTER);\n    };\n\n    p.windowResized = function () {\n      p.resizeCanvas(W, H);\n    };\n  };\n};\n\nexport default DharmaCanvasDisplay;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/dharma.tsx"],"names":["Theme","DharmaCanvasDisplay","W","H","ID","BG","p","dharmaFont","text","splitCharacterArray","split","characters","map","character","idx","letter","count","copies","Math","random","renderCount","strokeWidth","lastPosition","characterCount","length","characterWidth","preload","loadFont","setup","createCanvas","draw","textFont","textLeading","textSize","fill","Color","Galaxy","strokeWeight","stroke","char","countArray","Array","keys","mouseIsPressed","duplicate","idxx","textAlign","CENTER","windowResized","resizeCanvas"],"mappings":"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","sourcesContent":["/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n\nimport p5, { Font } from \"p5\";\nimport { Theme } from \"../../constants/Theme\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_DharmaCanvas = {\n  W: number;\n  H: number;\n  ID: number;\n  BG: string;\n};\n\nexport type LXLT_DharmaCanvasDisplay = (\n  W: number,\n  H: number,\n  ID: number,\n  BG: string\n) => (p: p5) => void;\n\ntype LXLT_DharmaCanvasChar = {\n  letter: string;\n  count: number;\n  idx: number;\n  copies: boolean;\n};\n\nconst DharmaCanvasDisplay: LXLT_DharmaCanvasDisplay = (W, H, ID, BG) => (\n  p: p5\n) => {\n  // _________________________________________________\n  // Config\n  let dharmaFont: Font;\n\n  let text = \"LAXALT\";\n  let splitCharacterArray = text.split(\"\");\n  let characters: LXLT_DharmaCanvasChar[] = splitCharacterArray.map(\n    (character: string, idx: number) => {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n        copies: Math.random() <= 0.5,\n      };\n    }\n  );\n\n  let renderCount: number = 1;\n  let strokeWidth: number = 2;\n  let lastPosition: number = 0;\n\n  let characterCount: number = splitCharacterArray.length;\n  let characterWidth: number = W / characterCount;\n\n  // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n  // let characterVerticalTranslation: number = 0.993; // Multiplied by the viewBoxHeight\n  // let characterHorizontalScale: number = 0.75; // Multiplied by the characterWidth\n  // let characterVerticalScale: number = 1.38; // Multiplied by the characterWidth\n\n  // _________________________________________________\n  // Preload\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  };\n\n  // _________________________________________________\n  // Setup\n  p.setup = () => {\n    // Our Canvas\n    // p.createCanvas(W, H, p.WEBGL);\n    p.createCanvas(W, H);\n  };\n\n  // _________________________________________________\n  // Draw\n  p.draw = () => {\n    // rect gives us some geometry on the screen\n\n    // p.background(BG);\n\n    p.textFont(dharmaFont);\n\n    p.textLeading(0);\n    p.textSize(H * 1.25);\n\n    p.fill(`${Theme.Color.Galaxy}`);\n    p.strokeWeight(strokeWidth);\n    p.stroke(BG);\n\n    if (H > 50 && W > 50) {\n      characters.map((char: LXLT_DharmaCanvasChar, idx: number) => {\n        let countArray: number[] = Array.from(Array(char.count).keys());\n\n        if (p.mouseIsPressed) {\n          return countArray.map((duplicate: number, idxx: number) => {\n            lastPosition = H / 2.25 + strokeWidth * 2 * renderCount;\n\n            p.text(\n              char.letter,\n              // W / -2 + characterWidth / 2 + characterWidth * idx,\n              (characterWidth * idx + characterWidth / 2) + ((strokeWidth * 2 * renderCount) * -1),\n              lastPosition\n            );\n\n            renderCount += 1;\n          });\n        } else {\n          return countArray.map((duplicate: number, idxx: number) => {\n            lastPosition = H / 2.25 + strokeWidth * 2;\n\n            p.text(\n              char.letter,\n              // W / -2 + characterWidth / 2 + characterWidth * idx,\n              characterWidth * idx + characterWidth / 2,\n              lastPosition\n            );\n          });\n        }\n      });\n    }\n\n    p.textAlign(p.CENTER, p.CENTER);\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;\n"]},"metadata":{},"sourceType":"module"}