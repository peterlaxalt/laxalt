{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\nimport { Theme } from \"../../constants/Theme\"; // Begin Component\n// __________________________________________________________________________\n\nconst DharmaCanvasDisplay = (W, H, ID, BG) => p => {\n  // _________________________________________________\n  // Config\n  // ____________________________\n  // Fonts\n  let dharmaFont; // ____________________________\n  // Typography\n\n  let text = \"LAXALT\";\n  let splitCharacterArray = text.split(\"\");\n  let characters = splitCharacterArray.map((character, idx) => {\n    return {\n      letter: character,\n      count: 1,\n      idx: idx,\n      copies: 5,\n      isIncrementing: true,\n      isDecrementing: false\n    };\n  });\n  let characterCount = splitCharacterArray.length;\n  let characterWidth = W / characterCount;\n  let characterSize = H * 1.25;\n  console.log(characterSize, \"characterSize\"); // ____________________________\n  // Counts\n  // let renderCount: number = 0;\n\n  let previousTime = 0; // ____________________________\n  // Strokes\n\n  let strokeWidth = 4;\n  let strokeOffset = strokeWidth * 1.5; // ____________________________\n  // Incrementing\n\n  let maxCount = 6;\n  let minCount = 1; // ____________________________\n  // Translation\n  // let previousVerticalTranslation: number = H / 2.25;\n\n  let verticalTranslationWhitespaceCompensation = 2.25;\n\n  const previousHorizontalTranslation = idx => -60 + (characterWidth * idx + characterWidth / 1.5 + strokeOffset); // const previousHorizontalTranslation = (idx: number) =>\n  //   characterWidth * idx + characterWidth / 2 + strokeOffset * renderCount;\n  // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n  // let characterVerticalTranslation: number = 0.993; // Multiplied by the viewBoxHeight\n  // let characterHorizontalScale: number = 0.75; // Multiplied by the characterWidth\n  // let characterVerticalScale: number = 1.38; // Multiplied by the characterWidth\n  // _________________________________________________\n  // Preload\n\n\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  }; // _________________________________________________\n  // Setup\n\n\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H);\n  }; // _________________________________________________\n  // Update Character\n\n\n  const updateCharacter = (char, idx) => {\n    if (char.count < maxCount && char.isIncrementing) {\n      characters[idx] = _objectSpread({}, char, {\n        count: char.count + 1\n      });\n      previousTime = p.millis();\n    } else if (char.count === maxCount) {\n      characters[idx] = _objectSpread({}, char, {\n        count: char.count - 1,\n        isIncrementing: false,\n        isDecrementing: true\n      });\n      previousTime = p.millis();\n    } else if (char.count > minCount && char.isDecrementing) {\n      characters[idx] = _objectSpread({}, char, {\n        count: char.count - 1,\n        isDecrementing: true\n      });\n      previousTime = p.millis();\n    } else if (char.count === minCount && char.isDecrementing) {\n      characters[idx] = _objectSpread({}, char, {\n        count: char.count + 1,\n        isIncrementing: true,\n        isDecrementing: false\n      });\n      previousTime = p.millis();\n    }\n  }; // _________________________________________________\n  // Draw\n\n\n  p.draw = () => {\n    p.background(BG);\n    p.textFont(dharmaFont);\n    p.textSize(characterSize);\n    p.textAlign(p.CENTER, p.CENTER);\n    p.fill(`${Theme.Color.Galaxy}`);\n    p.strokeWeight(strokeWidth);\n    p.stroke(BG);\n\n    if (H && W) {\n      // _________________________________________\n      // Loop through our copies\n      characters.map((char, idx) => {\n        p.scale(1, 1);\n        let randomCharPick = Math.random() <= 0.5;\n\n        if (randomCharPick && p.millis() - previousTime > 3000) {\n          updateCharacter(char, idx);\n        }\n\n        let countArray = _Array$from(Array(char.count).keys());\n\n        countArray = countArray.map(countNumber => {\n          return countNumber + 1;\n        }); // _________________________________________\n        // Duplicate positions\n\n        countArray.map((countNumber, idxx) => {\n          let verticalScale = 1 / (char.count * 0.95);\n          let verticalSkewDivisible = 2.75;\n          let characterSkewDivisible = 1.36;\n          let duplicateVerticalPosition = char.count == 1 ? H / verticalTranslationWhitespaceCompensation : characterSize / verticalSkewDivisible + characterSize / characterSkewDivisible * idxx; // _________________________________________\n          // Make copies\n\n          let copiesArray = _Array$from(Array(char.copies).keys()); // let randomCopyPick = Math.random() <= 0.5;\n\n\n          copiesArray = copiesArray.map(copyNumber => {\n            return copyNumber + 1;\n          });\n          copiesArray.map((copyNumber, idxxx) => {\n            let horizontalTranslate = copyNumber !== 1 ? (previousHorizontalTranslation(idx) + strokeOffset * copyNumber) * (p.mouseX / 100) : previousHorizontalTranslation(idx) + strokeOffset * copyNumber;\n            let verticalTranslate = copyNumber !== 1 ? (duplicateVerticalPosition - strokeOffset * copyNumber) * (p.mouseY / 100) : duplicateVerticalPosition - strokeOffset * copyNumber;\n            p.push();\n            p.scale(1, verticalScale);\n            p.text(char.letter, horizontalTranslate, verticalTranslate);\n            p.pop();\n          });\n        });\n      });\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;","map":{"version":3,"sources":["/Users/pflaxalt/Repositories/_pfl/web/sketches/p5/dharma.tsx"],"names":["Theme","DharmaCanvasDisplay","W","H","ID","BG","p","dharmaFont","text","splitCharacterArray","split","characters","map","character","idx","letter","count","copies","isIncrementing","isDecrementing","characterCount","length","characterWidth","characterSize","console","log","previousTime","strokeWidth","strokeOffset","maxCount","minCount","verticalTranslationWhitespaceCompensation","previousHorizontalTranslation","preload","loadFont","setup","createCanvas","updateCharacter","char","millis","draw","background","textFont","textSize","textAlign","CENTER","fill","Color","Galaxy","strokeWeight","stroke","scale","randomCharPick","Math","random","countArray","Array","keys","countNumber","idxx","verticalScale","verticalSkewDivisible","characterSkewDivisible","duplicateVerticalPosition","copiesArray","copyNumber","idxxx","horizontalTranslate","mouseX","verticalTranslate","mouseY","push","pop","windowResized","resizeCanvas"],"mappings":"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","sourcesContent":["/**\n *\n * Shader fun\n * @author Peter Laxalt\n *\n */\n\nimport p5, { Font } from \"p5\";\nimport { Theme } from \"../../constants/Theme\";\n\n// Begin Component\n// __________________________________________________________________________\n\nexport type LXLT_DharmaCanvas = {\n  W: number;\n  H: number;\n  ID: number;\n  BG: string;\n};\n\nexport type LXLT_DharmaCanvasDisplay = (\n  W: number,\n  H: number,\n  ID: number,\n  BG: string\n) => (p: p5) => void;\n\ntype LXLT_DharmaCanvasChar = {\n  letter: string;\n  count: number;\n  idx: number;\n\n  copies: number;\n\n  isIncrementing: boolean;\n  isDecrementing: boolean;\n};\n\nconst DharmaCanvasDisplay: LXLT_DharmaCanvasDisplay = (W, H, ID, BG) => (\n  p: p5\n) => {\n  // _________________________________________________\n  // Config\n\n  // ____________________________\n  // Fonts\n  let dharmaFont: Font;\n\n  // ____________________________\n  // Typography\n  let text = \"LAXALT\";\n\n  let splitCharacterArray = text.split(\"\");\n  let characters: LXLT_DharmaCanvasChar[] = splitCharacterArray.map(\n    (character: string, idx: number) => {\n      return {\n        letter: character,\n        count: 1,\n        idx: idx,\n\n        copies: 5,\n\n        isIncrementing: true,\n        isDecrementing: false,\n      };\n    }\n  );\n\n  let characterCount: number = splitCharacterArray.length;\n  let characterWidth: number = W / characterCount;\n  let characterSize: number = H * 1.25;\n\n  console.log(characterSize, \"characterSize\");\n\n  // ____________________________\n  // Counts\n  // let renderCount: number = 0;\n  let previousTime: number = 0;\n\n  // ____________________________\n  // Strokes\n  let strokeWidth: number = 4;\n  let strokeOffset: number = strokeWidth * 1.5;\n\n  // ____________________________\n  // Incrementing\n  let maxCount = 6;\n  let minCount = 1;\n\n  // ____________________________\n  // Translation\n  // let previousVerticalTranslation: number = H / 2.25;\n\n  let verticalTranslationWhitespaceCompensation: number = 2.25;\n  const previousHorizontalTranslation = (idx: number) =>\n    -60 + (characterWidth * idx + characterWidth / 1.5 + strokeOffset);\n\n  // const previousHorizontalTranslation = (idx: number) =>\n  //   characterWidth * idx + characterWidth / 2 + strokeOffset * renderCount;\n\n  // let characterVerticalTranslation = 0.963; // Multiplied by the viewBoxHeight\n  // let characterVerticalTranslation: number = 0.993; // Multiplied by the viewBoxHeight\n  // let characterHorizontalScale: number = 0.75; // Multiplied by the characterWidth\n  // let characterVerticalScale: number = 1.38; // Multiplied by the characterWidth\n\n  // _________________________________________________\n  // Preload\n  p.preload = () => {\n    dharmaFont = p.loadFont(`/fonts/dharma/dharma_regular.ttf`);\n  };\n\n  // _________________________________________________\n  // Setup\n  p.setup = () => {\n    // Our Canvas\n    p.createCanvas(W, H);\n  };\n\n  // _________________________________________________\n  // Update Character\n  const updateCharacter = (char: LXLT_DharmaCanvasChar, idx: number) => {\n    if (char.count < maxCount && char.isIncrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count + 1,\n      };\n\n      previousTime = p.millis();\n    } else if (char.count === maxCount) {\n      characters[idx] = {\n        ...char,\n        count: char.count - 1,\n        isIncrementing: false,\n        isDecrementing: true,\n      };\n\n      previousTime = p.millis();\n    } else if (char.count > minCount && char.isDecrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count - 1,\n        isDecrementing: true,\n      };\n\n      previousTime = p.millis();\n    } else if (char.count === minCount && char.isDecrementing) {\n      characters[idx] = {\n        ...char,\n        count: char.count + 1,\n        isIncrementing: true,\n        isDecrementing: false,\n      };\n\n      previousTime = p.millis();\n    }\n  };\n\n  // _________________________________________________\n  // Draw\n  p.draw = () => {\n    p.background(BG);\n\n    p.textFont(dharmaFont);\n\n    p.textSize(characterSize);\n\n    p.textAlign(p.CENTER, p.CENTER);\n\n    p.fill(`${Theme.Color.Galaxy}`);\n    p.strokeWeight(strokeWidth);\n    p.stroke(BG);\n\n    if (H && W) {\n      // _________________________________________\n      // Loop through our copies\n      characters.map((char: LXLT_DharmaCanvasChar, idx: number) => {\n        p.scale(1, 1);\n\n        let randomCharPick = Math.random() <= 0.5;\n\n        if (randomCharPick && p.millis() - previousTime > 3000) {\n          updateCharacter(char, idx);\n        }\n\n        let countArray: number[] = Array.from(Array(char.count).keys());\n\n        countArray = countArray.map((countNumber: number) => {\n          return countNumber + 1;\n        });\n\n        // _________________________________________\n        // Duplicate positions\n        countArray.map((countNumber: number, idxx: number) => {\n          let verticalScale = 1 / (char.count * 0.95);\n\n          let verticalSkewDivisible: number = 2.75;\n          let characterSkewDivisible: number = 1.36;\n\n          let duplicateVerticalPosition: number =\n            char.count == 1\n              ? H / verticalTranslationWhitespaceCompensation\n              : characterSize / verticalSkewDivisible +\n                (characterSize / characterSkewDivisible) * idxx;\n\n          // _________________________________________\n          // Make copies\n          let copiesArray: number[] = Array.from(Array(char.copies).keys());\n          // let randomCopyPick = Math.random() <= 0.5;\n\n          copiesArray = copiesArray.map((copyNumber: number) => {\n            return copyNumber + 1;\n          });\n\n          copiesArray.map((copyNumber: number, idxxx: number) => {\n            let horizontalTranslate =\n              copyNumber !== 1\n                ? (previousHorizontalTranslation(idx) +\n                    strokeOffset * copyNumber) *\n                  (p.mouseX / 100)\n                : previousHorizontalTranslation(idx) +\n                  strokeOffset * copyNumber;\n\n            let verticalTranslate =\n              copyNumber !== 1\n                ? (duplicateVerticalPosition - strokeOffset * copyNumber) *\n                  (p.mouseY / 100)\n                : duplicateVerticalPosition - strokeOffset * copyNumber;\n\n            p.push();\n            p.scale(1, verticalScale);\n            p.text(char.letter, horizontalTranslate, verticalTranslate);\n            p.pop();\n          });\n        });\n      });\n    }\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(W, H);\n  };\n};\n\nexport default DharmaCanvasDisplay;\n"]},"metadata":{},"sourceType":"module"}